<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vagrant</title>
      <link href="/2022/05/21/Vagrant/"/>
      <url>/2022/05/21/Vagrant/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220521140417.jpg"></p><h1 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>​    Vagrant是一个比较流行的虚拟机管理软件，使用Vagrant 可以让我们用命令直接从云上下载虚拟机的镜像，然后进行创建和管理等。</p><p>​    刚开始做开发的时候的都是把开发环境 配置在 自己的电脑上，随着后面我们接触的东西越来越多，慢慢的电脑上都是各种环境了，php，java，python，nodejs等等，非常麻烦，并且经常由于某种原因就把电脑重装了，ORZ，所以环境都要重来。所以打造一个属于自己并且可以移动的环境是非常重要的。</p><p>​    vagrant就是一款构建虚拟开发环境的工具，支持window，linux，mac，总有一款适合你。并且vagrant 可以把配置好的环境打包成一个box，分享给其他人直接使用，非常方便</p><p>​    vagrant 是一个很适合开发者的虚拟环境部署工具，本身集成了主流的虚拟器管理工具，支持 vmvare 和 virtualbox。</p><p>​    vagrant 的精髓在一个 Vagrantfile 里面，和 docker 的 Dockerfile 功能上一样。我们只需要把需要安装部署的步骤写在 Vagrantfile 里面，便可以实现轻松部署。vagrant 还支持把当前系统做成一个.box 后缀命名的镜像，类似 docker 的 image，可轻松实现环境的移植。</p><p>​    所以，使用vagrant可以在运行着多台vm的系统上定义复杂的虚拟框架。可以通过 Vagrant 封装一个 Linux 的开发环境，分发给团队成员。成员可以在自己喜欢的桌面系统（Mac/Windows/Linux）上开发程序，代码却能统一在封装好的环境里运行</p><p>​    在容器流行之前，Vagrant 就是用来编排虚机和自动部署开发环境的，有了 Docker/Kubernetes 之后，直接用容器来编排应用确实更香。但是还有一些工作，例如容器平台自身的安装，多节点集群的部署测试等，更方便用虚机解决。</p><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h2><h3 id="2-1-安装Vagrant"><a href="#2-1-安装Vagrant" class="headerlink" title="2.1 安装Vagrant"></a>2.1 安装Vagrant</h3><p><a href="https://www.vagrantup.com/downloads%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88Vagrant%EF%BC%8C%E6%B3%A8%E6%84%8FVagrant%E6%B2%A1%E6%9C%89%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%EF%BC%8C%E6%89%80%E4%BB%A5%E5%AE%89%E8%A3%85%E5%90%8E%E4%B9%9F%E6%B2%A1%E6%9C%89%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E3%80%82">https://www.vagrantup.com/downloads下载最新版Vagrant，注意Vagrant没有图形界面，所以安装后也没有桌面快捷方式。</a></p><h3 id="2-2-安装Virtualbox"><a href="#2-2-安装Virtualbox" class="headerlink" title="2.2 安装Virtualbox"></a>2.2 安装Virtualbox</h3><p>VirtualBox 是一个免费开源的虚拟机，相对 VMware 来说更加小巧，个人比较喜欢。虽然 Vagrant 也支持 VMware，不过 VMware 是收费的，</p><p>对应的 Vagrant 版本也是收费的。下载地址<a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p><h3 id="2-3-下载box"><a href="#2-3-下载box" class="headerlink" title="2.3 下载box"></a>2.3 下载box</h3><p>可以在 <a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a> 这里下载更多不同系统甚至是已经配置好环境直接可以用的box，虽然可以直接在Vagrant直接使用网址，</p><p>由Vagrant自动下载安装，但是考虑到网络情况，还是建议自行先下载好。</p><p>centos 7.2网盘地址：链接：<a href="https://pan.baidu.com/s/1q4Kg6m6COk698e6Q7_Bk4w">https://pan.baidu.com/s/1q4Kg6m6COk698e6Q7_Bk4w</a> 提取码：5emc</p><h3 id="3-Vagrant入门"><a href="#3-Vagrant入门" class="headerlink" title="3.Vagrant入门"></a>3.Vagrant入门</h3><p>1.查看镜像</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220520193419762.png"> </p><p>2.删除镜像</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ vagrant box remove centos<span class="token class-name">Removing</span> box <span class="token char">'centos'</span> <span class="token punctuation">(</span>v0<span class="token punctuation">)</span> <span class="token keyword">with</span> <span class="token namespace">provider</span> 'virtualbox'<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.添加镜像</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ vagrant box add centos <span class="token punctuation">.</span>/vagrant<span class="token operator">-</span>centos<span class="token operator">-</span><span class="token number">7.2</span><span class="token punctuation">.</span>box<span class="token operator">==</span><span class="token operator">></span> box<span class="token operator">:</span> <span class="token class-name">Box</span> file was not detected as <span class="token class-name"><span class="token namespace">metadata<span class="token punctuation">.</span></span> Adding</span> it directly<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">==</span><span class="token operator">></span> box<span class="token operator">:</span> <span class="token class-name">Adding</span> box <span class="token char">'centos'</span> <span class="token punctuation">(</span>v0<span class="token punctuation">)</span> <span class="token keyword">for</span> provider<span class="token operator">:</span>    box<span class="token operator">:</span> <span class="token class-name">Unpacking</span> necessary files from<span class="token operator">:</span> file<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token class-name">F</span><span class="token operator">:</span><span class="token operator">/</span>java<span class="token operator">/</span>virtual<span class="token operator">/</span>lxs<span class="token operator">/</span>vagrant<span class="token operator">-</span>centos<span class="token operator">-</span><span class="token number">7.2</span><span class="token punctuation">.</span>box    box<span class="token operator">:</span><span class="token operator">==</span><span class="token operator">></span> box<span class="token operator">:</span> <span class="token class-name">Successfully</span> added box <span class="token char">'centos'</span> <span class="token punctuation">(</span>v0<span class="token punctuation">)</span> <span class="token keyword">for</span> 'virtualbox'<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.初始化镜像</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ vagrant init centos<span class="token class-name">A</span> `<span class="token class-name">Vagrantfile</span>` has been placed in <span class="token keyword">this</span> <span class="token class-name"><span class="token namespace">directory<span class="token punctuation">.</span></span> You</span> are nowready <span class="token keyword">to</span> `vagrant up` your first virtual environment<span class="token operator">!</span> <span class="token class-name">Please</span> readthe comments in the <span class="token class-name">Vagrantfile</span> as well as documentation on`vagrantup<span class="token punctuation">.</span>com` <span class="token keyword">for</span> more information on using <span class="token class-name">Vagrant</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> mode<span class="token operator">:</span> ruby <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span># vi<span class="token operator">:</span> set ft<span class="token operator">=</span>ruby <span class="token operator">:</span># <span class="token class-name">Vagrantfile</span> API<span class="token operator">/</span>syntax <span class="token class-name"><span class="token namespace">version<span class="token punctuation">.</span></span> Don</span>'t touch unless you know what you're doing<span class="token operator">!</span>VAGRANTFILE_API_VERSION <span class="token operator">=</span> <span class="token string">"2"</span><span class="token class-name">Vagrant</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>VAGRANTFILE_API_VERSION<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>  <span class="token punctuation">(</span><span class="token number">1.</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>each <span class="token keyword">do</span> <span class="token operator">|</span>i<span class="token operator">|</span>    config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>define vm_name <span class="token operator">=</span> <span class="token string">"lxy#&#123;i&#125;"</span>  <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>        config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provider <span class="token string">"virtualbox"</span> <span class="token keyword">do</span> <span class="token operator">|</span>v<span class="token operator">|</span>            v<span class="token punctuation">.</span>customize <span class="token punctuation">[</span><span class="token string">"modifyvm"</span><span class="token punctuation">,</span> <span class="token operator">:</span>id<span class="token punctuation">,</span> <span class="token string">"--name"</span><span class="token punctuation">,</span> vm_name<span class="token punctuation">]</span>    v<span class="token punctuation">.</span>customize <span class="token punctuation">[</span><span class="token string">"modifyvm"</span><span class="token punctuation">,</span> <span class="token operator">:</span>id<span class="token punctuation">,</span> <span class="token string">"--memory"</span><span class="token punctuation">,</span> <span class="token string">"8192"</span><span class="token punctuation">]</span>            v<span class="token punctuation">.</span>customize <span class="token punctuation">[</span><span class="token string">"modifyvm"</span><span class="token punctuation">,</span> <span class="token operator">:</span>id<span class="token punctuation">,</span> <span class="token string">"--cpus"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">]</span>        end        config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token string">"centos"</span>        config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>hostname <span class="token operator">=</span>vm_name        config<span class="token punctuation">.</span>ssh<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"root"</span>        config<span class="token punctuation">.</span>ssh<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">"vagrant"</span>#config<span class="token punctuation">.</span>ssh<span class="token punctuation">.</span>shell <span class="token operator">=</span> <span class="token string">"powershell"</span>#config<span class="token punctuation">.</span>ssh<span class="token punctuation">.</span>shell <span class="token operator">=</span> <span class="token string">"bash -l"</span>        config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token operator">:</span>private_network<span class="token punctuation">,</span> ip<span class="token operator">:</span> <span class="token string">"192.168.56.13#&#123;i&#125;"</span>config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provision <span class="token operator">:</span>shell<span class="token punctuation">,</span> <span class="token operator">:</span>path <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"bootstrap.sh"</span># config<span class="token punctuation">.</span>disksize<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token char">'50GB'</span>    end  endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里config.disksize.size指定虚拟磁盘大小，默认10GB，若需要指定需要安装如下插件才能使用命令：</p><pre class="line-numbers language-none"><code class="language-none">$ vagrant plugin install vagrant-disksize #需要vagrant-disksize插件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本文件bootstrap.sh</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env bash# <span class="token class-name">The</span> output of all these installation steps is <span class="token class-name"><span class="token namespace">noisy<span class="token punctuation">.</span></span> With</span> <span class="token keyword">this</span> utility# the progress report is nice and concise<span class="token punctuation">.</span>echo <span class="token string">"Update /etc/hosts"</span>cat <span class="token operator">></span> <span class="token operator">/</span>etc<span class="token operator">/</span>hosts <span class="token operator">&lt;&lt;</span>EOF<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>       localhost<span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.131</span> lxy1EOFecho <span class="token string">"Disable iptables"</span>setenforce <span class="token number">0</span> <span class="token operator">></span><span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span> <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> iptables <span class="token operator">-</span><span class="token class-name">F</span>### <span class="token class-name">Set</span> env ###echo <span class="token string">"export LC_ALL=en_US.UTF-8"</span>  <span class="token operator">>></span>  <span class="token operator">/</span>etc<span class="token operator">/</span>profilecp <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>zoneinfo<span class="token operator">/</span><span class="token class-name">Asia</span><span class="token operator">/</span><span class="token class-name">Shanghai</span> <span class="token operator">/</span>etc<span class="token operator">/</span>localtime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.启动虚拟机</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ vagrant up #启动全部虚拟机$ vagrant up lxy1 #启动名字为lxy1的虚拟机节点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.登录虚拟机</p><p>Xshell SSH连接即可</p><p>7.打包分发</p><pre class="line-numbers language-none"><code class="language-none">$ vagrant halt # 关机$ vagrant package --output lxy-dev.box #打包$ vagrant box add lxy-dev .&#x2F;lxy-dev.box #添加box<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>8.销毁虚拟机</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ vagrant destroy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.使用分发的box重建虚拟机</p><p>修改一下新box的vagrantfile配置文件既可以直接启动</p><p>然后执行vagrant up重建虚拟机</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机管理 </tag>
            
            <tag> Vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-服务调用</title>
      <link href="/2022/05/21/%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
      <url>/2022/05/21/%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220521134149.jpg"></p><h1 id="SpringCloud系列-服务调用"><a href="#SpringCloud系列-服务调用" class="headerlink" title="SpringCloud系列-服务调用"></a>SpringCloud系列-服务调用</h1><h2 id="1-RestTemplate简介"><a href="#1-RestTemplate简介" class="headerlink" title="1.RestTemplate简介"></a>1.RestTemplate简介</h2><p>​    1.RestTemplate是Spring Resources中一个访问第三方RESTful API接口的网络请求框架。</p><p>​    2.RestTemplate是用来消费REST服务的，所以RestTemplate的主要方法都与REST的HTTP协议的一些方法紧密相连，</p><p>例如HEAD、GET、POST、PUT、DELETE、OPTIONS等方法，这些方法在RestTemplate类对应的方法为headForHeaders()，</p><p>getForObject()、postForObject()、put()、delet()等。</p><p>​    3.举例说明，在订单服务通过RestTemplate的getForObject方法调用支付服务，并且将调用结果反序列化成Payment对象，代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">></span></span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:9001/payment/"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> serviceInstances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"cloud-payment-service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ServiceInstance</span> serviceInstance <span class="token operator">=</span> serviceInstances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    url <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/payment/"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token class-name">Payment</span> payment <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">Payment</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    RestTemplate支持常见的Http协议请求方法，例如post, get, delete等，所以用RestTemplate很容易构建RESTfule API。</p><p>上述案例结果返回json对象，使用jackson框架完成。</p><h2 id="2-LoadBalancer负载均衡"><a href="#2-LoadBalancer负载均衡" class="headerlink" title="2.LoadBalancer负载均衡"></a>2.LoadBalancer负载均衡</h2><p>​    常见的负载均衡有两种方式。一种独立进程单元，通过负载均衡策略，将请求转发到不同的执行单元上，例如Nginx。</p><p>另一种是将负载均衡逻辑以代码的形式封装到服务消费者的客户端上，服务消费者客户端维护了一份服务提供者的信息列表，</p><p>有了信息表，通过负载均衡策略将请求分摊给多个服务提供者，从而达到负载均衡的目的。</p><p>​    在Spring Cloud构件微服务系统中，LoadBalancer作为服务消费者的负载均衡器，有两种使用方式，一种是和RestTemplate相结合，</p><p>另一种是和Feign相结合，Feign已经默认集成了LoadBalancer</p><p>代码步骤:</p><p>1.配置文件</p><p>在application.yml配置文件中，使用spel指定端口，表示存在port参数使用port参数，不存在使用默认9001端口， 启动支付服务时，</p><p>可以通过指定-Dport=9000，指定支付服务使用不同端口启动.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>port<span class="token punctuation">:</span><span class="token number">9001</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.支付PaymentController</p><p>在提供支付服务时，把端口打印出来，方便查看测试效果。代码如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/payment"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">></span></span> <span class="token function">payment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"支付成功，服务端口="</span> <span class="token operator">+</span> serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.在产生RestTemplate实例时，使用@LoadBalanced注解，开启负载均衡。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@LoadBalanced</span><span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.订单OrderApplication</p><p>在OrderController中，使用**serviceId(默认是服务名)**调用支付服务，此时LoadBalancer负载均衡生效，从多个服务提供者节点轮询选择一个使用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">></span></span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://cloud-payment-service/payment/"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token class-name">Payment</span> payment <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">Payment</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.启动并测试</p><p>启动两个支付微服务工程，端口分别是9000和9001，因为application.yml配置文件中使用${port:9001}配置端口，其中9000节点启动配置如图3-1所示。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220520155018547.png"></p><p>另一个支付节点，不指定-Dport，使用默认9001端口启动，这时准备了2个支付微服务节点。Eureka注册效果如图3-2所示。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220520155049225.png"></p><p>访问订单接口，显示的端口是轮训产生的!</p><h2 id="3-LoadBlancerClient简介"><a href="#3-LoadBlancerClient简介" class="headerlink" title="3.LoadBlancerClient简介"></a>3.LoadBlancerClient简介</h2><p>负载均衡的核心类为LoadBalancerClient，LoadBalancerClient可以获取负载均衡的服务提供者实例信息。在OrderController增加演示代码如下。</p><h3 id="3-1-OrderController"><a href="#3-1-OrderController" class="headerlink" title="3.1 OrderController"></a>3.1 OrderController</h3><p>只添加这部分，重启订单服务，端口依旧是轮训显示！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">LoadBalancerClient</span> loadBalancerClient<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test-load-balancer"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//服务实例</span>    <span class="token class-name">ServiceInstance</span> instance <span class="token operator">=</span> loadBalancerClient<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"cloud-payment-service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Spirng-Cloud-OpenFeign"><a href="#4-Spirng-Cloud-OpenFeign" class="headerlink" title="4.Spirng Cloud OpenFeign"></a>4.Spirng Cloud OpenFeign</h2><p>​    Feign是一个声明式的HTTP客户端组件，它旨在是编写Http客户端变得更加容易。OpenFeign添加了对于Spring MVC注解的支持</p><p>同时集成了Spring Cloud LoadBalancer和Spring Cloud CircuitBreaker，在使用Feign时，提供负载均衡和熔断降级的功能。</p><h3 id="4-1-入门案例"><a href="#4-1-入门案例" class="headerlink" title="4.1 入门案例"></a>4.1 入门案例</h3><p>1.添加依赖</p><p>在订单(Order)工程工程的pom.xml中添加如下依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.开启Feign功能</p><p>使用@EnableFeignClients开启Feign功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.在订单项目创建Feign客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//框架会自动生成cglib的代理对象,通过这个代理对象调用上游微服务</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cloud-payment-service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentClient</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这里的地址和方法名以及参数要对应上游支付的接口一模一样</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Payment</span> <span class="token function">payment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.OrderController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">PaymentClient</span> paymentClient<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/feign/payment/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">></span></span> <span class="token function">getPaymentByFeign</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Payment</span> payment <span class="token operator">=</span> paymentClient<span class="token punctuation">.</span><span class="token function">payment</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-超时配置"><a href="#4-2-超时配置" class="headerlink" title="4.2 超时配置"></a>4.2 超时配置</h3><p>●connectTimeout防止由于服务器处理时间长而阻塞调用者。<br>●readTimeout 从连接建立时开始应用，在返回响应时间过长时触发</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">cloud-payment-servcie</span><span class="token punctuation">:</span>        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment">#防止由于服务器处理时间长而阻塞调用者</span>        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment">#从连接建立时开始应用，在返回响应时间过长时触发</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-集成熔断器"><a href="#4-3-集成熔断器" class="headerlink" title="4.3 集成熔断器"></a>4.3 集成熔断器</h3><p>Feign可以集成Spring Cloud CircuitBreaker熔断器，集成后，Feign将使用断路器包装的所有方法。具体用法如下。</p><p>1.添加依赖</p><p>在订单工程pom.xml中增加resilience4j熔断组件依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-circuitbreaker-resilience4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.开启Feign的熔断器支持</p><p>在application.yml中增加如下配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">circuitbreaker</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.Feign熔断降级类</p><p>Spring Cloud CircuitBreaker支持降级概念，当熔断器打开，或者调用是出现错误，则执行降级方法。@FeignClient的fallback属性指定降级的类</p><p>如果想要获得熔断降级的异常信息，比如打印异常日志，则可以使用fallbackFactory属性指定。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//框架会自动生成cglib的代理对象,通过这个代理对象调用下游微服务</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cloud-payment-service"</span><span class="token punctuation">,</span> fallbackFactory <span class="token operator">=</span> <span class="token class-name">PaymentClient<span class="token punctuation">.</span>FallBackFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentClient</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Payment</span> <span class="token function">payment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Component</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFallback</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentClient</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Payment</span> <span class="token function">payment</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"熔断降级⽅法返回"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> payment<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Component</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FallBackFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyFallback</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">MyFallback</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-请求和响应压缩"><a href="#4-4-请求和响应压缩" class="headerlink" title="4.4 请求和响应压缩"></a>4.4 请求和响应压缩</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">compression</span><span class="token punctuation">:</span>    <span class="token key atrule">request</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 请求压缩</span>      <span class="token key atrule">mime-types</span><span class="token punctuation">:</span> text/xml<span class="token punctuation">,</span>application/xml<span class="token punctuation">,</span>application/json <span class="token comment"># 压缩的类型</span>      <span class="token key atrule">min-request-size</span><span class="token punctuation">:</span> <span class="token number">2048</span> <span class="token comment"># 请求最小压缩的阈值</span>    <span class="token key atrule">response</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#响应压缩</span>      <span class="token key atrule">useGzipDecoder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#使用gzip解码器解码响应数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-Feign日志"><a href="#4-5-Feign日志" class="headerlink" title="4.5 Feign日志"></a>4.5 Feign日志</h3><p>可以配置打开Feign日志，显示Feign调用的详细信息，比如请求和响应的headers、body和metadata。</p><p>具体步骤如下:</p><p>1.设置日志级别</p><p>Feign Logging只响应debug级别，在application.yml中配置如下。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">com.lxy</span><span class="token punctuation">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.配置FeignLoggerLevel</p><p>在配置类中配置Logger.Level，告诉配置类Feign需要打印的内容，具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>●NONE，无日志记录（默认）。<br>●BASIC, 只记录请求方法和 URL 以及响应状态码和执行时间。<br>●HEADERS, 记录基本信息以及请求和响应标头。<br>●FULL, 记录请求和响应的标头、正文和元数据。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RestTemplate </tag>
            
            <tag> 服务调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-Alibaba-Sentinel</title>
      <link href="/2022/05/21/Sentinel%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E9%99%90%E6%B5%81/"/>
      <url>/2022/05/21/Sentinel%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E9%99%90%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220521134359.jpg" alt="微信图片_20220521134359"></p><h1 id="Spring-Cloud-Alibaba系列-Sentinel"><a href="#Spring-Cloud-Alibaba系列-Sentinel" class="headerlink" title="Spring Cloud Alibaba系列-Sentinel"></a>Spring Cloud Alibaba系列-Sentinel</h1><h2 id="1-Sentinel基本概念"><a href="#1-Sentinel基本概念" class="headerlink" title="1. Sentinel基本概念"></a>1. Sentinel基本概念</h2><p>​    Sentinel是阿里开源的项目，提供了流量控制、熔断降级、系统负载保护等多个维度来保障服务之间的稳定性。</p><p>​    官网：<a href="https://github.com/alibaba/Sentinel/wiki">https://github.com/alibaba/Sentinel/wiki</a></p><p>​    Sentinel作为保护我们微服务的中间件产品，它具有的主要功能，有如下几点。</p><ol><li>流量控制<br>流量控制在网络传输中是一个常用的概念，它用于调整网络包的发送数据。然而，从系统稳定性角度考虑，在处理请求的速度上，也有非常多的讲究。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状，如下图所示。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1628402643806-074978c0-d003-4608-9550-83e62dbbb6bb.png"> </p><p>Sentinel流量控制有以下几个角度。<br>    ●资源的调用关系，例如资源的调用链路，资源和资源之间的关系。</p><p>​    ●运行指标，例如 QPS、线程池、系统负载等。</p><p>​    ●控制的效果，例如直接限流、冷启动、排队等。<br>Sentinel 的设计理念是自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p><ol start="2"><li><p>熔断降级<br>除了流量控制以外，降低调用链路中的不稳定资源也是 Sentinel 的使命之一。由于调用关系的复杂性，如果调用链路中的某个资源出现了不稳定，最终会导致请求发生堆积。这个问题和 <a href="https://github.com/Netflix/Hystrix/wiki#what-problem-does-hystrix-solve">Hystrix</a> 里面描述的问题是一样的。<br>Sentinel 和 Hystrix 的原则是一致的: 当调用链路中某个资源出现不稳定，例如，表现为 timeout，异常比例升高的时候，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果。</p></li><li><p>熔断降级设计理念<br>在限制的手段上，Sentinel 和 Hystrix 采取了完全不一样的方法。Hystrix 默认通过<a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works#benefits-of-thread-pools">线程池</a>的方式，来对依赖(在我们的概念中对应资源)进行了隔离。这样做的好处是资源和资源之间做到了最彻底的隔离。缺点是除了增加了线程切换的成本，还需要预先给各个资源做线程池大小的分配。<br>Sentinel 对这个问题采取了两种手段。</p></li></ol><p>（1）通过并发线程数进行限制<br>和资源池隔离的方法不同，Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响，类似信号量隔离。这样不但没有线程切换的损耗，也不需要预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p><p>（2）通过响应时间对资源进行降级<br>除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p><ol start="4"><li>系统负载保护<br>Sentinel 同时对系统的维度提供保护。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。<br>针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</li></ol><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>1.下载</p><p><a href="https://github.com/alibaba/Sentinel/releases/download/1.8.1/sentinel-dashboard-1.8.1.jar">https://github.com/alibaba/Sentinel/releases/download/1.8.1/sentinel-dashboard-1.8.1.jar</a> 下载地址</p><p>2.启动</p><pre class="line-numbers language-none"><code class="language-none">java -jar sentinel-dashboard-1.8.1.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.访问</p><p><a href="http://localhost:8080，用户名密码都是sentinel">http://localhost:8080，用户名密码都是sentinel</a></p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><p>这里因为有管控台，可以可视化配置所以可以参考网上博客！</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud-Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sentinel </tag>
            
            <tag> 熔断限流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-Alibaba-Nacos配置管理</title>
      <link href="/2022/05/21/Nacos%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
      <url>/2022/05/21/Nacos%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220521134311.jpg"></p><h1 id="Spring-Cloud-Alibaba系列-Nacos统一配置管理"><a href="#Spring-Cloud-Alibaba系列-Nacos统一配置管理" class="headerlink" title="Spring Cloud Alibaba系列-Nacos统一配置管理"></a>Spring Cloud Alibaba系列-Nacos统一配置管理</h1><h2 id="1-Nacos配置中心简介"><a href="#1-Nacos配置中心简介" class="headerlink" title="1. Nacos配置中心简介"></a>1. Nacos配置中心简介</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>​    Nacos是Alibaba开源的中间件，Nacos架构中有2个模块，分别是Config Service和Naming Service。其中Config Service就是</p><p>Nacos用于实现配置中心的核心模块，他实现了对配置的CRUD，版本管理，灰度管理，监听管理，推送轨迹，聚合数据等功能。</p><h2 id="2-配置中心实战"><a href="#2-配置中心实战" class="headerlink" title="2. 配置中心实战"></a>2. 配置中心实战</h2><h3 id="2-1-基本配置"><a href="#2-1-基本配置" class="headerlink" title="2.1 基本配置"></a>2.1 基本配置</h3><p>nacos可以作为配置中心使用，在payment工程中如下步骤，启动nacos配置中心</p><p><strong>1.引入依赖</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--nacos config--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.配置文件</strong></p><p>注意：Sprnig Boot 2.4.X版本后需要手动添加spring-cloud-starter-bootstrap组件后，才能加载bootstrap.yml配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> payment<span class="token punctuation">-</span>service  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.nacos中的配置DataID</strong></p><p>访问nacos在配置列表中增加如下配置，如图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1628153259319-dec54ba9-c6ad-4811-ac95-b46d1f51701a.png"> </p><p>当使用Nacos Config后，Profile的配置就存储到Data ID下，即一个Profile对应一个Data ID</p><p>对应关系，如图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1628161453621-83df2fa5-a6fc-42b3-8272-bd248fcb1743.png"></p><p><strong>4.业务中读取配置属性</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/payment"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;config.info&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/config/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.测试</strong></p><p>访问地址<a href="http://localhost:9001/payment/config/info%EF%BC%8C%E6%98%BE%E7%A4%BAconfig">http://localhost:9001/payment/config/info，显示config</a> info public default group</p><p>当修改配置值，会结果已经改变，<strong>Nacos自带自动刷新功能。</strong></p><h3 id="2-2-配置隔离"><a href="#2-2-配置隔离" class="headerlink" title="2.2 配置隔离"></a>2.2 配置隔离</h3><p>所谓配置隔离就是基于</p><p>命名空间 和 Group 创建 配置文件</p><p>在隔离情况下，相同DataID的配置文件是互不影响的 </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1628215427786-df302b18-d68c-4a7b-81f7-9d48bbd2ed8e.png" alt="image.png"></p><h3 id="2-3-配置拆分"><a href="#2-3-配置拆分" class="headerlink" title="2.3 配置拆分"></a>2.3 配置拆分</h3><p>基于DTY原则，提取公共部分配置，比如都要注册到nacos服务中心的配置则可以一起提取出来到common.yaml</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud-Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
            <tag> 配置管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-Alibaba-Nacos服务注册</title>
      <link href="/2022/05/21/Nacos%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0/"/>
      <url>/2022/05/21/Nacos%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220521134223.jpg" alt="微信图片_20220521134223"></p><h1 id="Spring-Cloud-Alibaba系列-Nacos服务的注册和发现"><a href="#Spring-Cloud-Alibaba系列-Nacos服务的注册和发现" class="headerlink" title="Spring Cloud Alibaba系列-Nacos服务的注册和发现"></a>Spring Cloud Alibaba系列-Nacos服务的注册和发现</h1><h2 id="1-Spring-Cloud-Alibaba简介"><a href="#1-Spring-Cloud-Alibaba简介" class="headerlink" title="1. Spring Cloud Alibaba简介"></a>1. Spring Cloud Alibaba简介</h2><h3 id="1-1-主要组件"><a href="#1-1-主要组件" class="headerlink" title="1.1 主要组件"></a>1.1 主要组件</h3><p>●Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>●Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>●Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p><p>●RocketMQ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p><p>●Dubbo：Apache Dubbo™ 是一款高性能 Java RPC 框架。</p><p>●Alibaba Cloud OSS: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何</p><p>应用、任何时间、任何地点存储和访问任意类型的数据。</p><p>●Alibaba Cloud SchedulerX: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p><p>●Alibaba Cloud SMS: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p><h3 id="1-2-版本说明"><a href="#1-2-版本说明" class="headerlink" title="1.2 版本说明"></a>1.2 版本说明</h3><p>这里可以网上查阅资料</p><table><thead><tr><th>Spring Cloud Alibaba Version</th><th>Sentinel</th><th>Nacos</th><th>RocketMQ</th><th>Dubbo</th><th>Seata</th></tr></thead><tbody><tr><td>2.2.6.RELEASE</td><td>1.8.1</td><td>1.4.2</td><td>4.4.0</td><td>2.7.8</td><td>1.3.0</td></tr><tr><td>2021.1 or 2.2.5.RELEASE or 2.1.4.RELEASE or 2.0.4.RELEASE</td><td>1.8.0</td><td>1.4.1</td><td>4.4.0</td><td>2.7.8</td><td>1.3.0</td></tr><tr><td>2.2.3.RELEASE or 2.1.3.RELEASE or 2.0.3.RELEASE</td><td>1.8.0</td><td>1.3.3</td><td>4.4.0</td><td>2.7.8</td><td>1.3.0</td></tr><tr><td>2.2.1.RELEASE or 2.1.2.RELEASE or 2.0.2.RELEASE</td><td>1.7.1</td><td>1.2.1</td><td>4.4.0</td><td>2.7.6</td><td>1.2.0</td></tr><tr><td>2.2.0.RELEASE</td><td>1.7.1</td><td>1.1.4</td><td>4.4.0</td><td>2.7.4.1</td><td>1.0.0</td></tr><tr><td>2.1.1.RELEASE or 2.0.1.RELEASE or 1.5.1.RELEASE</td><td>1.7.0</td><td>1.1.4</td><td>4.4.0</td><td>2.7.3</td><td>0.9.0</td></tr><tr><td>2.1.0.RELEASE or 2.0.0.RELEASE or 1.5.0.RELEASE</td><td>1.6.3</td><td>1.1.1</td><td>4.4.0</td><td>2.7.3</td><td>0.7.1</td></tr></tbody></table><table><thead><tr><th>Spring Cloud Version</th><th>Spring Cloud Alibaba Version</th><th>Spring Boot Version</th></tr></thead><tbody><tr><td>Spring Cloud 2020.0.0</td><td>2021.1</td><td>2.4.2</td></tr><tr><td>Spring Cloud Hoxton.SR9</td><td>2.2.6.RELEASE</td><td>2.3.2.RELEASE</td></tr><tr><td>Spring Cloud Greenwich.SR6</td><td>2.1.4.RELEASE</td><td>2.1.13.RELEASE</td></tr><tr><td>Spring Cloud Hoxton.SR3</td><td>2.2.1.RELEASE</td><td>2.2.5.RELEASE</td></tr><tr><td>Spring Cloud Hoxton.RELEASE</td><td>2.2.0.RELEASE</td><td>2.2.X.RELEASE</td></tr><tr><td>Spring Cloud Greenwich</td><td>2.1.2.RELEASE</td><td>2.1.X.RELEASE</td></tr><tr><td>Spring Cloud Finchley</td><td>2.0.4.RELEASE(停止维护，建议升级)</td><td>2.0.X.RELEASE</td></tr><tr><td>Spring Cloud Edgware</td><td>1.5.1.RELEASE(停止维护，建议升级)</td><td>1.5.X.RELEASE</td></tr></tbody></table><h2 id="2-Nacos-简介"><a href="#2-Nacos-简介" class="headerlink" title="2. Nacos 简介"></a>2. Nacos 简介</h2><p>Nacos是阿里巴巴开源的一款支持服务注册与发现，配置管理以及微服务管理的组件。用来取代以前常用的注册中心（ZooKeeper , Eureka等），以及配置中心（Spring Cloud Config等）。Nacos是集成了注册中心和配置中心的功能。</p><h3 id="2-1-Nacos的优势"><a href="#2-1-Nacos的优势" class="headerlink" title="2.1 Nacos的优势"></a>2.1 Nacos的优势</h3><p>1.Nacos 作为微服务核心的服务注册与发现中心，对比Eureka。<br>    ●eureka 2.0闭源码了。</p><p>​    ●从官网来看nacos 的注册的实例数是大于eureka的。</p><p>​    ●因为nacos使用的raft协议,nacos集群的一致性要远大于eureka集群。</p><p>2.Nacos作为微服务配置中心对比Spring Cloud Config</p><p>​    ●Spring Cloud Config 大部分场景结合git 使用, 动态变更还需要依赖Spring Cloud Bus 消息总线来通过所有的客户端变化。</p><p>​    ●Spring Cloud Config 不提供可视化界面。</p><p>​    ●Nacos Config 使用长连接更新配置, 一旦配置有变动后，通知Provider的过程非常的迅速, 从速度上秒杀Spring Cloud Config。</p><h3 id="2-2-Nacos-Server安装启动"><a href="#2-2-Nacos-Server安装启动" class="headerlink" title="2.2 Nacos Server安装启动"></a>2.2 Nacos Server安装启动</h3><p>在使用Nacos之前需要先下载Nacos Server，下载地址：<a href="https://github.com/alibaba/nacos/releases/download/1.4.1/nacos-server-1.4.1.zip">https://github.com/alibaba/nacos/releases/download/1.4.1/nacos-server-1.4.1.zip</a></p><p>Nacos Server有两种运行模式：</p><p>​    ●standanlone：单节点模式</p><p>​    ●cluster：集群模式</p><p><strong>1.standalone模式</strong></p><p>此模式一般用于demo和测试。命令如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">bin<span class="token operator">/</span>startup<span class="token punctuation">.</span>sh <span class="token operator">-</span>m standalone # linuxbin<span class="token operator">/</span>startup<span class="token punctuation">.</span>cmd <span class="token operator">-</span>m standalone # windows<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者修改配置文件startup.cmd，代码如下，默认为cluster，然后直接运行startup.cmd</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">set MODE="standalone"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后访问<a href="http://localhost:8848/nacos%EF%BC%8C%E8%BF%9B%E5%85%A5nacos%E7%AE%A1%E6%8E%A7%E5%8F%B0%EF%BC%8C%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E4%B8%BAnacos/nacos%EF%BC%8C%E5%A6%82%E5%9B%BE%E6%89%80%E7%A4%BA">http://localhost:8848/nacos，进入nacos管控台，默认账号密码为nacos/nacos，如图所示</a>:</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220520181852190.png"></p><p><strong>2.cluster模式</strong></p><p>cluster 模式需要依赖 MySQL，然后改两个配置文件：<br>    ●conf/cluster.conf</p><p>​    ●conf/application.properties</p><p>cluster模式配置如下。<br>（1）cluster.conf，填入要运行 Nacos Server 机器的 ip（部署在linux上使用linux虚拟ip地址，同一网段）</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">192.168.142.134192.168.142.133<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（2）修改NACOS_PATH/conf/application.properties，加入 MySQL 配置</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">db.num&#x3D;1db.url.0&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;nacos_config?characterEncoding&#x3D;utf8&amp;connectTimeout&#x3D;1000&amp;socketTimeout&#x3D;3000&amp;autoReconnect&#x3D;truedb.user&#x3D;rootdb.password&#x3D;root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后创建一个名为nacos_config的 database，将NACOS_PATH/conf/nacos-mysql.sql中的表结构导入刚才创建的库中。</p><h3 id="2-3-Nacos-Server数据库"><a href="#2-3-Nacos-Server数据库" class="headerlink" title="2.3 Nacos Server数据库"></a>2.3 Nacos Server数据库</h3><p>随便创建一个配置文件，重启nacos，配置文件还在，说明不是内存存储的。</p><p>这时候我们打开NACOS_PATH/data，会发现里边有个derby-data目录，我们的配置数据现在就存储在这个库中。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">Derby 是 Java 编写的数据库，属于 Apache 的一个开源项目<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Nacos Server 的数据源是用 Derby 还是 MySQL 完全是由其运行模式决定的：</p><p>​    ●standalone 的话仅会使用 Derby，即使在 application.properties 里边配置 MySQL 也照样无视；</p><p>​    ●cluster 模式会自动使用 MySQL，这时候如果没有 MySQL 的配置，是会报错的。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">注意：不支持 MySQL 8.0 版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Nacos实战"><a href="#3-Nacos实战" class="headerlink" title="3. Nacos实战"></a>3. Nacos实战</h2><p>使用订单和支付服务，在订单微服务中调用支付微服务，演示Nacos作为注册中心的用法，如图所示<br>    ●Nacos Server：Nacos注册中心（Eureka）。</p><p>​    ●支付服务：服务提供者。</p><p>​    ●订单服务：服务消费者。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220520182701780.png"> </p><h3 id="3-1-父工程"><a href="#3-1-父工程" class="headerlink" title="3.1 父工程"></a>3.1 父工程</h3><p>1.父工程的pom文件 使用版本仲裁控制子module的版本</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud_alibaba_demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>payment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    &lt;modules>            &lt;module>payment&lt;/module>            &lt;module>order&lt;/module>        &lt;/modules>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alibaba-cloud.version</span><span class="token punctuation">></span></span>2021.0.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alibaba-cloud.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springcloud.version</span><span class="token punctuation">></span></span>2021.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springcloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;springcloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;alibaba-cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        &lt;dependency>            &lt;groupId>org.springframework.cloud&lt;/groupId>            &lt;artifactId>spring-cloud-starter-bootstrap&lt;/artifactId>        &lt;/dependency>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-支付微服务-服务提供"><a href="#3-2-支付微服务-服务提供" class="headerlink" title="3.2 支付微服务-服务提供"></a>3.2 支付微服务-服务提供</h3><h4 id="3-2-1-pom"><a href="#3-2-1-pom" class="headerlink" title="3.2.1. pom"></a>3.2.1. pom</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud_alibaba_demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lxy.demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>payment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--nacos服务注册配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-application-yml"><a href="#3-2-2-application-yml" class="headerlink" title="3.2.2. application.yml"></a>3.2.2. application.yml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>port<span class="token punctuation">:</span><span class="token number">9001</span><span class="token punctuation">&#125;</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> payment<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#配置Nacos地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-3-PaymentApplication"><a href="#3-2-3-PaymentApplication" class="headerlink" title="3.2.3. PaymentApplication"></a>3.2.3. PaymentApplication</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentApplication</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-4-PaymentController"><a href="#3-2-4-PaymentController" class="headerlink" title="3.2.4. PaymentController"></a>3.2.4. PaymentController</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/payment"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">payment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"订单号 = "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"，支付成功，server.port"</span> <span class="token operator">+</span> serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-5-启动支付服务"><a href="#3-2-5-启动支付服务" class="headerlink" title="3.2.5. 启动支付服务"></a>3.2.5. 启动支付服务</h4><p>启动两个服务实例端口号分别为9001和9002，注册到nacos中</p><p>配置文件port: ${port:9001}表示，没有port参数，使用9001端口，有port参数则使用port参数指定的端口，使用9002端口的支付服务</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627981268386-bc796776-2ba3-4655-a161-0bdff5ced0fe.png"></p><p>访问nacos查看服务列表</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627981646825-6f482520-4533-4794-b62a-7dd36d24825e.png"></p><h3 id="3-3-订单微服务-服务消费者"><a href="#3-3-订单微服务-服务消费者" class="headerlink" title="3.3 订单微服务-服务消费者"></a>3.3 订单微服务-服务消费者</h3><h4 id="3-3-1-pom-xml"><a href="#3-3-1-pom-xml" class="headerlink" title="3.3.1 pom.xml"></a>3.3.1 pom.xml</h4><p>注意：必须依赖spring-cloud-starter-loadbalancer组件，spring-cloud-starter-alibaba-nacos-discovery，不在默认继承ribbon，而是使用Spring Cloud Common总的loadbalancer组件，实现负载均衡</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud_alibaba_demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lxy.demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--nacos服务配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--open feign--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--负载均衡--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-application-yml"><a href="#3-3-2-application-yml" class="headerlink" title="3.3.2 application.yml"></a>3.3.2 application.yml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">84</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> order<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span>8848/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3-启动器"><a href="#3-3-3-启动器" class="headerlink" title="3.3.3 启动器"></a>3.3.3 启动器</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-4-ApplicationContextConfig"><a href="#3-3-4-ApplicationContextConfig" class="headerlink" title="3.3.4 ApplicationContextConfig"></a>3.3.4 ApplicationContextConfig</h4><p>​    Nacos底层使用Spring Cloud Common中的Spring Cloud LoadBalancer组件实现负载均衡，注入RestTemplate，</p><p>使用注解@LoadBalanced开启负载均衡功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-5-FeignClient"><a href="#3-3-5-FeignClient" class="headerlink" title="3.3.5 FeignClient"></a>3.3.5 FeignClient</h4><p><strong>PaymentService</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"payment-service"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">PaymentFallbackService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">payment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>PaymentFallbackService</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentFallbackService</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">payment</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"feign调用，异常降级方法"</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-6-OrderController"><a href="#3-3-6-OrderController" class="headerlink" title="3.3.6 OrderController"></a>3.3.6 OrderController</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SERVICE_URL <span class="token operator">=</span> <span class="token string">"http://payment-service"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/lb/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">consumer_ribbon</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://payment-service"</span> <span class="token operator">+</span> <span class="token string">"/payment/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//OpenFeign</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">PaymentService</span> paymentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/feign/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">consumer_feign</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> paymentService<span class="token punctuation">.</span><span class="token function">payment</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动测试！！！！</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud-Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
            <tag> 服务注册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-Config</title>
      <link href="/2022/05/21/Spring%20Cloud%20Config%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
      <url>/2022/05/21/Spring%20Cloud%20Config%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220521134427.jpg" alt="微信图片_20220521134427"></p><h1 id="SpringCloud系列-Spring-Cloud-Config配置管理"><a href="#SpringCloud系列-Spring-Cloud-Config配置管理" class="headerlink" title="SpringCloud系列-Spring Cloud Config配置管理"></a>SpringCloud系列-Spring Cloud Config配置管理</h1><h2 id="1-Spring-Cloud-Config-简介"><a href="#1-Spring-Cloud-Config-简介" class="headerlink" title="1. Spring Cloud Config 简介"></a>1. Spring Cloud Config 简介</h2><p>​    在Spring Boot项目中，默认会提供一个application.properties或者application.yml文件，我们可以把一些全局性的配置或者需要动态维护的配置写入改文件，</p><p>比如数据库连接，功能开关，限流阈值，服务地址等。为了解决不同环境下服务连接配置等信息的差异，Spring Boot还提供了基于spring.profiles.active=</p><p>{profile}的机制来实现不同的环境的切换。</p><p>​    随着单体架构向微服务架构的演进，各个应用自己独立维护本地配置文件的方式开始显露出它的不足之处。主要有下面几点：</p><p>●配置的动态更新：在实际应用会有动态更新位置的需求，比如修改服务连接地址、限流配置等。在传统模式下，需要手动修改配置文件并且重启应用才能生效，</p><p>这种方式效率太低，重启也会导致服务暂时不可用。</p><p>●配置多节点维护：在微服务架构中某些核心服务为了保证高性能会部署上百个节点，如果在每个节点中都维护一个配置文件，一旦配置文件中的某个属性需要修</p><p>改，可想而知，工作量是巨大的。</p><p>●不同部署环境下配置的管理：前面提到通过profile机制来管理不同环境下的配置，这种方式对于日常维护来说也比较繁琐。</p><p>​    统一配置管理就是弥补上述不足的方法，简单说，最近本的方法是把各个应用系统中的某些配置放在一个第三方中间件上进行统一维护。然后，对于统一配置中</p><p>心上的数据的变更需要推送到相应的服务节点实现动态跟新，所以微服务架构中，配置中心也是一个核心组件，而Spring Cloud Config就是一个配置中心组件，并</p><p>且可以Git，SVN，本地文件等作为存储。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627549372867-e0b5b7bc-82b3-4299-829c-2cef414970d6.png"> </p><h2 id="2-Spring-Cloud-Config-实践"><a href="#2-Spring-Cloud-Config-实践" class="headerlink" title="2. Spring Cloud Config 实践"></a>2. Spring Cloud Config 实践</h2><p>​    实现最简单的配置中心，创建06_cloud_config微服务工程，作为配置中心的Config Server，同时使用git作为配置存储方式，</p><p>改造之前支付微服务工程，作为客户端从Config Server获取配置。具体实现如下。</p><h3 id="2-1-配置中心服务端"><a href="#2-1-配置中心服务端" class="headerlink" title="2.1 配置中心服务端"></a>2.1 配置中心服务端</h3><p>1.添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.开启注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableConfigServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9006</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/lxy197120/my<span class="token punctuation">-</span>config.git          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span> config          <span class="token key atrule">default-label</span><span class="token punctuation">:</span> master<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>9004/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Config Server默认存储配置的方式是git，如果git仓库是公开仓库，username和password属性可以省略不配置，具体配置属性解释如下。</p><p>●spring.cloud.config.server.git.uri：配置文件所在的git仓库</p><p>●spring.cloud.config.server.git.search-paths：配置文件所在目录</p><p>●spring.cloud.config.server.git.default-label：配置文件分支’’</p><p>4配置仓库</p><p>在git仓库<a href="https://gitee.com/lxy197120/my-config.git%E4%B8%AD%EF%BC%8C%E5%88%9B%E5%BB%BAconfig%E7%9B%AE%E5%BD%95%EF%BC%8C%E5%9C%A8config%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%88%9B%E5%BB%BAapp-dev.yml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%8C%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B%E3%80%82">https://gitee.com/lxy197120/my-config.git中，创建config目录，在config目录中创建app-dev.yml配置文件，代码如下。</a></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">key1</span><span class="token punctuation">:</span> v1<span class="token key atrule">key2</span><span class="token punctuation">:</span> v2<span class="token key atrule">key3</span><span class="token punctuation">:</span> v3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5启动并测试</p><p>Spring Cloud Config 有它的一套访问规则，我们通过这套规则在浏览器上直接访问就可以。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">/<span class="token punctuation">&#123;</span>application<span class="token punctuation">&#125;</span><span class="token punctuation">-</span><span class="token punctuation">&#123;</span>profile<span class="token punctuation">&#125;</span>.yml/<span class="token punctuation">&#123;</span>label<span class="token punctuation">&#125;</span>/<span class="token punctuation">&#123;</span>application<span class="token punctuation">&#125;</span><span class="token punctuation">-</span><span class="token punctuation">&#123;</span>profile<span class="token punctuation">&#125;</span>.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-配置中心客户端"><a href="#2-2-配置中心客户端" class="headerlink" title="2.2 配置中心客户端"></a>2.2 配置中心客户端</h3><p>改造支付微服务工程，作为配置中心客户端，从上述Config Server中获取application.yml的配置</p><p>1.pom依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9006</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> default      <span class="token key atrule">label</span><span class="token punctuation">:</span> master  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">import</span><span class="token punctuation">:</span> optional<span class="token punctuation">:</span>configserver<span class="token punctuation">:</span>http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9006</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>●spring.config.import=optional:configserver:<a href="http://localhost:9006/">http://localhost:9006</a>，指定Spring Boot项目从Config Server导入配置</p><p>●spring.cloud.config.url：Config Server地址，默认localhost:8888</p><p>●spring.cloud.config.profile：为git配置文件的后缀</p><p>●spring.cloud.config.label：为访问git的分支。</p><p>案例中的配置服务名为cloud-payment-service.那么我们访问的就是配置的git仓库下config目录下的application.yml（所有服务重用）、cloud-payment-</p><p>service.yml、cloud-payment-service-default.yml，这三个配置文件的内容，在这三个文件具有相同配置的情况下，后面的配置会覆盖前面的配置，git仓库中配</p><p>置文件结构如图所示。</p><h3 id="2-3-本地存储配置数据"><a href="#2-3-本地存储配置数据" class="headerlink" title="2.3 本地存储配置数据"></a>2.3 本地存储配置数据</h3><p>在Config Server配置文件application.yml中，配置如下。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> native  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">native</span><span class="token punctuation">:</span>          <span class="token key atrule">search-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/config_repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>●spring.profiles.active=native：表示使用本地配置存储</p><p>●spring.cloud.config.server.native.searchLocations：指定配置文件所在路径，可以使用相对路径比如classpath</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627615754570-545775b1-62a8-4563-9ca9-9664424d8c11.png"> </p><p>分别启动Erueka，Config Server和支付服务，访问<a href="http://localhost:9000/payment/123%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%86%85%E5%AE%B9%E4%B8%BA%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82">http://localhost:9000/payment/123，控制台打印配置项内容为本地配置文件的内容。</a></p><h2 id="3-配置自动刷新"><a href="#3-配置自动刷新" class="headerlink" title="3. 配置自动刷新"></a>3. 配置自动刷新</h2><p>Spring Cloud Config在项目启动时自动加载配置内容这一机制，导致了他的一个缺陷，配置不能自动刷新</p><p>我们可以使用Spring Cloud Bus和Spring Boot Actuator实现自动刷新，实现原理如图所示:</p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627613759712-d9c2af59-6739-4639-8f00-24118fee6af3.png" style="zoom:80%;" /> <h3 id="3-1-启动RabbitMQ"><a href="#3-1-启动RabbitMQ" class="headerlink" title="3.1 启动RabbitMQ"></a>3.1 启动RabbitMQ</h3><p>​    Spring Cloud Bus需要发送消息给消息队列，支持Kafka和RabbitMQ，这里我们使用RabbitMQ，启动我们之前准备好的RabbitMQ服务器（192.168.142.134）</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220520180452696.png"> </p><h3 id="3-2-配置中心服务端"><a href="#3-2-配置中心服务端" class="headerlink" title="3.2 配置中心服务端"></a>3.2 配置中心服务端</h3><p>1.添加依赖</p><p>添加spring-cloud-starter-bus-amqp和spring-boot-starter-actuator依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置文件</p><p>在application.yml中配置连接RabbitMQ，同时配置暴露/actuator/bus-refresh端点，代码如下。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.142.134    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> bus<span class="token punctuation">-</span>refresh  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    <span class="token key atrule">bus-refresh</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-配置中心客户端"><a href="#3-3-配置中心客户端" class="headerlink" title="3.3 配置中心客户端"></a>3.3 配置中心客户端</h3><p>1.添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置文件</p><p>​    在application.yml中配置连接RabbitMQ</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.142.134    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.PaymentController</p><p>使用@RefreshScope注解刷新更改的配置，代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/payment"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;key1&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> key1<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;key2&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> key2<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;key3&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> key3<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">></span></span> <span class="token function">payment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key1=&#123;&#125;, key2=&#123;&#125;, key3=&#123;&#125;"</span><span class="token punctuation">,</span> key1<span class="token punctuation">,</span> key2<span class="token punctuation">,</span> key3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"支付成功，服务端口="</span> <span class="token operator">+</span> serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-启动并测试"><a href="#3-4-启动并测试" class="headerlink" title="3.4 启动并测试"></a>3.4 启动并测试</h3><p>​    启动Eureka、Config Server、支付微服务(Config Client），修改git仓库中的配置项内容后，使用Postman发送POST</p><p>请求给/actuator/busrefresh（注意是是POST类型），再次访问支付服务，发现配置项已经自动刷新，如图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627614862137-cad527c1-9ec0-4da8-a135-8b2cdebe42d4.png"> </p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置管理 </tag>
            
            <tag> Config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMq</title>
      <link href="/2022/05/21/rabbitmq/"/>
      <url>/2022/05/21/rabbitmq/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220521134315.jpg" alt="微信图片_20220521134315"></p><h1 id="RabbitMq"><a href="#RabbitMq" class="headerlink" title="RabbitMq"></a>RabbitMq</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p><a href="https://www.aliyundrive.com/s/TbUseS9p2NQ">https://www.aliyundrive.com/s/TbUseS9p2NQ</a></p><h2 id="2-学习"><a href="#2-学习" class="headerlink" title="2.学习"></a>2.学习</h2><p><a href="https://www.aliyundrive.com/s/SYykYVhoyne">https://www.aliyundrive.com/s/SYykYVhoyne</a></p>]]></content>
      
      
      <categories>
          
          <category> 消息中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-Gateway</title>
      <link href="/2022/05/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3Spring%20Cloud%20Gateway/"/>
      <url>/2022/05/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3Spring%20Cloud%20Gateway/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220521134208.jpg" alt="微信图片_20220521134208"></p><h1 id="SpringCloud系列-微服务网关SpringCloud-Gateway"><a href="#SpringCloud系列-微服务网关SpringCloud-Gateway" class="headerlink" title="SpringCloud系列-微服务网关SpringCloud Gateway"></a>SpringCloud系列-微服务网关SpringCloud Gateway</h1><h2 id="1-微服务网关简介"><a href="#1-微服务网关简介" class="headerlink" title="1. 微服务网关简介"></a>1. 微服务网关简介</h2><p>​    微服务网关能够实现，路由、负载均衡等多种功能。类似Nginx，反向代理的功能。在微服务架构中，后端服务往往不直接开放给调用端，</p><p>而是通过一个API网关根据请求的URL，路由到相应的服务。当添加API网关后，在第三方调用端和服务提供方之间就创建了一面墙，</p><p>在API网关中进行权限控制，同时API网关将请求以负载均衡的方式发送给后端服务</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627378943430-afa9c253-892e-4b7c-953c-4e0851025f87.png"> </p><h2 id="2-SpringCloud-Gateway"><a href="#2-SpringCloud-Gateway" class="headerlink" title="2. SpringCloud Gateway"></a>2. SpringCloud Gateway</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>​    SpringCloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，</p><p>它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><p>​    SpringCloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0</p><p>以上最新高性能版本进行集成，仍然还是使用的Zuul 2.0之前的非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于</p><p>WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</p><p>​    Spring Cloud Gateway 的目标，不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p><p>​    <strong>注意：Spring Cloud Gateway 底层使用了高性能的通信框架Netty</strong>。</p><h3 id="2-2-特征"><a href="#2-2-特征" class="headerlink" title="2.2 特征"></a>2.2 特征</h3><p>SpringCloud官方，对SpringCloud Gateway 特征介绍如下：</p><p>●基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0</p><p>●集成 Spring Cloud DiscoveryClient</p><p>●Predicates 和 Filters 作用于特定路由，易于编写的 Predicates 和 Filters</p><p>●具备一些网关的高级功能：动态路由、限流、路径重写</p><p>●集成Spring Cloud DiscoveryClient</p><p>●集成熔断器CircuitBreaker</p><p>从以上的特征来说，和Zuul的特征差别不大。SpringCloud Gateway和Zuul主要的区别，还是在底层的通信框架上: <strong>Netty</strong></p><h3 id="2-3-pom-xml"><a href="#2-3-pom-xml" class="headerlink" title="2.3 pom.xml"></a>2.3 pom.xml</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--注册到Eureka中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-路由配置方式"><a href="#2-4-路由配置方式" class="headerlink" title="2.4 路由配置方式"></a>2.4 路由配置方式</h3><h4 id="2-4-1-基础路由配置方式"><a href="#2-4-1-基础路由配置方式" class="headerlink" title="2.4.1 基础路由配置方式"></a>2.4.1 基础路由配置方式</h4><p>如果请求的目标地址，是单个的URI资源路径，配置文件实例如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> service1          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.csdn.net          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/csdn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段配置的意思是当访问地址<a href="http://localhost:8080/csdn/1.jsp%E6%97%B6%EF%BC%8C%E4%BC%9A%E8%B7%AF%E7%94%B1%E5%88%B0%E4%B8%8A%E6%B8%B8%E5%9C%B0%E5%9D%80https://blog.csdn.net/1.jsp%E3%80%82">http://localhost:8080/csdn/1.jsp时，会路由到上游地址https://blog.csdn.net/1.jsp。</a></p><h4 id="2-4-2-基于代码的路由配置方式"><a href="#2-4-2-基于代码的路由配置方式" class="headerlink" title="2.4.2 基于代码的路由配置方式"></a>2.4.2 基于代码的路由配置方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatewayApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"path_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/csdn"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"https://blog.csdn.net"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-3-和注册中心相结合的路由配置方式"><a href="#2-4-3-和注册中心相结合的路由配置方式" class="headerlink" title="2.4.3 和注册中心相结合的路由配置方式"></a>2.4.3 和注册中心相结合的路由配置方式</h4><p>在uri的schema协议部分为自定义的**lb:**类型，表示从微服务注册中心（如Eureka）订阅服务，并且通过负载均衡进行服务的路由。代码如下。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9005</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> service2          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/<span class="token important">**</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>9004/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-路由匹配规则"><a href="#2-5-路由匹配规则" class="headerlink" title="2.5 路由匹配规则"></a>2.5 路由匹配规则</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Route（路由）</td><td>路由是网关的基本单元，由ID、URI、一组Predicate、一组Filter组成，根据Predicate进行匹配转发。</td></tr><tr><td>Predicate（谓语、断言）</td><td>路由转发的判断条件，目前SpringCloud Gateway支持多种方式，常见如：Path、Query、Method、Header等，写法必须遵循 key=vlue的形式</td></tr><tr><td>Filter（过滤器）</td><td>过滤器是路由转发请求时所经过的过滤逻辑，可用于修改请求、响应内容</td></tr></tbody></table><h4 id="2-5-1-常见Predicate"><a href="#2-5-1-常见Predicate" class="headerlink" title="2.5.1 常见Predicate"></a>2.5.1 常见Predicate</h4><table><thead><tr><th>规则</th><th>实例</th><th>说明</th></tr></thead><tbody><tr><td>Path</td><td>- Path=/gate/,/rule/</td><td>当请求的路径为gate、rule开头的时，转发到<a href="http://localhost:9001服务器上">http://localhost:9001服务器上</a></td></tr><tr><td>Before</td><td>- Before=2017-01-20T17:42:47.789-07:00[America/Denver]</td><td>在某个时间之前的请求才会被转发到 <a href="http://localhost:9001服务器上">http://localhost:9001服务器上</a></td></tr><tr><td>After</td><td>- After=2017-01-20T17:42:47.789-07:00[America/Denver]</td><td>在某个时间之后的请求才会被转发</td></tr><tr><td>Between</td><td>- Between=2017-01-20T17:42:47.789-07:00[America/Denver],2017-01-21T17:42:47.789-07:00[America/Denver]</td><td>在某个时间段之间的才会被转发</td></tr><tr><td>Cookie</td><td>- Cookie=chocolate, ch.p</td><td>名为chocolate的表单或者满足正则ch.p的表单才会被匹配到进行请求转发</td></tr><tr><td>Header</td><td>- Header=X-Request-Id, \d+</td><td>携带参数X-Request-Id或者满足\d+的请求头才会匹配</td></tr><tr><td>Host</td><td>- Host=<a href="http://www.hd123.com/">www.hd123.com</a></td><td>当主机名为<a href="http://www.hd123.com的时候直接转发到http//localhost:9001%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A">www.hd123.com的时候直接转发到http://localhost:9001服务器上</a></td></tr><tr><td>Method</td><td>- Method=GET</td><td>只有GET方法才会匹配转发请求，还可以限定POST、PUT等请求方式</td></tr></tbody></table><h4 id="2-5-2-过滤器规则"><a href="#2-5-2-过滤器规则" class="headerlink" title="2.5.2 过滤器规则"></a>2.5.2 过滤器规则</h4><p> 常见过滤器</p><table><thead><tr><th>过滤规则</th><th>实例</th><th>说明</th></tr></thead><tbody><tr><td>PrefixPath</td><td>- PrefixPath=/app</td><td>在请求路径前加上app</td></tr><tr><td>RewritePath</td><td>- RewritePath=/test, /app/test</td><td>访问localhost:9022/test,请求会转发到localhost:8001/app/test</td></tr><tr><td>SetPath</td><td>SetPath=/app/{path}</td><td>通过模板设置路径，转发的规则时会在路径前增加app，{path}表示原请求路径</td></tr><tr><td>RedirectTo</td><td></td><td>重定向</td></tr><tr><td>RemoveRequestHeader</td><td></td><td>去掉某个请求头信息</td></tr></tbody></table><p>参考下别人博客0.0</p><p><a href="https://blog.csdn.net/qq_37032116/article/details/123855621">https://blog.csdn.net/qq_37032116/article/details/123855621</a></p><h3 id="2-6-自定义过滤器"><a href="#2-6-自定义过滤器" class="headerlink" title="2.6 自定义过滤器"></a>2.6 自定义过滤器</h3><h4 id="2-6-1-过滤器执行次序"><a href="#2-6-1-过滤器执行次序" class="headerlink" title="2.6.1 过滤器执行次序"></a>2.6.1 过滤器执行次序</h4><p>​    Spring-Cloud-Gateway 基于过滤器实现，同 zuul 类似，有pre和post两种方式的 filter,分别处理前置逻辑和后置逻辑。</p><p>客户端的请求先经过pre类型的 filter，然后将请求转发到具体的业务服务，收到业务服务的响应之后，再经过post类型的 filter 处理，</p><p>最后返回响应到客户端。</p><p>过滤器执行流程如下，order 越大，优先级越低，如图所示:过滤器执行次序</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627455283386-df874f10-1b72-4155-b442-751a2ee23bae.png"> </p><p>过滤器分为全局过滤器和局部过滤器。</p><p>●全局过滤器：对所有路由生效。</p><p>●局部过滤器：对指定的路由生效。</p><h4 id="2-6-2-全局过滤器"><a href="#2-6-2-全局过滤器" class="headerlink" title="2.6.2 全局过滤器"></a>2.6.2 全局过滤器</h4><p>实现 GlobalFilter 和 Ordered，重写相关方法，加入到spring容器管理即可，无需配置，全局过滤器对所有的路由都有效。代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfig</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">GlobalFilter</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">GlobalFilter</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">GlobalFilter</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">GlobalFilter</span> <span class="token function">myAuthFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyAuthFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Slf4j</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span>    <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"AFilter前置逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span>            <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"AFilter后置逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//   值越小，优先级越高</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Slf4j</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span>    <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"BFilter前置逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span>            <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"BFilter后置逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Slf4j</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span>    <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"CFilter前置逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span>            <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"CFilter后置逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">300</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Slf4j</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyAuthFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyAuthFilter权限过滤器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> token <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>UNAUTHORIZED<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">400</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了4个全局过滤器，顺序为A&gt;B&gt;C&gt;MyAuthFilter，其中全局过滤器MyAuthFilter中判断令牌是否存在，</p><p>如果令牌不存在，则返回401状态码，表示没有权限访问.</p><h4 id="2-6-3-局部过滤器"><a href="#2-6-3-局部过滤器" class="headerlink" title="2.6.3 局部过滤器"></a>2.6.3 局部过滤器</h4><p>定义局部过滤器步骤如下。<br>（1）需要实现GatewayFilter, Ordered，实现相关的方法<br>（2）包装GatewayFilter，产生GatewayFilterFactory<br>（3）GatewayFilterFactory加入到过滤器工厂，并且注册到spring容器中。<br>（4）在配置文件中进行配置，如果不配置则不启用此过滤器规则。</p><p>接下来定义局部过滤器，对于请求头user-id校验，如果不存在user-id请求头，直接返回状态码406。代码如下。</p><p>注意局部过滤器类名必须为<strong>xxxGatewayFilterFactory</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserIdCheckGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Object</span> config<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserIdCheckGateWayFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Slf4j</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserIdCheckGateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span>    <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> url <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pathWithinApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求URL:"</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"method:"</span> <span class="token operator">+</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取header</span>            <span class="token class-name">String</span> userId <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"user-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"userId："</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*****头部验证不通过，请在头部输入  user-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//终止请求，直接回应</span>                exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//   值越小，优先级越高</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> HIGHEST_PRECEDENCE<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-统一跨域请求"><a href="#2-7-统一跨域请求" class="headerlink" title="2.7 统一跨域请求"></a>2.7 统一跨域请求</h3><p>​    跨域请求就是指：当前发起请求的域与该请求指向的资源所在的域不一样。这里的域指的是这样的一个概念：</p><p>若协议 + 域名 + 端口号均相同，那么就是同域,域不一致，由于安全问题，这种请求会受到浏览器的同源策略限制。</p><h4 id="2-7-1-解决跨域请求"><a href="#2-7-1-解决跨域请求" class="headerlink" title="2.7.1 解决跨域请求"></a>2.7.1 解决跨域请求</h4><p>​    1. @CrossOrigin 这个注解放行所有跨域请求,不能针对特殊跨域请求不放行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/payment"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">></span></span> <span class="token function">payment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"支付成功，服务端口="</span> <span class="token operator">+</span> serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> gatway网关是，可以通过网关统一配置跨域访问，代码如下:</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span>        <span class="token key atrule">cors-configurations</span><span class="token punctuation">:</span>          <span class="token key atrule">'[/**]'</span><span class="token punctuation">:</span>            <span class="token key atrule">max-age</span><span class="token punctuation">:</span> <span class="token number">3600</span> <span class="token comment">#options请求存活时间</span>            <span class="token key atrule">allowed-origin-patterns</span><span class="token punctuation">:</span> <span class="token string">"*"</span> <span class="token comment"># spring boot2.4配置</span><span class="token comment">#            allowed-origins: "*"</span>            <span class="token key atrule">allowed-headers</span><span class="token punctuation">:</span> <span class="token string">"*"</span>            <span class="token key atrule">allow-credentials</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>            <span class="token key atrule">allowed-methods</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> GET              <span class="token punctuation">-</span> POST              <span class="token punctuation">-</span> DELETE              <span class="token punctuation">-</span> PUT              <span class="token punctuation">-</span> OPTION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务网关 </tag>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-Resilience4j</title>
      <link href="/2022/05/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99Resilience4j/"/>
      <url>/2022/05/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99Resilience4j/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220521134201.jpg"></p><h1 id="SpringCloud系列-微服务容错Resilience4j"><a href="#SpringCloud系列-微服务容错Resilience4j" class="headerlink" title="SpringCloud系列-微服务容错Resilience4j"></a>SpringCloud系列-微服务容错Resilience4j</h1><h2 id="1-微服务容错简介"><a href="#1-微服务容错简介" class="headerlink" title="1.微服务容错简介"></a>1.微服务容错简介</h2><p>在高并发访问下，比如天猫双11，流量持续不断的涌入，服务之间的相互调用频率突然增加，引发系统负载过高，</p><p>这时系统所依赖的服务的稳定性对系统的影响非常大，而且还有很多不确定因素引起雪崩，如网络连接中断，服务宕机等。</p><p>一般微服务容错组件提供了限流、隔离、降级、熔断等手段，可以有效保护我们的微服务系统。</p><h2 id="1-1-隔离"><a href="#1-1-隔离" class="headerlink" title="1.1 隔离"></a>1.1 隔离</h2><p>​    微服务系统A调用B，而B调用C，这时如果C出现故障，则此时调用B的大量线程资源阻塞，慢慢的B的线程数量持续增加</p><p>直到CPU耗尽到100%，整体微服务不可用，这时就需要对不可用的服务进行隔离。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627271887085-b2b948db-bcbd-4964-ac9c-39f04c898f04.png"></p><p>1.线程池隔离</p><p>​    线程池隔离就是通过Java的线程池进行隔离，B服务调用C服务给予固定的线程数量比如12个线程，如果此时C服务宕机了就算大量的请求过来，</p><p>调用C服务的接口只会占用12个线程不会占用其他工作线程资源，因此B服务就不会出现级联故障。</p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1629197323674-59849375-d012-46f4-b0b9-253b6abc1732.png" style="zoom: 80%;" /> <p>2.信号量隔离</p><p>​    隔离信号量隔离是使用Semaphore来实现的，当拿不到信号量的时候直接拒接因此不会出现超时占用其他工作线程的情况。代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取信号量  </span>semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//do something here  </span><span class="token comment">//释放信号量  </span>semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.线程池隔离和信号量隔离的区别</p><table><thead><tr><th>类别</th><th>线程池隔离</th><th>信号量隔离</th></tr></thead><tbody><tr><td>线程</td><td>与调用线程不同，使用的是线程池创建的线程</td><td>与调用线程相同</td></tr><tr><td>开销</td><td>排队，切换，调度等开销</td><td>无线程切换性能更高</td></tr><tr><td>是否支持异步</td><td>支持</td><td>不支持</td></tr><tr><td>是否支持超时</td><td>支持超时</td><td>支持超时</td></tr><tr><td>并发支持</td><td>支持通过线程池大小控制</td><td>支持通过最大信号量控制</td></tr></tbody></table><h2 id="1-2-熔断"><a href="#1-2-熔断" class="headerlink" title="1.2 熔断"></a>1.2 熔断</h2><p>​    当上游的服务(支付)因为某种原因突然变得不可用或响应过慢，下游服务(订单)为了保证自己整体服务的可用性，不再继续调用目标服务，</p><p>直接返回，快速释放资源。如果目标服务情况好转则恢复调用。熔断器模型。</p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627271741696-b466627d-7b66-4fa2-9366-a77b4b90c3f2.png" style="zoom:67%;" /> <p>熔断器模型的状态机有3个状态：</p><p>●Closed：关闭状态（断路器关闭），所有请求都正常访问。</p><p>●Open：打开状态（断路器打开），所有请求都会被降级。熔断器会对请求情况计数，</p><p>当一定时间内失败请求百分比达到阈值，则触发熔断，断路器会完全打开。</p><p>●Half Open：半开状态，不是永久的，断路器打开后会进入休眠时间。随后断路器会自动</p><p>进入半开状态。此时会释放部分请求通过，若这些请求都是健康的，则会关闭断路器，否则</p><p>继续保持打开，再次进行休眠计时。</p><h2 id="1-3-降级"><a href="#1-3-降级" class="headerlink" title="1.3 降级"></a>1.3 降级</h2><p>​    降级是指当自身服务压力增大时，系统将某些不重要的业务或接口的功能降低，可以只提供部分功能，也可以完全停止所有不重要的功能。</p><p>比如，下线非核心服务以保证核心服务的稳定、降低实时性、降低数据一致性，降级的思想是丢车保帅。</p><p>​    举个例子，比如，目前很多人想要下订单，但是我的服务器除了处理下订单业务之外，还有一些其他的服务在运行，</p><p>比如，搜索、定时任务、支付、商品详情、日志等等服务。然而这些不重要的服务占用了JVM的不少内存和CPU资源，为了应对很多人要下订单</p><p>的需求，设计了一个动态开关，把这些不重要的服务直接在最外层拒绝掉。这样就有跟多的资源来处理下订单服务（下订单速度更快了）</p><h2 id="1-4-限流"><a href="#1-4-限流" class="headerlink" title="1.4 限流"></a>1.4 限流</h2><p>​    限流，就是限制最大流量。系统能提供的最大并发有限，同时来的请求又太多，就需要限流，比如商城秒杀业务，</p><p>瞬时大量请求涌入，服务器服务不过来，就只好排队限流了，就跟去景点排队买票和去银行办理业务排队等号道理相同。</p><p>下面介绍下四种常见的限流算法：</p><h3 id="1-4-1-漏桶算法"><a href="#1-4-1-漏桶算法" class="headerlink" title="1.4.1 漏桶算法"></a>1.4.1 漏桶算法</h3><p>​    漏桶算法的思路，一个固定容量的漏桶，按照常量固定速率流出水滴。如果桶是空的，则不需流出水滴。可以以任意速率流入水滴到漏桶。</p><p>如果流入水滴超出了桶的容量，则流入的水滴溢出了（被丢弃），而漏桶容量是不变的。</p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627272534991-d952f0bb-880c-4a85-8e19-b46c8e391f2f.png" style="zoom: 50%;" />  <h3 id="1-4-2-令牌桶算法"><a href="#1-4-2-令牌桶算法" class="headerlink" title="1.4.2 令牌桶算法"></a>1.4.2 令牌桶算法</h3><p>​    假设限制2r/s，则按照500毫秒的固定速率往桶中添加令牌。桶中最多存放b个令牌，当桶满时，新添加的令牌被丢弃或拒绝。</p><p>当一个n个字节大小的数据包到达，将从桶中删除n个令牌，接着数据包被发送到网络上。如果桶中的令牌不足n个，则不会删除令牌，</p><p>且该数据包将被限流（要么丢弃，要么缓冲区等待）</p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627272656526-d2bc48c6-efb2-4173-9f59-617f4e0244a6.png" style="zoom: 80%;" /> <h3 id="1-4-3-固定时间窗口算法"><a href="#1-4-3-固定时间窗口算法" class="headerlink" title="1.4.3 固定时间窗口算法"></a>1.4.3 固定时间窗口算法</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627272781128-91d209f1-40ec-4f82-9711-972b932806d0.png"> </p><p>由于计数器算法存在时间临界点缺陷，因此在时间临界点左右的极短时间段内容易遭到攻击。</p><p>12:00:59-12:01:00时间段内突然并发100次请求，而紧接着跨入下一个计数周期，计数器清零，在12:01:00-12:01:01内又有100次请求。</p><p>那么也就是说在时间临界点左右可能同时有2倍的阀值进行请求，从而造成后台处理请求过载的情况，导致系统运营能力不足，甚至导致系统崩溃。</p><h3 id="1-4-4-滑动时间窗口算法"><a href="#1-4-4-滑动时间窗口算法" class="headerlink" title="1.4.4 滑动时间窗口算法"></a>1.4.4 滑动时间窗口算法</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1627272903225-c83c589a-9717-4d9a-a005-a033e58a7010.png"></p><h2 id="2-Resilience4j"><a href="#2-Resilience4j" class="headerlink" title="2.Resilience4j"></a>2.Resilience4j</h2><p>这里给出一些常用的配置，对于并发的请求可以采用JMeter进行压力测试，其余接口测试可以采用ApiPost </p><h3 id="2-1-yaml"><a href="#2-1-yaml" class="headerlink" title="2.1 yaml"></a>2.1 yaml</h3><pre class="line-numbers language-2.yaml" data-language="2.yaml"><code class="language-2.yaml">resilience4j:  circuitbreaker:    configs:      default:        failureRateThreshold: 30 #失败请求百分⽐，超过这个⽐例，CircuitBreaker变为 OPEN状态        slidingWindowSize: 10 #滑动窗⼝的⼤⼩，配置COUNT_BASED,表示10个请求，配置 TIME_BASED表示10秒        minimumNumberOfCalls: 5 #最⼩请求个数，只有在滑动窗⼝内，请求个数达到这个个数，才会触发CircuitBreader对于断路器的判断        slidingWindowType: TIME_BASED #滑动窗⼝的类型        permittedNumberOfCallsInHalfOpenState: 3 #当CircuitBreaker处于HALF_OPEN状态的时候，允许通过的请求个数        automaticTransitionFromOpenToHalfOpenEnabled: true #，默认false，设置true，用一个线程监听熔断机，表示⾃动从 OPEN变成HALF_OPEN，即使没有请求过来        waitDurationInOpenState: 2s #从OPEN到HALF_OPEN状态需要等待的时间        recordExceptions: #异常名单          - java.lang.Exception    instances:      backendA:        baseConfig: default #熔断器backendA，继承默认配置default      backendB:        failureRateThreshold: 50        slowCallDurationThreshold: 2s #慢调⽤时间阈值，⾼于这个阈值的呼叫视为慢调⽤，并增加慢调⽤⽐例。        slowCallRateThreshold: 30 #慢调⽤百分⽐阈值，断路器把调⽤时间⼤于 slowCallDurationThreshold，视为慢调⽤，当慢调⽤⽐例⼤于阈值，断路器打开，并进⾏服务降级        slidingWindowSize: 10        slidingWindowType: TIME_BASED        minimumNumberOfCalls: 2 #最⼩请求个数，只有在滑动窗⼝内，请求个数达到这个个数，才会触发CircuitBreader对于断路器的判断        permittedNumberOfCallsInHalfOpenState: 2        waitDurationInOpenState: 2s #从OPEN到HALF_OPEN状态需要等待的时间  #信号量隔离  bulkhead:    configs:      default:        maxConcurrentCalls: 5 # 隔离允许并发线程执行的最大数量        maxWaitDuration: 20ms # 当达到并发调用数量时，新的线程的阻塞时间    instances:      backendA:        baseConfig: default      backendB:        maxWaitDuration: 10ms        maxConcurrentCalls: 20  #线程池隔离  thread-pool-bulkhead:    configs:      default:        maxThreadPoolSize: 4 # 最大线程池大小        coreThreadPoolSize: 2 # 核心线程池大小        queueCapacity: 2 # 队列容量    instances:      backendA:        baseConfig: default      backendB:        maxThreadPoolSize: 1        coreThreadPoolSize: 1        queueCapacity: 1  #限流  ratelimiter:    configs:      default:        timeoutDuration: 5 # 线程等待权限的默认等待时间        limitRefreshPeriod: 1s # 限流器每隔1s刷新一次，将允许处理的最大请求重置为2        limitForPeriod: 2 #在一个刷新周期内，允许执行的最大请求数    instances:      backendA:        baseConfig: default      backendB:        timeoutDuration: 5        limitRefreshPeriod: 1s        limitForPeriod: 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-pom-xml"><a href="#2-2-pom-xml" class="headerlink" title="2.2 pom.xml"></a>2.2 pom.xml</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--断路器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-circuitbreaker-resilience4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--隔离--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.resilience4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>resilience4j-bulkhead<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--限流：R4的限流模块RateLimter基于滑动窗口，和令牌桶限流算法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.resilience4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>resilience4j-ratelimiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Resilience4j </tag>
            
            <tag> 微服务容错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-Eureka</title>
      <link href="/2022/05/21/%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0Eureka/"/>
      <url>/2022/05/21/%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0Eureka/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220521134136.jpg"></p><h1 id="SpringCloud系列-服务的注册和发现Eureka"><a href="#SpringCloud系列-服务的注册和发现Eureka" class="headerlink" title="SpringCloud系列-服务的注册和发现Eureka"></a>SpringCloud系列-服务的注册和发现Eureka</h1><p>​    “Eureka”来源于古希腊词汇，意为“发现了”。在软件领域，Eureka是Netflix在线影片公司开源的一个服务注册和发现组件，</p><p>和其他的Netflix公司的服务组件（例如负载均衡，熔断器，网关等）一起，被Spring Cloud社区整合为Spring Cloud Netflix模块。</p><h2 id="1-Eureka简介"><a href="#1-Eureka简介" class="headerlink" title="1.Eureka简介"></a>1.Eureka简介</h2><p>​    和Zookeeper类似，Eureka是一个用于服务注册和发现的组件，最开始主要应用与亚马逊公司的云计算服务平台AWS，Eureka</p><p>分为Eureka Server和Eureka Client，Eureka Server为Eureka服务注册中心，Eureka Client为Eureka客户端。</p><p>​    Eureka主要涉及到三大角色：服务提供者、服务消费者、注册中心。</p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/4HKYUXNLN0C_PTTP6~R%~_H.png" style="zoom:50%;" /> <h2 id="2-pom依赖"><a href="#2-pom依赖" class="headerlink" title="2.pom依赖"></a>2.pom依赖</h2><p>1.注册中心依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.服务提供者(上游微服务) 和 消费者(下游微服务) 依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-注解"><a href="#3-注解" class="headerlink" title="3.注解"></a>3.注解</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//声明在Eureka服务端，开启Eureka注册服务器</span><span class="token annotation punctuation">@EnableEurekaServer</span> <span class="token comment">//声明当前应用是Eureka server</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//声明在Eureka客户端，用于开启Client服务</span><span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment">//只针对Eureka</span><span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment">//兼容性强，适合其他注册发现中心的客户端</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-applicaton-yml"><a href="#4-applicaton-yml" class="headerlink" title="4.applicaton.yml"></a>4.applicaton.yml</h2><p>大致意思如注释:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9004</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment"># eureka 服务地址，如果是集群的话；需要指定其它集群eureka地址</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>9004/eureka    <span class="token comment"># 表示不注册自己</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># 不拉取服务</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token comment"># 每个服务心跳的间隔时间</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">30</span>    <span class="token comment"># eureka多久没有接收到服务心跳销毁</span>    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">90</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 关闭⾃我保护模式（缺省为打开）生产环境可以使用，开发需要关闭</span>    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># 扫描失效服务的间隔时间（缺省为60*1000ms）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Eureka的自我保护"><a href="#5-Eureka的自我保护" class="headerlink" title="5.Eureka的自我保护"></a>5.Eureka的自我保护</h2><p>​    当有一个新的Eureka Server出现时，他尝试从相邻的Peer节点获取所有服务实例注册信息。如果从相邻的Peer节点获取信息时出现了故障，</p><p>Eureka Server会尝试其他的Peer节点。如果Eureka Server能够成功获取所有的服务实例信息。则根据配置信息设置服务续约的阈值。在任何时间，</p><p>如果Eureka Server接收到的服务续约低于为该值配置的百分比（默认为15分钟内低于85%），<strong>则服务器开启自我保护模式，即不再剔除注册列表的信息</strong>。</p><p>这样做的好处在于，如果Eureka Server自身的网络问题而导致Eureka Client无法续约，<strong>Eureka Client的注册列表信息不再被删除</strong>，也就是<strong>Eureka Client还可以</strong></p><p><strong>被其他服务消费</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/34%7DO0@K@I0X82$U%%7DD2$OY7.png"></p><h2 id="6-Eureka-Server集群"><a href="#6-Eureka-Server集群" class="headerlink" title="6.Eureka Server集群"></a>6.Eureka Server集群</h2><p>​    Eureka Server不但需要接收服务的心跳，用来检测服务是否可用，而且每个服务会定期会去Eureka申请服务列表的信息，</p><p>当服务实例很多时，Eureka中的负载就会很大，所以必须实现Eureka服务注册中心的高可用，一般的做法是将Eureka Server集群化。</p><h3 id="6-1-配置文件"><a href="#6-1-配置文件" class="headerlink" title="6.1 配置文件"></a>6.1 配置文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token comment">#activate on profile :激活在概要文件</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> peer1<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span>    <span class="token number">9003</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer1  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>9004/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer3<span class="token punctuation">:</span>9005/eureka<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token comment">#activate on profile :激活在概要文件</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> peer2<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span>    <span class="token number">9004</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer2  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>9003/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer3<span class="token punctuation">:</span>9005/eureka<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token comment">#activate on profile :激活在概要文件</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> peer3<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span>    <span class="token number">9005</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer3  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>9003/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>9004/eureka<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：<br>●在yaml单一配置文件中，可用连续三个连字号（—）区分多个文件。<br>●Spring Boot2.4.x使用spring.config.activate.on-profile代替原来的spring.profiles</p><h3 id="6-2-域名解析"><a href="#6-2-域名解析" class="headerlink" title="6.2 域名解析"></a>6.2 域名解析</h3><p>使用peer1，peer2，peer3 代替 127.0.0.1</p><p>所以需要修改本地的host文件，c:\Windows\System32\drivers\etc\hosts，代码如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> peer1<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> peer2<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> peer3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者使用工具switchhost <a href="https://blog.csdn.net/libusi001/article/details/108516673">https://blog.csdn.net/libusi001/article/details/108516673</a></p><h3 id="6-3-启动并测试"><a href="#6-3-启动并测试" class="headerlink" title="6.3 启动并测试"></a>6.3 启动并测试</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span>jar <span class="token number">04_</span>cloud_eureka<span class="token operator">-</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>jar <span class="token operator">--</span>spring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">=</span>peer1java <span class="token operator">-</span>jar <span class="token number">04_</span>cloud_eureka<span class="token operator">-</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>jar <span class="token operator">--</span>spring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">=</span>peer2java <span class="token operator">-</span>jar <span class="token number">04_</span>cloud_eureka<span class="token operator">-</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>jar <span class="token operator">--</span>spring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">=</span>peer3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-4-启动支付服务，支付微服务仅向9004的Eureka-Server注册，代码如下。"><a href="#6-4-启动支付服务，支付微服务仅向9004的Eureka-Server注册，代码如下。" class="headerlink" title="6.4 启动支付服务，支付微服务仅向9004的Eureka Server注册，代码如下。"></a>6.4 启动支付服务，支付微服务仅向9004的Eureka Server注册，代码如下。</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>9003/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>9004/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer3<span class="token punctuation">:</span>9005/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务注册 </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿某团外卖</title>
      <link href="/2022/05/13/reggie%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/13/reggie%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/CC16F2E1A69AD6D3A889465A9AFFC2C7.jpg" alt="CC16F2E1A69AD6D3A889465A9AFFC2C7"></p><h1 id="reggie外卖项目总结"><a href="#reggie外卖项目总结" class="headerlink" title="reggie外卖项目总结"></a>reggie外卖项目总结</h1><p>项目地址:<a href="https://gitee.com/lxy197120/reggie_take_out">https://gitee.com/lxy197120/reggie_take_out</a></p><h2 id="一-项目介绍"><a href="#一-项目介绍" class="headerlink" title="一.项目介绍"></a>一.项目介绍</h2><p>本项目是专门为餐饮企业(餐厅、饭店)定制的一款软件产品，包括系统管理后台和移动端应用两部分。</p><p>其中系统管理后台主要提供给餐饮企业内部员工使用，可以对餐厅的菜品、套餐、订单等进行管理维护。</p><p>移动端应用主要提供给消费者使用，可以在线浏览菜品、添加购物车、下单等。</p><h3 id="1-技术架构"><a href="#1-技术架构" class="headerlink" title="1.技术架构"></a>1.技术架构</h3><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220505223133040.png" style="zoom: 80%;" /><p>项目基于前后端分离，前端使用H5页面以及vue框架构建页面</p><p>网关使用的是Nginx代理服务器作为地址的转发，以及集群的Tomcat配置分发。</p><p>应用层主要就是使用Spring一系列技术，数据层使用的MyBatisPlus的ORM框架与数据库交互。</p><p>代码管理工具使用的是Git以及Maven仓库。</p><h3 id="2-功能描述"><a href="#2-功能描述" class="headerlink" title="2.功能描述"></a>2.功能描述</h3><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220505223539439.png" style="zoom: 80%;" /><p>这里我移动端前台的微信登录、历史订单没有具体完成</p><h3 id="3-项目角色"><a href="#3-项目角色" class="headerlink" title="3.项目角色"></a>3.项目角色</h3><ul><li>后台系统管理员：拥有最高权限。</li><li>后台普通员：对菜品的管理。</li><li>C端用户：登录应用，点餐，下单。</li></ul><h3 id="4-项目成果图"><a href="#4-项目成果图" class="headerlink" title="4.项目成果图"></a>4.项目成果图</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220505224129662.png"></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220505224600379.png"></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220505225354846.png" alt=" "> </p><h2 id="二-项目初始化"><a href="#二-项目初始化" class="headerlink" title="二.项目初始化"></a>二.项目初始化</h2><h3 id="1-数据库设计"><a href="#1-数据库设计" class="headerlink" title="1.数据库设计"></a>1.数据库设计</h3><p>本项目使用11张表，具体如下：</p><table><thead><tr><th>序号</th><th>表名</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>employee</td><td>员工表</td></tr><tr><td>2</td><td>category</td><td>餐品与套餐分类表</td></tr><tr><td>3</td><td>dish</td><td>菜品表</td></tr><tr><td>4</td><td>setmeal</td><td>套餐表</td></tr><tr><td>5</td><td>setmeal_dish</td><td>套餐菜品关系表</td></tr><tr><td>6</td><td>dish_flavor</td><td>菜品口味关系表</td></tr><tr><td>7</td><td>user</td><td>用户表</td></tr><tr><td>8</td><td>address_book</td><td>地址簿表</td></tr><tr><td>9</td><td>shoping_cart</td><td>购物车表</td></tr><tr><td>10</td><td>orders</td><td>订单表</td></tr><tr><td>11</td><td>order_detail</td><td>订单明细表</td></tr></tbody></table><p>sql文件已经上传至项目部署地址master分支下resources目录下的<img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220505225957963.png"></p><p>前提：</p><p>1.静态资源路径是指系统可以直接访问的路径，且路径下的所有文件均可被用户通过浏览器直接读取。<br>2.在Springboot中默认的静态资源路径有：<br>    classpath:/META-INF/resources/，<br>    classpath:/resources/，<br>    classpath:/static/，<br>    classpath:/public/<br>3.在Springboot中可以直接在配置文件中覆盖默认的静态资源路径的配置信息，但是这个时候其他几个默认的静态资源文件的路径就会失效。</p><p>因此这时可以写一个静态资源配置类去访问：具体参考(<a href="https://www.cnblogs.com/zzw-blog/p/10655386.html">https://www.cnblogs.com/zzw-blog/p/10655386.html</a>)</p><p>这里我选择编程式配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxy<span class="token punctuation">.</span>reggie<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     *  设置静态资源映射     *  注意：这样配置默认的static映射资源目录失效     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始进行静态资源映射..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/backend/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/backend/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/front/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/front/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-后台业务问题"><a href="#三-后台业务问题" class="headerlink" title="三.后台业务问题"></a>三.后台业务问题</h2><h3 id="1-如何保存employeeId"><a href="#1-如何保存employeeId" class="headerlink" title="1.如何保存employeeId"></a>1.如何保存employeeId</h3><p>1.首先在登录成功之后我们会将用户id存在session中，但是这样假设我们中途业务需要频繁使用到登录用户的id值，</p><p>我们可以在方法上加入session对象，然后可以读取对应的id值进而获取登录用户信息，但是这样每个方法都这么做</p><p>会导致代码冗余(参数过多)，因此这里使用ThreadLocal来保存id值。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220505234639516.png"> </p><p>2.ThreadLocal并不是一个Thread，而是Thread的局部变量，因此每一个线程都有对应的ThreadLocal，在ThreadLocal</p><p>里存取值可以保证多线程之间是互不干扰的。</p><p>以上登录成功后，会跳转首页，但是会先经过我的过滤器，所以可以在这里用ThreadLocal来保存id值！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//4-1.判断登录状态，如果已登录，则直接放行</span><span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"employee"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户已登录，用户id为&#123;&#125;"</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"employee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> empId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"employee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BaseContext</span><span class="token punctuation">.</span><span class="token function">setCurrentId</span><span class="token punctuation">(</span>empId<span class="token punctuation">)</span><span class="token punctuation">;</span>    filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseContext</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setCurrentId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">getCurrentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后续业务代码中如需用到用户id则可以直接通过BaseContext.getCurrentId()获得！</p><h3 id="2-关于自定义异常的全局处理"><a href="#2-关于自定义异常的全局处理" class="headerlink" title="2.关于自定义异常的全局处理"></a>2.关于自定义异常的全局处理</h3><p>1.通过控制器增强的方式@ControllerAdvice来捕获异常，进而处理！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxy<span class="token punctuation">.</span>reggie<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span><span class="token comment">//全局异常处理</span><span class="token comment">//RestController或Controller注解都会被拦截到</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span>annotations <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">RestController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RestController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 相同员工名根据雪花算法生成的相同的id无法在数据库插入(因为主键)     * 异常处理方法     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">SQLIntegrityConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">SQLIntegrityConstraintViolationException</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Duplicate entry"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> msg <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"已存在"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"未知错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">CustomException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">CustomException</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-如何处理公共字段填充问题？"><a href="#3-如何处理公共字段填充问题？" class="headerlink" title="3.如何处理公共字段填充问题？"></a>3.如何处理公共字段填充问题？</h3><p>可以参考这个博客：<a href="https://blog.csdn.net/liuerchong/article/details/122940166">https://blog.csdn.net/liuerchong/article/details/122940166</a></p><p>1.这里我们使用Employee这个类的属性来说明</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这是Employee类需要自动填充的属性</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">;</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Long</span> createUser<span class="token punctuation">;</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Long</span> updateUser<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是FieldFill枚举类含义：</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/6.jpg"> </p><p>2.自定义元数据处理对象MetaObjectHandler配合由@TableField声明的属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxy<span class="token punctuation">.</span>reggie<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 插入操作,自动填充         */</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"公共字段填充[insert]..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"createUser"</span><span class="token punctuation">,</span><span class="token class-name">BaseContext</span><span class="token punctuation">.</span><span class="token function">getCurrentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"updateUser"</span><span class="token punctuation">,</span><span class="token class-name">BaseContext</span><span class="token punctuation">.</span><span class="token function">getCurrentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"公共字段填充[update]..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程id为:&#123;&#125;"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"updateUser"</span><span class="token punctuation">,</span><span class="token class-name">BaseContext</span><span class="token punctuation">.</span><span class="token function">getCurrentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-MP如何处理多表之间的联系"><a href="#4-MP如何处理多表之间的联系" class="headerlink" title="4.MP如何处理多表之间的联系"></a>4.MP如何处理多表之间的联系</h3><p>1.自己写表关联映射</p><p>2.使用数据传输对象（<em>DTO</em>）(Data Transfer Object)</p><p>我这里使用DTO因为能直接作用在业务层</p><p>举例：假设我这里需要同时返回菜品以及菜品对应的口味(列表) dish和dish_flavor两张表</p><p>可以使用DishDto来封装信息，然后分别对两张表查询再将数据复制到DishDto中！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxy<span class="token punctuation">.</span>reggie<span class="token punctuation">.</span>dto</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DishDto</span> <span class="token keyword">extends</span> <span class="token class-name">Dish</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishFlavor</span><span class="token punctuation">></span></span> flavors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> copies<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 根据条件查询对应菜品数据 * @param dish * @return */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">DishDto</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Dish</span> dish<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCategoryId</span><span class="token punctuation">,</span>dish<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getSort</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getUpdateTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> dishService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    dishDtoList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token class-name">DishDto</span> dishDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DishDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>dishDto<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Category</span> category <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>category <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> categoryName <span class="token operator">=</span> category<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dishDto<span class="token punctuation">.</span><span class="token function">setCategoryName</span><span class="token punctuation">(</span>categoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//当前菜品id</span>        <span class="token class-name">Long</span> dishId <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishFlavor</span><span class="token punctuation">></span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">DishFlavor</span><span class="token operator">::</span><span class="token function">getDishId</span><span class="token punctuation">,</span>dishId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishFlavor</span><span class="token punctuation">></span></span> dishFlavorList <span class="token operator">=</span> dishFlavorService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        dishDto<span class="token punctuation">.</span><span class="token function">setFlavors</span><span class="token punctuation">(</span>dishFlavorList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dishDto<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>dishDtoList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-自定义统一格式对象返回"><a href="#5-自定义统一格式对象返回" class="headerlink" title="5.自定义统一格式对象返回"></a>5.自定义统一格式对象返回</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxy<span class="token punctuation">.</span>reggie<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span><span class="token comment">//通用返回结果类</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span> <span class="token comment">//编码：1成功，0和其它数字为失败</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span> <span class="token comment">//错误信息</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span> <span class="token comment">//数据</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//动态数据</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">T</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span>data <span class="token operator">=</span> object<span class="token punctuation">;</span>        r<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">R</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>        r<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-前台业务问题"><a href="#四-前台业务问题" class="headerlink" title="四.前台业务问题"></a>四.前台业务问题</h2><h3 id="1-腾讯云短信功能"><a href="#1-腾讯云短信功能" class="headerlink" title="1.腾讯云短信功能"></a>1.腾讯云短信功能</h3><p><a href="https://blog.csdn.net/m0_57258246/article/details/124483324">https://blog.csdn.net/m0_57258246/article/details/124483324</a></p><h3 id="2-通过Redis缓存菜品数据"><a href="#2-通过Redis缓存菜品数据" class="headerlink" title="2.通过Redis缓存菜品数据"></a>2.通过Redis缓存菜品数据</h3><p>具体操作可以阅读：<a href="https://blog.csdn.net/weixin_43811057/article/details/120382906">https://blog.csdn.net/weixin_43811057/article/details/120382906</a></p><p>1.引入redis依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.在linux配置redis服务器，具体配置可以参考该博客关于redis的文章</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"dish_"</span> <span class="token operator">+</span> dish<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> dish<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从redis中获取缓存数据</span>dishDtoList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishDto</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dishDtoList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//若存在，直接返回，无需查询数据库</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>dishDtoList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这里省略查询数据库关于菜品信息...</span><span class="token comment">//若不存在，则查询数据库后再缓存到Redis里,设置有效时间为60分钟</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>dishDtoList<span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-通过SpringCache整合redis来处理套餐数据的缓存"><a href="#3-通过SpringCache整合redis来处理套餐数据的缓存" class="headerlink" title="3.通过SpringCache整合redis来处理套餐数据的缓存"></a>3.通过SpringCache整合redis来处理套餐数据的缓存</h3><p>具体操作可以参考:<a href="https://blog.csdn.net/qq_39940205/article/details/11309805">https://blog.csdn.net/qq_39940205/article/details/11309805</a></p><p>1.配置pom.xml文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.注意：在修改套餐状态以及后台新增套餐时需要删除对应缓存信息！！！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lxy<span class="token punctuation">.</span>reggie<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/setmeal"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetmealController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SetmealService</span> setmealService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SetmealDishService</span> setmealDishService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CategoryService</span> categoryService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token comment">//删除setmealCache分类下所有缓存</span>    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"setmealCache"</span><span class="token punctuation">,</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SetmealDto</span> setmealDto<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>setmealDto<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setmealService<span class="token punctuation">.</span><span class="token function">saveWithDish</span><span class="token punctuation">(</span>setmealDto<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"新增套餐成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 批量修改套装状态     * @param status     * @param ids     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/status/&#123;status&#125;"</span><span class="token punctuation">)</span>    <span class="token comment">//删除setmealCache分类下所有缓存</span>    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"setmealCache"</span><span class="token punctuation">,</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">status</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> status<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span>ids<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">></span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>ids <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Setmeal</span> setmeal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Setmeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setmeal<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        setmeal<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        setmealService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">,</span>updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"修改成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 修改套餐以及相关菜品的信息     * @param setmealDto     * @return     */</span>    <span class="token annotation punctuation">@PutMapping</span>    <span class="token comment">//删除setmealCache分类下所有缓存</span>    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"setmealCache"</span><span class="token punctuation">,</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SetmealDto</span> setmealDto<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        setmealService<span class="token punctuation">.</span><span class="token function">updateWithDish</span><span class="token punctuation">(</span>setmealDto<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"修改套餐成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据条件查询套餐数据     * @param setmeal     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"setmealCache"</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#setmeal.categoryId + '_' + #setmeal.status"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Setmeal</span> setmeal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getCategoryId</span><span class="token punctuation">,</span>setmeal<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span>setmeal<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring核心之AOP</title>
      <link href="/2022/04/16/Spring_AOP/"/>
      <url>/2022/04/16/Spring_AOP/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/mmexport1650095180376.jpg"></p><h1 id="Spring笔记三"><a href="#Spring笔记三" class="headerlink" title="Spring笔记三"></a>Spring笔记三</h1><h2 id="Spring核心之AOP"><a href="#Spring核心之AOP" class="headerlink" title="Spring核心之AOP"></a>Spring核心之AOP</h2><h3 id="1-什么是AOP"><a href="#1-什么是AOP" class="headerlink" title="1. 什么是AOP"></a>1. 什么是AOP</h3><p>AOP为Aspect Oriented Programming的缩写，意思为<strong>面向切面编程</strong>，是通过预编译方式和运行期动态</p><p>代理实现程序功能的统一维护的一种技术。</p><p>好处：</p><p>1、减少代码的重复，提高开发效率，便于维护。</p><p>2、专注核心业务的开发。</p><p>开发中：各自做自己擅长的事情，运行的时候将服务性代码织入到核心业务中。</p><p>通过spring工厂自动实现将服务性代码以切面的方式加入到核心业务代码中。</p><h3 id="2-AOP的实现机制-静态代理"><a href="#2-AOP的实现机制-静态代理" class="headerlink" title="2. AOP的实现机制(静态代理)"></a>2. AOP的实现机制(静态代理)</h3><h4 id="2-1-基于类的静态代理"><a href="#2-1-基于类的静态代理" class="headerlink" title="2.1 基于类的静态代理"></a>2.1 基于类的静态代理</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamService</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TeamService----add----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//这里是两个类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTeamService</span> <span class="token keyword">extends</span> <span class="token class-name">TeamService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"回滚事务 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-基于的接口的静态代理（核心代理类与业务类实现同一个接口-并且是同名方法）"><a href="#2-2-基于的接口的静态代理（核心代理类与业务类实现同一个接口-并且是同名方法）" class="headerlink" title="2.2 基于的接口的静态代理（核心代理类与业务类实现同一个接口,并且是同名方法）"></a>2.2 基于的接口的静态代理（核心代理类与业务类实现同一个接口,并且是同名方法）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义接口的核心方法</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamService</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">//核心业务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TeamService----add----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//代理类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTranService</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IService</span> service<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyTranService</span><span class="token punctuation">(</span><span class="token class-name">IService</span> service<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            service<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"回滚事务 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//实例化代理类，调用add方法即可实现业务增强</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-提取切面代码，作为AOP接口"><a href="#2-3-提取切面代码，作为AOP接口" class="headerlink" title="2.3 提取切面代码，作为AOP接口"></a>2.3 提取切面代码，作为AOP接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> AOP <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAop</span> <span class="token keyword">implements</span> AOP<span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志----before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志----after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志----exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志----myFinally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//切面提取并且结合代理接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyAOPService</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IService</span> service<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AOP</span> aop<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyAOPService</span><span class="token punctuation">(</span><span class="token class-name">IService</span> service<span class="token punctuation">,</span> <span class="token class-name">AOP</span> aop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aop <span class="token operator">=</span> aop<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            aop<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            service<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            aop<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            aop<span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            aop<span class="token punctuation">.</span><span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结静态代理： </p><p>1）可以做到在不修改目标对象的功能前提下，对目标对象功能扩展。 </p><p>2）缺点： </p><p>因为代理对象，需要与目标对象实现一样的接口。所以会有很多代理类，类太多。 </p><p>一旦接口增加方法，目标对象与代理对象都要维护。</p><h3 id="3-动态代理"><a href="#3-动态代理" class="headerlink" title="3. 动态代理"></a>3. 动态代理</h3><p>静态代理：要求代理类一定存在，</p><p><strong>动态代理：程序运行的时候，根据要被代理的对象动态生成代理类。</strong></p><p>类型：</p><p>1、基于JDK的动态代理</p><p>2、基于CGLIB的动态代理</p><h4 id="3-1-基于JDK的动态代理"><a href="#3-1-基于JDK的动态代理" class="headerlink" title="3.1 基于JDK的动态代理"></a>3.1 基于JDK的动态代理</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//主方法    </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//被代理对象</span>        <span class="token class-name">TeamService</span> teamService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeamService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//切面</span>        <span class="token class-name">AOP</span> tranAop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TranAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AOP</span> logAop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IService</span> service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IService</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>teamService<span class="token punctuation">,</span> tranAop<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IService</span> service1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IService</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span>logAop<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生成代对象工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IService</span> service<span class="token punctuation">;</span><span class="token comment">//被代理方法接口</span>    <span class="token keyword">private</span> <span class="token class-name">AOP</span> aop<span class="token punctuation">;</span><span class="token comment">//切面接口</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">IService</span> service<span class="token punctuation">,</span> <span class="token class-name">AOP</span> aop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aop <span class="token operator">=</span> aop<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//代理核心</span>        <span class="token keyword">return</span>  <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                 service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     <span class="token annotation punctuation">@Override</span>                     <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                             aop<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//核心方法</span>                             aop<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>                         <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                             aop<span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                             aop<span class="token punctuation">.</span><span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">&#125;</span>                         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span>                 <span class="token punctuation">&#125;</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点:</p><p>这里你会发现很奇妙的一件事情，你并没有主动声明代理类，而是有JDK生成的代理类，<strong>前提必须是你被代理类实现接口！！！</strong></p><p>代理对象不需要实现接口，但是目标对象一定要实现接口；<strong>否则不能用JDK动态代理</strong></p><p>如果想要功能扩展，但目标对象没有实现接口，怎样功能扩展？</p><h4 id="3-2-基于CGLIB的动态代理"><a href="#3-2-基于CGLIB的动态代理" class="headerlink" title="3.2 基于CGLIB的动态代理"></a>3.2 基于CGLIB的动态代理</h4><p>Cglib代理，也叫做<strong>子类代理</strong>。<strong>在内存中构建一个子类对象从而实现对目标对象功能的扩展。</strong></p><ul><li>JDK的动态代理有一个限制，就是使用动态代理的对象必须实现一个或多个接口。如果想代理没有</li></ul><p>实现接口的类，就可以使用CGLIB实现。</p><ul><li>CGLIB是一个强大的高性能的代码生成包，它可以在运行期扩展Java类与实现Java接口。它广泛的</li></ul><p>被许多AOP的框架使用，例如Spring AOP和dynaop，为他们提供方法的interception。</p><ul><li>CGLIB包的底层是通过使用一个小而快的字节码处理框架ASM，来转换字节码并生成新的类。不鼓</li></ul><p>励直接使用ASM，因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这里可以看出AOP的核心，没有实现某个接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NBAService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NBAService----add----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//结构化设计，使用代理工厂生成代理类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxyFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">NBAService</span> nbaService<span class="token punctuation">;</span><span class="token comment">//被代理类</span>    <span class="token keyword">private</span> <span class="token class-name">AOP</span> aop<span class="token punctuation">;</span><span class="token comment">//切面接口</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">NBAService</span> nbaService<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">AOP</span> aop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Enhancer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>                nbaService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                            aop<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">Object</span> o1 <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>                            aop<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> o1<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            aop<span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">throw</span> throwable<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                            aop<span class="token punctuation">.</span><span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-SpringAOP"><a href="#3-SpringAOP" class="headerlink" title="3. SpringAOP"></a>3. SpringAOP</h2><h3 id="3-1-SpringAOP的概念"><a href="#3-1-SpringAOP的概念" class="headerlink" title="3.1 SpringAOP的概念"></a>3.1 SpringAOP的概念</h3><p>Spring的AOP实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分</p><p>进行代码编写，并通过配置的方式完成指定目标的方法增强。</p><p>我们先来介绍AOP的相关术语：</p><ul><li><strong>Target(目标对象)</strong></li></ul><p>要被增强的对象，一般是业务逻辑类的对象。</p><ul><li><strong>Proxy(代理）</strong></li></ul><p>一个类被 AOP 织入增强后，就产生一个结果代理类。</p><ul><li><strong>Aspect(切面)</strong></li></ul><p>表示增强的功能，就是一些代码完成的某个功能，非业务功能。是切入点和通知的结合。</p><ul><li><strong>Joinpoint(连接点)</strong></li></ul><p>所谓连接点是指那些被拦截到的点。在Spring中,这些点指的是方法（一般是类中的业务方法）,因为</p><p>Spring只支持方法类型的连接点。</p><ul><li><strong>Pointcut(切入点)</strong></li></ul><p>切入点指声明的一个或多个连接点的集合。通过切入点指定一组方法。</p><p>被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改的，不能被增强的。</p><ul><li><strong>Advice(通知增强)</strong></li></ul><p>所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。通知定义了增强代码切入到目标代码的时</p><p>间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。</p><p>​    通知的类型：<strong>前置通知,后置通知,异常通知,最终通知,环绕通知。</strong></p><p>切入点定义切入的位置，通知定义切入的时间。</p><ul><li> <strong>Weaving(织入)</strong></li></ul><p>是指把增强应用到目标对象来创建新的代理对象的过程。 spring 采用动态代理织入，而 AspectJ 采用编</p><p>译期织入和类装载期织入。</p><h3 id="3-2-Aspectj对AOP的实现"><a href="#3-2-Aspectj对AOP的实现" class="headerlink" title="3.2 Aspectj对AOP的实现"></a>3.2 Aspectj对AOP的实现</h3><p>AspectJ 中常用的通知有5种类型：</p><ol><li><p>前置通知</p></li><li><p>后置通知</p></li><li><p>环绕通知</p></li><li><p>异常通知</p></li><li><p>最终通知</p></li></ol><h3 id="3-3-AspectJ的切入点表达式"><a href="#3-3-AspectJ的切入点表达式" class="headerlink" title="3.3 AspectJ的切入点表达式"></a>3.3 AspectJ的切入点表达式</h3><ul><li>execution(<strong>访问权限</strong> 方法返回值  方法声明(参数) <strong>异常类型</strong>)</li></ul><p>切入点表达式要匹配的对象就是目标方法的方法名。所以，execution 表达式中就是方法的签名。</p><p>PS:表达式中黑色文字表示可省略部分，各部分间用空格分开。在其中可以使用以下符号：</p><table><thead><tr><th><strong>符号</strong></th><th><strong>意义</strong></th></tr></thead><tbody><tr><td>*</td><td>0-多个任意字符</td></tr><tr><td>..</td><td>用在方法参数中，表示任意个参数；用在包名后，表示当前及其子包路径</td></tr><tr><td>+</td><td>用在类名后，表示当前及其子类；用在接口后，表示当前接口及其实现类</td></tr></tbody></table><pre class="line-numbers language-intro" data-language="intro"><code class="language-intro">示例： execution(* com.kkb.service.*.*(..)) 指定切入点为：定义在 service 包里的任意类的任意方法。execution(* com.kkb.service..*.*(..)) 指定切入点为：定义在 service 包或者子包里的任意类的任意方法。“..”出现在类名中时，后面必须跟 “*”，表示包、子包下的所有类。execution(* com.kkb.service.IUserService+.*(..))指定切入点为：IUserService 若为接口，则为接口中的任意方法及其所有实现类中的任意方法；若为类， 则为该类及其子类中的任意方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-注解方式实现AOP"><a href="#3-4-注解方式实现AOP" class="headerlink" title="3.4 注解方式实现AOP"></a>3.4 注解方式实现AOP</h3><p>1.引入依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.13.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.创建spring配置文件引入约束</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">xmlns:aop="http://www.springframework.org/schema/aop"http://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.创建核心业务类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>dao:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMVC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teamDao----MVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamService</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TeamDao</span> teamDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//int num = 10/0;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TeamService----add----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TeamService----update----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMVC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        teamDao<span class="token punctuation">.</span><span class="token function">showMVC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teamService----MVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.切面类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment">//切面对象创建权限交给spring</span><span class="token comment">//@Aspect //aspectj 框架的注解 标识当前类是一个切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * PointCut 注解表示切入点表达式     * 方法一般声明为私有     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.kkb.service..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知:在目标方法执行之前被调用的通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拦截的方法名"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的参数个数"</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的参数列表:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> arg<span class="token operator">:</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*     * AfterReturning 注解声明的后置通知     * value 切入点表达式     * returning 属性表示 返回的结果,如果需要的话可以在后置通知的方法中修改结果     * */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.kkb.service..*.update(..))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturn</span><span class="token punctuation">(</span><span class="token class-name">Object</span> result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">boolean</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span>result<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知:在目标方法执行之后被调用的通知,result="</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 注解声明环绕通知     ProceedingJoinPoint 中的proceed方法表示目标方法被执行     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.kkb.service..*.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知:目标方法执行前执行的通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> proceed <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知:目标方法执行后执行的通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*     * AfterThrowing 注解声明的后置通知     * value 切入点表达式     * returning 属性表示 返回的结果,如果需要的话可以在后置通知的方法中修改结果     * */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.kkb.service..*.add(..))"</span><span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">"ex"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">,</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//一般会异常发生的时间，位置，原有都记录下来</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知:在目标方法执行出现异常时才会被调用的通知，否则不执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法出现异常，异常的信息是："</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.kkb.service..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知:无论是否出现异常都是最后被调用的通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在定义好切面 Aspect 后，需要通知 Spring 容器，让容器生成“目标类+ 切面”的代理对象。这个代理是 </p><p>由容器自动生成的。只需要在 Spring 配置文件中注册一个基于 aspectj 的自动代理生成器，其就会自动 </p><p>扫描到@Aspect 注解，并按通知类型与切入点，将其织入，并生成代理。 </p><p>5.spring.xml配置文件中开启包扫描和 注册aspectj的自动代理</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.service,com.kkb.aop<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-5-基于XML实现AOP（原理一样）"><a href="#3-5-基于XML实现AOP（原理一样）" class="headerlink" title="3.5 基于XML实现AOP（原理一样）"></a>3.5 基于XML实现AOP（原理一样）</h3><p>1.切面类不变，把每个方法上注解删除</p><p>2.</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.service,com.kkb.aop<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.kkb.service..*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt2<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.kkb.service..*.add(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myAOP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterReturn<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt2<span class="token punctuation">"</span></span> <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-returning</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exception<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-throwing</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFinally<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>around<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>around</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pointcut:指的是拦截指定范围的一系列业务方法</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务管理</title>
      <link href="/2022/04/16/Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
      <url>/2022/04/16/Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/66.jpg"></p><h1 id="Spring笔记一"><a href="#Spring笔记一" class="headerlink" title="Spring笔记一"></a>Spring笔记一</h1><h2 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h2><h2 id="1-Spring事务管理API"><a href="#1-Spring事务管理API" class="headerlink" title="1. Spring事务管理API"></a>1. Spring事务管理API</h2><p>Spring 的事务管理，主要用到两个事务相关的接口。</p><h3 id="1-1-事务管理器接口"><a href="#1-1-事务管理器接口" class="headerlink" title="1.1 事务管理器接口"></a>1.1 <strong>事务管理器接口</strong></h3><p>事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事</p><p>务的状态信息。</p><p><strong>PlatformTransactionManager</strong> <strong>接口常用的实现类</strong>：</p><p>DataSourceTransactionManager：使用 JDBC 或 MyBatis 进行数据库操作时使用</p><p><strong>Spring的回滚方式</strong></p><p>Spring 事务的默认回滚方式是：发生运行时异常和 error 时回滚，发生受查(编译)异常时提交。不过，</p><p>对于受查异常，程序员也可以手工设置其回滚方式。</p><h3 id="1-2-事务定义接口"><a href="#1-2-事务定义接口" class="headerlink" title="1.2  事务定义接口"></a>1.2  <strong>事务定义接口</strong></h3><p>事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、事务传播行</p><p>为、事务默认超时时限，及对它们的操作。</p><h4 id="1-2-1-事务隔离级别常量"><a href="#1-2-1-事务隔离级别常量" class="headerlink" title="1.2.1 事务隔离级别常量"></a>1.2.1 事务隔离级别常量</h4><p>这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。 </p><p>➢ DEFAULT：采用 DB 默认的事务隔离级别。MySql 的默认为 REPEATABLE_READ； Oracle默认为</p><p>READ_COMMITTED。 </p><p>➢ READ_UNCOMMITTED：读未提交。未解决任何并发问题。</p><p>➢ READ_COMMITTED：读已提交。解决脏读，存在不可重复读与幻读。</p><p>➢ REPEATABLE_READ：可重复读。解决脏读、不可重复读，存在幻读</p><p>➢ SERIALIZABLE：串行化。不存在并发问题。</p><h4 id="1-2-2-事务传播级别常量"><a href="#1-2-2-事务传播级别常量" class="headerlink" title="1.2.2 事务传播级别常量"></a>1.2.2 事务传播级别常量</h4><p>Propagation.REQUIRED</p><p>当前没有事务的时候，就会创建一个新的事务；如果当前有事务，就直接加入该事务，比较常用的</p><p>设置 Propagation.SUPPORTS</p><p>支持当前事务，如果当前有事务，就直接加入该事务；当前没有事务的时候，就以非事务方式执行</p><p>Propagation.MANDATORY</p><p>支持当前事务，如果当前有事务，就直接加入该事务；当前没有事务的时候，就抛出异常</p><p> Propagation.REQUIRES_NEW</p><p>创建新事务，无论当前是否有事务都会创建新的</p><p>PROPAGATION_NESTED</p><p>PROPAGATION_NEVER</p><p>PROPAGATION_NOT_SUPPORTED</p><h2 id="2-声明式事务控制"><a href="#2-声明式事务控制" class="headerlink" title="2. 声明式事务控制"></a>2. 声明式事务控制</h2><p>Spring提供的对事务的管理，就叫做声明式事务管理。</p><p>如果用户需要使用spring的声明式事务管理，在配置文件中配置即可：不想使用的时候直接移除配置。</p><p>这种方式实现了对事务控制的最大程度的解耦。</p><p>声明式事务管理，核心实现就是基于AOP。    </p><pre class="line-numbers language-none"><code class="language-none">Spring中提供了对事务的管理。开发者只需要按照spring的方式去做就行。事务必须在service层统一控制。 事务的粗细粒度：     细粒度：对方法中的某几行的代码进行开启提交回滚；     粗粒度：对整个方法进行开启提交回滚；Spring中的aop只能对方法进行拦截，所有我们也就针对方法进行事务的控制。如果只有单条的查询语句，可以省略事务；如果一次执行的是多条查询语句，例如统计结果、报表查询。必须 开启事务。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-基于注解的事务"><a href="#3-基于注解的事务" class="headerlink" title="3.  基于注解的事务"></a>3.  基于注解的事务</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 事务管理器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TeamDao</span> teamDao<span class="token punctuation">;</span>    <span class="token comment">/*** @Transactional 属性 说明：    * readOnly:是否只读     * rollbackFor=&#123;Exception.class&#125;： 遇到什么异常会回滚     * propagation事务的传播：     * Propagation.REQUIRED:当前没有事务的时候，就会创建一个新的事务；如果当前有事务，就直 接加入该事务，比较常用的设置     * Propagation.SUPPORTS:支持当前事务，如果当前有事务，就直接加入该事务；当前没有事务的 时候，就以非事务方式执行    * Propagation.MANDATORY:支持当前事务，如果当前有事务，就直接加入该事务；当前没有事务的 时候，就抛出异常     * Propagation.REQUIRES_NEW:创建新事务，无论当前是否有事务都会创建新的     * isolation=Isolation.DEFAULT：事务的隔离级别：默认是数据库的隔离级别     **/</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span> rollbackFor <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Team</span> team<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> teamDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一条执行结果：num1="</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> teamDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二条执行结果：num2="</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num2 <span class="token operator">+</span> num1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-基于XML的事务"><a href="#4-基于XML的事务" class="headerlink" title="4. 基于XML的事务"></a>4. 基于XML的事务</h2><p>这里演示了，可以查阅别的资料，因为不常用</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springs事务管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring概述</title>
      <link href="/2022/04/16/Spring%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/04/16/Spring%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/mmexport1650095150738.jpg"></p><h1 id="Spring笔记一"><a href="#Spring笔记一" class="headerlink" title="Spring笔记一"></a>Spring笔记一</h1><h2 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1. Spring概述"></a>1. Spring概述</h2><h3 id="1-1-什么是框架"><a href="#1-1-什么是框架" class="headerlink" title="1.1 什么是框架?"></a>1.1 什么是框架?</h3><p>​    框架（Framework）：框（指其约束性）架（指其支撑性），在软件设计中指为解决一个开放性问题而</p><p>设计的具有一定约束性的支撑结构。在此结构上可以根据具体问题扩展、安插更多的组成部分，从而更</p><p>迅速和方便地构建完整的解决问题的方案。</p><p>​    如何学习框架呢？</p><p>1、知道框架能做什么</p><p>2、学习框架的语法，一般框架完成一个功能需要一定的步骤</p><p>3、框架的内部实现原理（扩展）</p><p>4、尝试实现一个框架（提升）</p><h3 id="1-2-Spring是什么"><a href="#1-2-Spring是什么" class="headerlink" title="1.2 Spring是什么"></a>1.2 Spring是什么</h3><p>Spring官网 <a href="https://spring.io/">https://spring.io</a></p><p>1、Spring 被称为 J2EE 的春天，是一个是分层的<strong>轻量级</strong>的 Java 开发框架。</p><p>2、Spring具有<strong>控制反转</strong>（IoC）和<strong>面向切面</strong>（AOP）两大核心。Java Spring 框架通过声明式方式灵活地进</p><p>行<strong>事务的管理</strong>，提高开发效率和质量。</p><p>3、Spring 框架不仅限于服务器端的开发。还是一个超级粘合平台，除了自己提供功能外，还提供粘合其他技术</p><p>和框架的能力。</p><h3 id="1-3-Spring的优势"><a href="#1-3-Spring的优势" class="headerlink" title="1.3 Spring的优势"></a>1.3 Spring的优势</h3><pre class="line-numbers language-none"><code class="language-none">1、方便解耦，简化开发 Spring 就是一个大工厂，可以将所有对象的创建和依赖关系的维护交给 Spring 管理。2、方便集成各种优秀框架 Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如 Struts2、Hibernate、 MyBatis 等）的直接支持。 3、降低 Java EE API 的使用难度 Spring 对 Java EE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等）都提供了封装， 使这些 API 应用的难度大大降低。4、方便程序的测试 Spring 支持 JUnit4，可以通过注解方便地测试 Spring 程序。5、AOP 编程的支持 Spring 提供面向切面编程，可以方便地实现对程序进行权限拦截和运行监控等功能。6、声明式事务的支持 只需要通过配置就可以完成对事务的管理，而无须手动编程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-Spring的体系结构"><a href="#1-4-Spring的体系结构" class="headerlink" title="1.4 Spring的体系结构"></a>1.4 Spring的体系结构</h3><p>Spring 为我们提供了一站式解决方案，但Spring 是模块化的，允许咱们挑选和选择适用于项目的模块，</p><p>不需要把剩余部分也引入。</p><p>Spring 框架提供约 20 个模块，可以根据应用程序的要求来选择。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220414190429876.png"> </p><h4 id="1-4-1-核心容器"><a href="#1-4-1-核心容器" class="headerlink" title="1.4.1 核心容器"></a>1.4.1 核心容器</h4><p>核心容器由 <strong>Spring-core</strong>，<strong>Spring-beans</strong>，<strong>Spring-context</strong>，<strong>Spring-context-support</strong>和<strong>Spring</strong></p><p><strong>expression</strong>（SpEL，Spring 表达式语言，Spring Expression Language）等模块组成</p><p><strong>Spring-core</strong> 模块提供了框架的基本组成部分，包括 IoC 和依赖注入功能。</p><p><strong>Spring-beans</strong> 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且</p><p>可以把配置和依赖从实际编码逻辑中解耦。</p><p><strong>context</strong> 模块建立在由 <strong>core</strong>和 <strong>beans</strong> 模块的基础上建立起来的，它以一种类似于 JNDI 注册的方</p><p>式访问对象。Context 模块继承自 Bean 模块，并且添加了国际化（比如，使用资源束）、事件传</p><p>播、资源加载和透明地创建上下文（比如，通过 Servelet 容器）等功能。Context 模块也支持 Java</p><p>EE 的功能，比如 EJB、JMX 和远程调用等。<strong>ApplicationContext</strong> 接口是 Context 模块的焦点。</p><p><strong>Spring-context-support</strong> 提供了对第三方集成到 Spring 上下文的支持，比如缓存（EhCache,</p><p>Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker,</p><p>JasperReports, Velocity）等。</p><p><strong>Spring-expression</strong> 模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是 JSP2.1</p><p>规范中定义的统一表达式语言的扩展，支持 set 和 get 属性值、属性赋值、方法调用、访问数组集</p><p>它们的完整依赖关系如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220414191556914.png"> </p><h4 id="1-4-2-数据访问-集成"><a href="#1-4-2-数据访问-集成" class="headerlink" title="1.4.2 数据访问/集成"></a>1.4.2 数据访问/集成</h4><p>JDBC=Java Data Base Connectivity，ORM=Object Relational Mapping，OXM=Object XML</p><p>Mapping，JMS=Java Message Service</p><p><strong>JDBC</strong> 模块提供了 JDBC 抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解</p><p>析。</p><p><strong>ORM</strong> 模块提供了对流行的对象关系映射 API 的集成，包括 JPA、JDO 和 Hibernate 等。通过此模</p><p>块可以让这些 ORM 框架和 Spring的其它功能整合，比如前面提及的事务管理。</p><p><strong>OXM</strong> 模块提供了对 OXM 实现的支持，比如 JAXB、Castor、XML Beans、JiBX、XStream 等。</p><p><strong>JMS</strong> 模块包含生产（produce）和消费（consume）消息的功能。从 Spring 4.1 开始，集成了</p><p>Spring-messaging 模块。</p><p><strong>事务</strong>模块为实现特殊接口类及所有的 POJO 支持编程式和声明式事务管理。</p><h4 id="1-4-3-Web"><a href="#1-4-3-Web" class="headerlink" title="1.4.3 Web"></a>1.4.3 Web</h4><p><strong>Web</strong> 模块提供面向 web 的基本功能和面向 web 的应用上下文，比如多部分（multipart）文件上</p><p>传功能、使用 Servlet 监听器初始化 IoC 容器等。它还包括 HTTP 客户端以及 Spring 远程调用中与</p><p>web 相关的部分。</p><p><strong>Web-MVC</strong> 模块为 web 应用提供了模型视图控制（MVC）和 REST Web服务的实现。Spring 的</p><p>MVC 框架可以使领域模型代码和 web 表单完全地分离，且可以与 Spring 框架的其它所有功能进</p><p>行集成。</p><p><strong>Web-Socket</strong> 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服</p><p>务器端之间通信的两种方式。</p><p><strong>Web-Portlet</strong> 模块提供了用于 Portlet 环境的 MVC 实现，并反映了 Spring-webmvc 模块的功能。</p><h4 id="1-4-4-其他"><a href="#1-4-4-其他" class="headerlink" title="1.4.4 其他"></a>1.4.4 其他</h4><p><strong>AOP</strong> 模块提供了面向方面（切面）的编程实现，允许你定义方法拦截器和切入点对代码进行干净</p><p>地解耦，从而使实现功能的代码彻底的解耦出来。</p><p><strong>Aspects</strong> 模块提供了与 <strong>AspectJ</strong> 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框</p><p>架。</p><p><strong>Instrumentation</strong> 模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实</p><p>现。</p><p><strong>Messaging</strong> 模块为 STOMP 提供了支持作为在应用程序中 WebSocket 子协议的使用。它也支持一</p><p>个注解编程模型，它是为了选路和处理来自 WebSocket 客户端的 STOMP 信息。</p><p><strong>测试</strong>模块支持对具有 JUnit 或 TestNG 框架的 Spring 组件的测试。</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC</title>
      <link href="/2022/04/15/Spring_IOC/"/>
      <url>/2022/04/15/Spring_IOC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/mmexport1650095148354.jpg"></p><h1 id="Spring笔记二"><a href="#Spring笔记二" class="headerlink" title="Spring笔记二"></a>Spring笔记二</h1><h2 id="1-Spring-IOC"><a href="#1-Spring-IOC" class="headerlink" title="1. Spring IOC"></a>1. Spring IOC</h2><h3 id="1-1-IOC的概念"><a href="#1-1-IOC的概念" class="headerlink" title="1.1 IOC的概念"></a>1.1 IOC的概念</h3><p>Ioc—Inversion of Control，即“控制反转”，不是什么技术，一种设计思想。</p><p>控制：指的是对象创建（实例化、管理）的权利<br>反转：控制权交给外部环境了（spring框架、 IoC容器）</p><h3 id="1-2-获取Spring容器"><a href="#1-2-获取Spring容器" class="headerlink" title="1.2 获取Spring容器"></a>1.2 获取Spring容器</h3><p>1.BeanFactory：BeanFactory是Spring框架中IoC容器的顶层接⼝,它只是⽤来定义⼀些基础功能,定义⼀些基础规范</p><p>2.ApplicationContext：ApplicationContext是BeanFactory的⼀个⼦接⼝，是容器的⾼级接⼝，⽐<br>BeanFactory要拥有更多的功能，⽐如说国际化⽀持和资源访问（xml， java配置类）事件传播等方面的良好支持.</p><h3 id="1-3-bean标签的属性"><a href="#1-3-bean标签的属性" class="headerlink" title="1.3 bean标签的属性"></a>1.3 bean标签的属性</h3><table><thead><tr><th align="left"><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="left">class</td><td>指定bean对应类的全路径</td></tr><tr><td align="left">name</td><td>name是bean对应对象的一个标识</td></tr><tr><td align="left">scope</td><td>执行bean对象创建模式和生命周期,scope=”singleton”和scope=”prototype”</td></tr><tr><td align="left">id</td><td>id是bean对象的唯一标识,不能添加特别字符</td></tr><tr><td align="left">lazy-init</td><td>是否延时加载 默认值:false。true 延迟加载对象,当对象被调用的时候才会加载，测试</td></tr><tr><td align="left">init-method</td><td>的时候，通过getbean()方法获得对象。lazy-init=”false” 默认值，不延迟，无论对象只需要加载配置文件即可对象初始化方法</td></tr><tr><td align="left">destroy-method</td><td>是否被使用，都会立即创建对象,测试时只需要加载配置文件即可。注意:测试的时候只对象销毁方法</td></tr></tbody></table><h3 id="1-4-xml模式下实例化bean的三种方式"><a href="#1-4-xml模式下实例化bean的三种方式" class="headerlink" title="1.4 xml模式下实例化bean的三种方式"></a>1.4 xml模式下实例化bean的三种方式</h3><h4 id="1-4-1-使用默认的构造方法"><a href="#1-4-1-使用默认的构造方法" class="headerlink" title="1.4.1 使用默认的构造方法"></a>1.4.1 使用默认的构造方法</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--1、通过默认构造方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kbb.pojo.Team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-4-2-使用带参数的构造方法"><a href="#1-4-2-使用带参数的构造方法" class="headerlink" title="1.4.2 使用带参数的构造方法"></a>1.4.2 使用带参数的构造方法</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>team2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kbb.pojo.Team<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--name:表示参数的名称--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>勇士<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>location<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>金州<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-3-使用工厂类"><a href="#1-4-3-使用工厂类" class="headerlink" title="1.4.3 使用工厂类"></a>1.4.3 使用工厂类</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--通过工厂静态方法获取对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>staticTeam<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.bean.MyFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>staticFun<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--实例化工厂对象再调用方法获取对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.bean.MyFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>instanceTeam<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.bean.MyFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>instanceFun<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220414213338198.png"> </p><h3 id="1-5-bean的作用域"><a href="#1-5-bean的作用域" class="headerlink" title="1.5 bean的作用域"></a>1.5 bean的作用域</h3><p><strong>单例模式： singleton</strong><br>对象出⽣：当创建容器时，对象就被创建了。<br>对象活着：只要容器在，对象⼀直活着。<br>对象死亡：当销毁容器时，对象就被销毁了。<br><strong>总结：单例模式的bean对象⽣命周期与容器相同。</strong><br><strong>多例模式： prototype</strong><br>对象出⽣：当使⽤对象时，创建新的对象实例。<br>对象活着：只要对象在使⽤中，就⼀直活着。<br>对象死亡：当对象⻓时间不⽤时，被java的垃圾回收器回收了。<br><strong>总结：多例模式的bean对象， spring框架只负责创建，不负责销毁。</strong></p><h3 id="1-6-基于XML的DI"><a href="#1-6-基于XML的DI" class="headerlink" title="1.6 基于XML的DI"></a>1.6 基于XML的DI</h3><p>DI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即</p><p>由容器动态的将某个依赖关系注入到组件之中。</p><p><strong>Ioc</strong>和<strong>DI</strong>是同一个概念的不同角度描述。IoC是一种思想，概念，DI是实现它的手段。Spring框架使用依</p><p>赖注入实现IoC.</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.TeamDao.TeamDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.TeamService.TeamService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过set方法注入参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamService2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.TeamService.TeamService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用构造方法注入参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--按名称自动注入：查找容器中id名与属性名一致的对象进行注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamService3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.TeamService.TeamService<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--按类型自动注入：查找容器中类型与属性类型相同或者符合is-a关系的对象进行注入，    但是要求类 型相同的对象唯一，否则抛出异常：不知道用哪一个匹配--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamService4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.TeamService.TeamService<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-基于注解实现IoC重要"><a href="#1-7-基于注解实现IoC重要" class="headerlink" title="1.7 基于注解实现IoC重要"></a>1.7 基于注解实现IoC重要</h3><p>对于 DI 使用注解，将不再需要在 Spring 配置文件中声明 bean 实例。Spring 中使用注解，需要在原有</p><p>Spring 运行环境基础上再做一些改变。</p><h4 id="1-7-1-声明Bean的注解-Component"><a href="#1-7-1-声明Bean的注解-Component" class="headerlink" title="1.7.1 声明Bean的注解@Component"></a>1.7.1 声明Bean的注解@Component</h4><p>@Component 不指定 value 属性，bean 的 id 是类名的首字母小写</p><p>@Repository : 用于dao实现类的的注解</p><p>@Service: 用户service实现类的注解</p><p>@Controller: 用于controller实现类的注解</p><h4 id="1-7-2-包扫描"><a href="#1-7-2-包扫描" class="headerlink" title="1.7.2 包扫描"></a>1.7.2 包扫描</h4><p>需要在 Spring 配置文件中配置组件扫描器，用于在指定的基本包中扫描注解。<strong>如果没有报扫描，添加的</strong></p><p><strong>创建对象的注解不生效</strong>。</p><p>如果要扫描的包有多个，可以有以下方式扫描：</p><p><strong>1</strong>、命名空间</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220414215145641.png"> </p><p><strong>2</strong>、使用多个<strong>context:component-scan</strong>指定不同的包路径</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--多个一起包扫描--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.TeamDao,com.kkb.TeamService,com.kkb.controller,com.kkb.bean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>3</strong>、base-package是指定到父包名</p><p>但不建议使用顶级的父包，扫描的路径比较多，导致容器启动时间变慢。指定到目标包和合适的。也就是注解所在包全路径。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--多个包的扫描: 方式3： base-package中直接声明要扫描的多个包的父包--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-7-3-属性注入-Value"><a href="#1-7-3-属性注入-Value" class="headerlink" title="1.7.3 属性注入@Value"></a>1.7.3 属性注入@Value</h4><p>需要在属性上使用注解@Value，该注解的 value 属性用于指定要注入的值。使用该注解完成属性注入</p><p>时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。</p><h4 id="1-7-4-byType自动注入-Autowired"><a href="#1-7-4-byType自动注入-Autowired" class="headerlink" title="1.7.4 byType自动注入@Autowired"></a>1.7.4 byType自动注入@Autowired</h4><p>需要在引用属性上使用注解@Autowired，该注解默认使用按类型自动装配 Bean 的方式。使用该注解完</p><p>成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。</p><h4 id="1-7-5-byName自动注入-Autowired和-Qualifier"><a href="#1-7-5-byName自动注入-Autowired和-Qualifier" class="headerlink" title="1.7.5 byName自动注入@Autowired和@Qualifier"></a>1.7.5 byName自动注入@Autowired和@Qualifier</h4><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220414215833007.png"> </p><h3 id="1-8-自动注入-Resource"><a href="#1-8-自动注入-Resource" class="headerlink" title="1.8 自动注入@Resource"></a>1.8 自动注入@Resource</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//jdk版本高于1.6才有，jdk11里面没有javax.annotation,所以得在pom.xml先配置一下</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"teamService"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token class-name">TeamService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//默认按照名称进行装配，如果没有名称相符的，则按照类型进行装配</span><span class="token keyword">private</span> <span class="token class-name">TeamService</span> teamService<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> IOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM开发时遇到的一些小问题</title>
      <link href="/2022/04/05/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/05/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/mmexport1649071630081.jpg"></p><h1 id="SSM开发时遇到的一些小问题"><a href="#SSM开发时遇到的一些小问题" class="headerlink" title="SSM开发时遇到的一些小问题"></a>SSM开发时遇到的一些小问题</h1><h2 id="1-使用mybatis-generator可能遇到的问题"><a href="#1-使用mybatis-generator可能遇到的问题" class="headerlink" title="1.使用mybatis generator可能遇到的问题"></a>1.使用mybatis generator可能遇到的问题</h2><h3 id="1-1-BaseResultMap问题"><a href="#1-1-BaseResultMap问题" class="headerlink" title="1.1 BaseResultMap问题"></a>1.1 BaseResultMap问题</h3><p>实体类名与表列名不一致</p><p>resultMap:</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220318142051811.png"> </p><p>表列名字:</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220318142107637.png"> </p><p>出错信息:</p><p>在Tomcat启动时:</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220318143830576.png"></p><p>解决方法:我遇到的，同1.2会一起解决</p><h3 id="1-2-mybatis-generator自动生成entity类时多出了XXXWithBLOBs"><a href="#1-2-mybatis-generator自动生成entity类时多出了XXXWithBLOBs" class="headerlink" title="1.2 mybatis generator自动生成entity类时多出了XXXWithBLOBs"></a>1.2 mybatis generator自动生成entity类时多出了XXXWithBLOBs</h3><p>在逆向生成时，除了会生成 <code>User</code> 类，还会生成一个继承 <code>User</code> 类的<code>UserWithBLOBs</code> 类。<br>解决如下</p><p>在[<a href="https://so.csdn.net/so/search?q=MyBatis&spm=1001.2101.3001.7020">MyBatis</a> Generator] 的官方英文文档中有提到这个问题：→MyBatis Generator</p><pre class="line-numbers language-English" data-language="English"><code class="language-English">If you are using version 8.x of Connector&#x2F;J you may notice that the generator attempts to generate code for tables in the MySql information schemas (sys, information_schema, performance_schema, etc.) This is probably not what you want! To disable this behavior, add the property “nullCatalogMeansCurrent&#x3D;true” to your JDBC URL.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-中文" data-language="中文"><code class="language-中文">翻译过来就是：如果您使用的是Connector &#x2F; J的8.x版，您可能会注意到生成器尝试为MySql信息模式（sys，information_schema，performance_schema等）中的表生成代码。这可能不是您想要的！要禁用此行为，请将属性“nullCatalogMeansCurrent &#x3D; true”添加到JDBC URL。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：解决一点</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost/my_schema<span class="token punctuation">"</span></span>            <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my_user<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my_password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nullCatalogMeansCurrent<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-测试类Test出现错误-Class-not-found：”Test”"><a href="#2-测试类Test出现错误-Class-not-found：”Test”" class="headerlink" title="2. 测试类Test出现错误 Class not found：”Test”"></a>2. 测试类Test出现错误 Class not found：”Test”</h2><p>1.原因：多模块下，<a href="https://so.csdn.net/so/search?q=maven&spm=1001.2101.3001.7020">maven</a>默认没有加载这个类</p><p>2.解决如下：</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220318191730592.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220318191829189.png"> </p><h2 id="3-webapp目录下静态资源扫描不到问题"><a href="#3-webapp目录下静态资源扫描不到问题" class="headerlink" title="3.webapp目录下静态资源扫描不到问题"></a>3.webapp目录下静态资源扫描不到问题</h2><p>众所周知springmvc默认有一个前端控制器来处理请求，如果是静态资源比如.html，就必须做静态资源的处理</p><p>我这里遇到的问题是根目录下的index.html和login.html扫描不到，直接请求报404的错误</p><p>解决方法：</p><p>1.统一放在一个文件夹下：</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220318192151695.png"> </p><p>2.对文件夹再次在springmvc.xml里进行扫描</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220318192242349.png"> </p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven与javaweb</title>
      <link href="/2022/03/11/Maven%E6%90%AD%E5%BB%BAjavaweb%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/03/11/Maven%E6%90%AD%E5%BB%BAjavaweb%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/2.jpg"></p><h1 id="Maven笔记三"><a href="#Maven笔记三" class="headerlink" title="Maven笔记三"></a>Maven笔记三</h1><h2 id="1-IDEA搭建maven项目"><a href="#1-IDEA搭建maven项目" class="headerlink" title="1 IDEA搭建maven项目"></a>1 IDEA搭建maven项目</h2><h3 id="1-1-IDEA集成Maven插件"><a href="#1-1-IDEA集成Maven插件" class="headerlink" title="1.1 IDEA集成Maven插件"></a>1.1 IDEA集成Maven插件</h3><p>1.打开IDEA找到设置里面的Settings</p><p>2.在上面的快捷查找框中输入Maven，查找与Maven相关的设置，然后点击Maven,按如图配置。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310174734766.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310174814488.png"> </p><h3 id="1-2-不使用骨架创建Maven的java-web工程"><a href="#1-2-不使用骨架创建Maven的java-web工程" class="headerlink" title="1.2 不使用骨架创建Maven的java web工程"></a>1.2 不使用骨架创建Maven的java web工程</h3><p>1、新建项目,选择Maven。因为不使用骨架创建Web项目,所以不勾选Create from archetype，直接点</p><p>击Next</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310175044670.png"> </p><p>2、编辑项目名,编辑好后点击Finish</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310175112729.png"> </p><p> 3、不使用骨架的Web项目已经创建完成了,下面是基本的结构,没有web目录</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310175139878.png"> </p><p>4、我们需要手动添加Web目录,按照以下顺序添加web目录。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310175209773.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310175227858.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20220310175255975.png"> </p><p>5、点击Artifacts,加入刚才创建的内容</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310175321326.png"> </p><h2 id="1-2-构建完整的Web项目"><a href="#1-2-构建完整的Web项目" class="headerlink" title="1.2 构建完整的Web项目"></a>1.2 构建完整的Web项目</h2><p>首先咱们将刚刚创建的web项目中编写一个jsp页面和servlet，然后可以通过配置的tomcat插件方式运</p><p>行项目</p><p>pom.xml文件中添加如下内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--jar依赖管理--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--tomcat插件--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--tomcat访问端口--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/lina<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--项目访问路径--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-1-配置Tomcat插件运行方式"><a href="#1-2-1-配置Tomcat插件运行方式" class="headerlink" title="1.2.1 配置Tomcat插件运行方式"></a>1.2.1 配置Tomcat插件运行方式</h3><p>1.</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310175732485.png"> </p><p> 2.点击运行按钮</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310175838957.png"> </p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven搭建javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven基础</title>
      <link href="/2022/03/11/Maven%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/03/11/Maven%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/1.jpg"></p><h1 id="Maven笔记一"><a href="#Maven笔记一" class="headerlink" title="Maven笔记一"></a>Maven笔记一</h1><h2 id="1-Maven概述"><a href="#1-Maven概述" class="headerlink" title="1.Maven概述"></a>1.Maven概述</h2><h3 id="1-1-Maven简述"><a href="#1-1-Maven简述" class="headerlink" title="1.1 Maven简述"></a>1.1 Maven简述</h3><p>Maven翻译为“专家”，“内行”。Maven是Apache下的一个纯java开发的<strong>开源</strong>项目。</p><p>Maven 是一个<strong>项目管理工具</strong>，可以对 Java 项目进行构建、依赖管理。</p><p>Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。</p><p>Maven创始者希望能够更多的让Java开发人员的日常工作更加容易，帮助理解任何基于Java项目。</p><h3 id="1-2-Maven的两大功能"><a href="#1-2-Maven的两大功能" class="headerlink" title="1.2 Maven的两大功能"></a>1.2 Maven的两大功能</h3><p><strong>项目构建</strong>和<strong>依赖管理</strong>。</p><h4 id="1-2-1-1-传统项目构建过程"><a href="#1-2-1-1-传统项目构建过程" class="headerlink" title="1.2.1.1 传统项目构建过程"></a>1.2.1.1 传统项目构建过程</h4><p>原来构建项目的过程如下：以web项目为例</p><p>1）在idea中创建一个java web工程</p><p>2）在工程中编写源代码及配置文件等</p><p>3）对源代码进行编译，java源文件编译成.class文件</p><p>4）执行Junit单元测试</p><p>5）将工程打成war包部署至tomcat运行</p><h4 id="1-2-1-2-Maven项目构建过程"><a href="#1-2-1-2-Maven项目构建过程" class="headerlink" title="1.2.1.2 Maven项目构建过程"></a>1.2.1.2 Maven项目构建过程</h4><p>Maven将项目构建的过程进行<strong>标准化</strong>，每个阶段使用一个命令完成，下图展示了构建过程的一些阶段：</p><img src="C:/Users/10452/AppData/Roaming/Typora/typora-user-images/image-20220310164112903.png" style="zoom:80%;" />   <pre class="line-numbers language-none"><code class="language-none">清理:删除以前的编译结果，为重新编译做好准备。 编译:将Java源程序编译为字节码文件。 测试:针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。 报告:在每一次测试后以标准的格式记录和展示测试结果。 打包:将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web工程对 应war包。 安装:在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。 部署:将打包的结果部署到远程仓库或将war包部署到服务器上运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-1-3-项目构建的方式"><a href="#1-2-1-3-项目构建的方式" class="headerlink" title="1.2.1.3 项目构建的方式"></a>1.2.1.3 项目构建的方式</h4><p><strong>1</strong>、<strong>Ant</strong></p><p>Ant只是一个项目构建工具，它没有集成依赖管理。</p><p>Ant在进行项目构建时，它没有对项目目录结构进行约定，需要手动指定源文件、类文件等目录地址。同</p><p>时它执行task时，需要显示指定依赖的task，这样会造成大量的代码重复。</p><p><strong>2</strong>、<strong>Maven</strong></p><p>Maven不仅是一个项目构建工具，更是一个项目管理工具。它在项目构建工程中，比ant更全面，更灵</p><p>活。 Maven在进行项目构建时，它对项目目录结构拥有约定，知道你的源代码在哪里，类文件应该放</p><p>到哪里去。它拥有生命周期的概念，Maven的生命周期是有顺序的，在执行后面的生命周期的任务时，</p><p>不需要显示的配置前面任务的生命周期。例如执行 mvn install 就可以自动执行编译，测试，打包等构建</p><p>过程</p><p><strong>3</strong>、<strong>Gradle</strong></p><p>一个开源的自动化构建系统，建立在Apache Ant和Maven Apache概念的基础上，并引入了基于Groovy</p><p>的特定领域语言（DSL），而不是使用Apache Maven宣布的项目配置XML形式。</p><h3 id="1-2-2-什么是依赖管理"><a href="#1-2-2-什么是依赖管理" class="headerlink" title="1.2.2 什么是依赖管理"></a>1.2.2 什么是依赖管理</h3><p>什么是依赖？一个java项目可能要使用一些第三方的jar包才可以运行，那么我们说这个java项目依赖</p><p>了这些第三方的jar包。</p><p>什么是依赖管理？就是对项目所有依赖的jar包进行规范化管理。</p><h4 id="1-2-2-1-传统项目的依赖管理"><a href="#1-2-2-1-传统项目的依赖管理" class="headerlink" title="1.2.2.1 传统项目的依赖管理"></a>1.2.2.1 传统项目的依赖管理</h4><p>传统的项目工程要管理所依赖的jar包完全靠人工进行，程序员从网上下载jar包添加到项目工程中。</p><p>手动拷贝jar包添加到工程中的问题是：</p><p>1、没有对jar包的版本统一管理，容易导致版本冲突。</p><p>2、从网上找jar包非常不方便，有些jar找不到。</p><p>3、jar包添加到工程中导致工程过大。</p><h4 id="1-2-2-2-Maven项目的依赖管理"><a href="#1-2-2-2-Maven项目的依赖管理" class="headerlink" title="1.2.2.2 Maven项目的依赖管理"></a>1.2.2.2 Maven项目的依赖管理</h4><p>Maven项目管理所依赖的jar包不需要手动向工程添加jar包，只需要在pom.xml（Maven工程的配置文件）</p><p>添加jar包的坐标，自动从Maven仓库中下载jar包运行。</p><p>使用Maven依赖管理添加jar的好处：</p><p>1、通过pom.xml文件对jar包的版本进行统一管理，可避免版本冲突。</p><p>2、Maven团队维护了一个非常全的Maven仓库，里边包括了当前使用的jar包，Maven工程可以自动从</p><p>Maven仓库下载jar包，非常方便。</p><h3 id="1-3-使用Maven的好处"><a href="#1-3-使用Maven的好处" class="headerlink" title="1.3 使用Maven的好处"></a>1.3 使用Maven的好处</h3><p>1、一步构建</p><p>Maven对项目构建的过程进行标准化，通过一个命令即可完成构建过程。</p><p>2、依赖管理</p><p>Maven工程不用手动导jar包，通过在pom.xml中定义坐标从Maven仓库自动下载，方便且不易出错。</p><p>3、Maven的跨平台，可在window、linux上使用。</p><p>4、Maven遵循规范开发，有利于提高大型团队的开发效率，降低项目的维护成本，公司都会考虑使用</p><p>Maven来构建项目。</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven配置</title>
      <link href="/2022/03/11/Maven%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/11/Maven%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/3.jpg"></p><h1 id="Maven笔记二"><a href="#Maven笔记二" class="headerlink" title="Maven笔记二"></a>Maven笔记二</h1><h2 id="1-Maven的安装与配置"><a href="#1-Maven的安装与配置" class="headerlink" title="1.Maven的安装与配置"></a>1.Maven的安装与配置</h2><h3 id="1-1-Maven的下载"><a href="#1-1-Maven的下载" class="headerlink" title="1.1 Maven的下载"></a>1.1 Maven的下载</h3><p>从网站 <a href="http://maven.apache.org/download.cgi">http://Maven.apache.org/download.cgi</a> 下载</p><p>我使用的是3.3.9版本。</p><h3 id="1-2-Maven的安装"><a href="#1-2-Maven的安装" class="headerlink" title="1.2 Maven的安装"></a>1.2 Maven的安装</h3><p>将下载好的Maven安装包解压到一个不含有中文和空格的目录中。</p><p>安装包解压即可使用。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310170056197.png"> </p><pre class="line-numbers language-none"><code class="language-none">目录说明： bin目录： 该目录包含了 mvn 运行的脚本 boot目录： Maven运行需要类加载器 conf目录： 该目录包含了一个非常重要的文件 settings.xml。直接修改该文件，就能在机器上全局地定制 Maven 的行为lib目录： Maven运行依赖jar包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-配置Maven的环境变量"><a href="#1-3-配置Maven的环境变量" class="headerlink" title="1.3 配置Maven的环境变量"></a>1.3 配置Maven的环境变量</h3><p>前提必须有java的环境变量（推荐使用JDK8）：</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310170247303.png"> </p><p>打开环境变量的系统变量，选择Path配置到maven安装的bin目录下</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310170437466.png"> </p><p>通过 mvn -v命令检查 Maven是否安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310170602206.png"> </p><h3 id="1-4-修改Maven的配置文件"><a href="#1-4-修改Maven的配置文件" class="headerlink" title="1.4 修改Maven的配置文件"></a>1.4 修改Maven的配置文件</h3><p>找到Maven安装路径下的settings.xml配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220310170828886.png"> </p><h4 id="1-4-1-配置默认的JDK版本"><a href="#1-4-1-配置默认的JDK版本" class="headerlink" title="1.4.1 配置默认的JDK版本"></a>1.4.1 配置默认的JDK版本</h4><p>Maven默认使用jdk1.7，我们常用的是jdk1.8，所以直接在配置文件中修改。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Maven.compiler.source</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Maven.compiler.target</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Maven的核心概念"><a href="#2-Maven的核心概念" class="headerlink" title="2.Maven的核心概念"></a>2.Maven的核心概念</h2><h3 id="2-1-Maven的目录结构"><a href="#2-1-Maven的目录结构" class="headerlink" title="2.1 Maven的目录结构"></a>2.1 Maven的目录结构</h3><p><strong>Maven</strong>默认约定了一套目录结构，在通过Maven创建了项目以后，项目的目录结构就是以这套目录结构</p><p>作为模板创建的。虽然Maven提供了很多的模板，但是基本的目录结构都是固定的。</p><pre class="line-numbers language-none"><code class="language-none">Maven约定的目录结构： myFirstMavenProject |-- src |-- |-- main |-- |-- |-- java —— 项目的源代码所在的目录com.kkb.entity com.kkb.dao |-- |-- |-- resources —— 项目的资源文件所在的目录 |-- |-- |-- webapp —— 如果是web项目，则该目录是web应用源代码所在的目录 |-- |-- |-- |--WEB-INF |-- |-- |-- |-- |-- web.xml |-- |-- test |-- |-- |-- java ——测试代码所在的目录,如JUnit测试类 com.kkb.dao.test |-- |-- |-- resources ——测试相关的资源文件所在的目录 |-- target —— 项目构建的输出文件，如.class、.jar、.war文件（不需要创建，会自动 生成） |-- pom.xml ——Maven项目核心配置文件,项目的描述文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Maven的仓库"><a href="#2-2-Maven的仓库" class="headerlink" title="2.2 Maven的仓库"></a>2.2 Maven的仓库</h3><p>在 Maven中可以将仓库理解位一个位置，一个专门存放项目中依赖的第三方库的位置。</p><h4 id="2-2-1-Maven仓库分类"><a href="#2-2-1-Maven仓库分类" class="headerlink" title="2.2.1 Maven仓库分类"></a>2.2.1 Maven仓库分类</h4><p>maven的仓库可以分为<strong>本地仓库和远程仓库</strong>。</p><h5 id="2-2-1-1-本地仓库"><a href="#2-2-1-1-本地仓库" class="headerlink" title="2.2.1.1 本地仓库"></a>2.2.1.1 本地仓库</h5><p>本地仓库相当于一个缓存，在电脑上是一个文件夹，我们可以设置这个文件夹的路径（具体怎么设置会</p><p>在下面的配置体现）,工程第一次需要某种jar包时，会从远程仓库（互联网）下载并保存到本地仓库中</p><p>（在程序员的电脑上），当第二次使用时，不需要去远程仓库下载，会先去本地仓库中找，如果找不到</p><p>才会去远程仓库上下载。</p><p>默认情况下，每个用户在自己的用户目录下都有一个路径名为 .m2/respository/ 的仓库目录。</p><h5 id="2-2-1-2-远程仓库"><a href="#2-2-1-2-远程仓库" class="headerlink" title="2.2.1.2 远程仓库"></a>2.2.1.2 远程仓库</h5><p>远程仓库中分为<strong>中央仓库和私服</strong>两类。</p><p>注：<strong>中央仓库</strong>：中央仓库中的jar包由专业团队（Maven团队）维护，中央仓库中存放了全世界大多数流行的开源软件的</p><p>jar包，是Maven<strong>默认的远程仓库</strong>。</p><p>要浏览中央仓库的内容，Maven 社区提供了一个 URL：<a href="http://search.maven.org/#browse%E3%80%82%E4%BD%BF%E7%94%A8%E8%BF%99%E4%B8%AA">http://search.Maven.org/#browse。使用这个</a></p><p>仓库，开发人员可以搜索所有可以获取的代码库。</p><h4 id="2-2-2-配置本地仓库"><a href="#2-2-2-配置本地仓库" class="headerlink" title="2.2.2 配置本地仓库"></a>2.2.2 配置本地仓库</h4><p>当你运行 Maven 命令，Maven 将下载依赖的文件到你指定的路径中。</p><p>在Maven的安装路径下的conf文件中的setting.xml文件下添加如下内容：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--PS：自己先新建一个文件夹作为本地仓库，路径不要有中文和非法字符。--></span><span class="token comment">&lt;!-- 配置本地仓库 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>E:\developer\MavenRepository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-配置远程仓库镜像"><a href="#2-2-3-配置远程仓库镜像" class="headerlink" title="2.2.3 配置远程仓库镜像"></a>2.2.3 配置远程仓库镜像</h4><p>Maven默认的远程仓库是Maven团队维护的中央仓库，由于网络原因，去中央仓库下载jar包需要到国外</p><p>的网站，不太便捷，速度慢，于是我们可以选择把国内的阿里云的Maven仓库作为中央仓库镜像。</p><p>修改 Maven 根目录下的 conf 文件夹中的 settings.xml 文件，在 mirrors 节点上，添加内容如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置阿里云镜像 --></span> <span class="token comment">&lt;!-- 其中各个标签的含义是：id:当前镜像的唯一标识 mirrorOf:将哪个远程仓库当做中央仓库镜像，中央仓库的id是central，所以将阿里云的Maven仓库 设置为中央仓库镜像时,其值必须设置为central name:为当前的中央仓库镜像起一个名字，便于开发者阅读 url:阿里云Maven仓库的地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://Maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-Maven的核心文件pom-xml"><a href="#2-3-Maven的核心文件pom-xml" class="headerlink" title="2.3 Maven的核心文件pom.xml"></a>2.3 Maven的核心文件pom.xml</h3><p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含</p><p>了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p><p>执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行</p><p>目标。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://Maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://Maven.apache.org/POM/4.0.0 http://Maven.apache.org/xsd/Maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Maven模型的版本 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如 com.companyname.project-group，Maven会将该项目打成的jar包放本地路 径：/com/companyname/project-group --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kkb.Maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 当前项目版本号：同一个项目开发过程中可以发布多个版本，此处标示0.0.1版 --></span>     <span class="token comment">&lt;!-- 当前项目版本号：每个工程发布后可以发布多个版本，依赖时调取不同的版本，使用不同的版本号 当前项目版本号，snapshot为快照版本即非正式版本，release为正式发布版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--打包类型，一般有jar、war、pom等--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 名称：可省略 ,常用于 Maven 生成的文档。--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--项目描述：可省略,常用于 Maven 生成的文档--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 项目依赖构件配置，配置项目依赖构件的坐标 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- 依赖设置 ，可以有多个dependency节点--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token comment">&lt;!-- 依赖组织名称 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token comment">&lt;!-- 依赖项目名称 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 依赖版本名称 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token comment">&lt;!-- 依赖范围：test包下依赖该设置 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 项目构建配置，配置编译、运行插件等。--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-Maven的坐标"><a href="#2-4-Maven的坐标" class="headerlink" title="2.4 Maven的坐标"></a>2.4 Maven的坐标</h3><p>groupId：定义当前Maven项目组织名称</p><p>artifactId：定义实际项目名称</p><p> version：定义当前项目的当前版本或者是所依赖的jar包的版本</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kkb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demoProject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-5-Maven的生命周期"><a href="#2-5-Maven的生命周期" class="headerlink" title="2.5 Maven的生命周期"></a>2.5 Maven的生命周期</h3><p>Maven拥有三套<strong>相互独立</strong>的生命周期,分别是clean、default和site.</p><p>clean Lifecycle： 在进行真正的构建之前进行一些清理工作。 mvn clean</p><p>default Lifecycle： 构建的核心部分，编译，测试，打包，部署等等。</p><p>site Lifecycle： 生成项目报告，站点，发布站点。    </p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装Redis</title>
      <link href="/2022/03/11/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Redis/"/>
      <url>/2022/03/11/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Redis/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/mmexport1646998706456.jpg"></p><h1 id="Redis笔记二"><a href="#Redis笔记二" class="headerlink" title="Redis笔记二"></a>Redis笔记二</h1><h2 id="1-Linux下安装Redis"><a href="#1-Linux下安装Redis" class="headerlink" title="1.Linux下安装Redis"></a>1.Linux下安装Redis</h2><h3 id="1-1环境准备"><a href="#1-1环境准备" class="headerlink" title="1.1环境准备"></a>1.1环境准备</h3><p>我这里使用的是：</p><p>(1)虚拟机版本:VMware® Workstation 16  Pro </p><p>(2) Linux系统:Centos Release 7</p><p>(3) 远程命令端:xshell </p><p>(4)文件传输工具:SecureFXPortable或者xftp等等</p><h3 id="1-2-Redis安装"><a href="#1-2-Redis安装" class="headerlink" title="1.2 Redis安装"></a>1.2 Redis安装</h3><h4 id="1-2-1-Redis的编译环境"><a href="#1-2-1-Redis的编译环境" class="headerlink" title="1.2.1 Redis的编译环境"></a>1.2.1 Redis的编译环境</h4><p>Redis是C语言开发的，安装redis需要先去官网下载源码进行编译，编译需要依赖于GCC编译环境，如果CentOS上 </p><p>没有安装gcc编译环境，需要提前安装，安装命令如下:（这里我们使用root用户处理这些操作） </p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhost ~]# yum install gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示是否下载，选择: y </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311170538273.png"></p><p>如果提示是否安装,选择:y</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311170600180.png"></p><h4 id="1-2-2-Redis的安装"><a href="#1-2-2-Redis的安装" class="headerlink" title="1.2.2 Redis的安装"></a>1.2.2 Redis的安装</h4><p>(1)使用SecureFXPortable或者xftp上传Redis安装文件到Linux目录(随意)</p><p>(2)上传Redis安装文件,这里我上传自建文件夹:/home/yhp/local</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311170706286.png"></p><p>(3)解压redis文件</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhostlocal]#tar-zxvfredis-5.0.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(4)编译Redis(编译,将.c文件编译为.o文件)</p><p>进入解压文件夹,执行make</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311170757973.png"></p><p>编译成功！如果编译过程中出错，先删除安装文件目录，后解压重新编译。</p><p>(5)安装</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhostredis-5.0.5]#makePREFIX&#x3D;&#x2F;home&#x2F;admin&#x2F;myapps&#x2F;redisinstall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明:这里的/home/myapps/redis是自定义的redis安装路径</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311170844463.png"></p><p>(6)安装之后的bin目录</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311170914014.png"></p><p>bin文件夹下的命令:</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311170956149.png"></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311171013099.png"></p><p>(7)Copy文件</p><p>Redis启动需要一个配置文件，可以修改端口号信息。将redis解压的文件夹中的redis.conf文件复制到安装目录</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhostredis-5.0.5]#cpredis.conf&#x2F;home&#x2F;admin&#x2F;myapps&#x2F;redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-Redis的启动"><a href="#1-3-Redis的启动" class="headerlink" title="1.3 Redis的启动"></a>1.3 Redis的启动</h3><h4 id="1-3-1-Redis的前端模式启动"><a href="#1-3-1-Redis的前端模式启动" class="headerlink" title="1.3.1 Redis的前端模式启动"></a>1.3.1 Redis的前端模式启动</h4><p>直接运行bin/redis-server将使永前端模式启动，前端模式启动的缺点是启动完成后，不能再进行其他操作，如果</p><p>要操作必须使用ctrl+c，同时redis-server程序结束，不推荐此方法。</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhostbin]#.&#x2F;redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是启动界面(这个界面只能启动，启动后不能进行其他操作)</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311171222358.png"></p><p>使用ctrl+c退出前端启动。</p><h4 id="1-3-2-Redis的后端启动"><a href="#1-3-2-Redis的后端启动" class="headerlink" title="1.3.2 Redis的后端启动"></a>1.3.2 Redis的后端启动</h4><p>修改redis.conf配置文件，设置:daemonizeyes,然后可以使用后端模式启动。</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhostredis]#viredis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311171305903.png"></p><p>启动时，指定配置文件(这里所在文件夹是redis)</p><pre class="line-numbers language-none"><code class="language-none">root@localhostredis]#.&#x2F;bin&#x2F;redis-server.&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Redis默认端口:6379,通过当前服务进行查看</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhostredis]#ps-ef|grep-iredis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311171419816.png"></p><h4 id="1-3-3-客户端访问Redis"><a href="#1-3-3-客户端访问Redis" class="headerlink" title="1.3.3 客户端访问Redis"></a>1.3.3 客户端访问Redis</h4><p>如果想要通过指令来操作redis，可以使用redis的客户端进行操作,在bin文件夹下运行redis-cli </p><p>该指令默认连接的127.0.0.1，端口号是6379</p><pre class="line-numbers language-none"><code class="language-none">[root@localhostbin]#.&#x2F;redis-cli 127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要连接指定的ip地址以及端口号，则需要按照</p><pre class="line-numbers language-none"><code class="language-none">redis-cli-hip地址-p端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法结构连接。</p><h4 id="1-3-4-向Redis服务器发送命令"><a href="#1-3-4-向Redis服务器发送命令" class="headerlink" title="1.3.4 向Redis服务器发送命令"></a>1.3.4 向Redis服务器发送命令</h4><p>Ping，测试客户端与Redis的连接是否正常，如果连接正常，回收到pong</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;ping PONG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-3-5-退出客户端"><a href="#1-3-5-退出客户端" class="headerlink" title="1.3.5 退出客户端"></a>1.3.5 退出客户端</h4><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;quit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-6-Redis的停止"><a href="#1-3-6-Redis的停止" class="headerlink" title="1.3.6 Redis的停止"></a>1.3.6 Redis的停止</h4><p>(1)强制结束程序。强制终止Redis进程可能会导致redis持久化数据丢失。</p><p>语法:kill-9pid</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311171624973.png"></p><p>(2)正确停止Redis的方式应该是向Redis发送SHUTDOWN命令，方法为（关闭默认的端口)</p><pre class="line-numbers language-none"><code class="language-none">[root@localhostredis]#.&#x2F;bin&#x2F;redis-cli shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311171721370.png"></p><h4 id="1-3-7-第三方工具-redis-desktop-manager-操作Redis"><a href="#1-3-7-第三方工具-redis-desktop-manager-操作Redis" class="headerlink" title="1.3.7 第三方工具(redis-desktop-manager)操作Redis"></a>1.3.7 第三方工具(redis-desktop-manager)操作Redis</h4><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311171740411.png"></p><p>注意:需要关闭linux防火墙并且修改redis.conf文件中的bind参数</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">bind linux的ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时如果通过redis客户端访问的时候，代码如下</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;redis-cli-h192.168.197.132-p6379<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis安装 </tag>
            
            <tag> Linux下的Redis配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构ofRedis</title>
      <link href="/2022/03/11/Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/03/11/Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/mmexport1646998692227.jpg"></p><h1 id="Redis笔记三"><a href="#Redis笔记三" class="headerlink" title="Redis笔记三"></a>Redis笔记三</h1><h2 id="1-Redis数据结构"><a href="#1-Redis数据结构" class="headerlink" title="1.Redis数据结构"></a>1.Redis数据结构</h2><p>Redis是一种基于内存的数据库，并且提供一定的持久化功能，它是一种键值（key-value）数据库，使用key作为索引找到当前缓存的数据，并且返回给程序调用者</p><p>当前的Redis支持6种数据类型，它们分别是字符串（String）、列表（List）、集合（set）、哈希结构（hash）、有序集合（zset）和基数（HyperLogLog）</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311172024642.png"></p><h2 id="2-Redis常用指令"><a href="#2-Redis常用指令" class="headerlink" title="2.Redis常用指令"></a>2.Redis常用指令</h2><p>命令学习网站:<a href="http://doc.redisfans.com/index.html">http://doc.redisfans.com/index.html</a> </p><h3 id="2-1-String类型"><a href="#2-1-String类型" class="headerlink" title="2.1 String类型"></a>2.1 String类型</h3><p>赋值语法：SET key value</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;set k1 zhangsanOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>取值语法：GET key</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;get k1 &quot;zhangsan&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置多个键语法：MSET key value [key value…]</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;mset k2 lisi k3 wangwuOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取多个键值语法：MGET key [key…]</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;mget k2 k3 1)&quot;lisi&quot;2)&quot;wangwu&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>删除语法：DEL key</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;delk3(integer)1127.0.0.1:6379&gt;getk3(nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-字符串数字的递增与递减"><a href="#2-2-字符串数字的递增与递减" class="headerlink" title="2.2 字符串数字的递增与递减"></a>2.2 字符串数字的递增与递减</h3><p>递增数字：当存储的字符串是整数时，Redis提供了一个实用的命令INCR，其作用是让当前键值递增，并返回递增</p><p>后的值。</p><p>递增数字语法:INCR key</p><p>递减数值语法:DECR key</p><p>增加指定的整数语法:INCRBY key increment</p><p>减少指定的整数语法:DECRBY key decrement</p><p>递增</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;incr num(integer)1127.0.0.1:6379&gt;incr num(integer)2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>递减</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;decr num (integer)1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>指定步长：（了解）</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;incrby num22(integer)2127.0.0.1:6379&gt;incrby num23 (integer)5127.0.0.1:6379&gt;decrby num22 (integer)3127.0.0.1:6379&gt;decrby num21 (integer)2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-Hash散列（了解）"><a href="#2-3-Hash散列（了解）" class="headerlink" title="2.3 Hash散列（了解）"></a>2.3 Hash散列（了解）</h3><p>hash叫散列类型，它提供了字段和字段值的映射。字段值只能是字符串类型，不支持散列类型、集合类型等其它类</p><p>型。相当于是对象格式的存储</p><p>赋值语法：HSET key ﬁeld value</p><p>设置一个字段值，HSET命令不区分插入和更新操作，当执行插入操作时HSET命令返回1，当执行更新操作时</p><p>返回0.</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;hset user1 username zhangsan(integer)1127.0.0.1:6379&gt;hset user1 username lisi(integer)0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>取值语法：HGET key ﬁeld</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;hget user1 username &quot;lisi&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置多个字段语法：HMSET key ﬁeld value[ ﬁeld [value…]</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;hmset user1 password 123 age 20 OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>取多个值语法:HMGET key ﬁeld [ﬁeld…]</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;hmget user1 password age 1)&quot;123&quot;2)&quot;20&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获取所有字段值语法：HGET ALL key</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;hget all user1 1)&quot;username&quot;2)&quot;lisi&quot;3)&quot;password&quot;4)&quot;123&quot;5)&quot;age&quot;6)&quot;20&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除字段语法：HDEL key ﬁeld [ﬁeld…]</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;hdel user1 username (integer)1127.0.0.1:6379&gt;hget all user11)&quot;password&quot;2)&quot;123&quot;3)&quot;age&quot;4)&quot;20&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-队列List"><a href="#2-4-队列List" class="headerlink" title="2.4 队列List"></a>2.4 队列List</h3><p>Redis的list是采用来链表来存储,双向链表存储数据，特点：增删快、查询慢(Linkedlist).这个队列是有序的。</p><p>向列表左边增加元素:LPUSH key value [value…]</p><p>从列表左边弹出元素：LPOP key(临时存储，弹出后,从队列中清除)</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;lpush alist a1 a2 123 (integer)3127.0.0.1:6379&gt;lpop alist&quot;123&quot;127.0.0.1:6379&gt;lpop alist&quot;a2&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向列表右边增加元素:RPUSH key value[value…]</p><p>从列表右边弹出元素：RPOP key</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;rpush blist a1 a2 345 (integer)3127.0.0.1:6379&gt;rpop blist&quot;345&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>获取列表中元素的个数:LLEN key</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;llen blist(integer)1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看列表语法：LRANGE key start stop</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;lrange blist0 3 1)&quot;a2&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将返回start、stop之间的所有元素(包含两端的元素),索引从0开始,可以是负数，如：“-1”代表最后的一个元</p><p>素。</p><p>示例:LPUSH comment1‘{“id”:1,“name”:“商品”,”date”:1430295077289}’</p><p>临时存储。先进先出。使用双向链表：</p><p>1，左边进，右边去</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;lpush stulist stu1(integer)1127.0.0.1:6379&gt;lpush stulist stu2(integer)2127.0.0.1:6379&gt;lpush stulist stu3 (integer)3127.0.0.1:6379&gt;lpush stulist stu4 (integer)4127.0.0.1:6379&gt;lpush stulist stu4(integer)5127.0.0.1:6379&gt;lpush stulist stu5 (integer)6127.0.0.1:6379&gt;rpop stulist&quot;stu1&quot;127.0.0.1:6379&gt;rpop stulist&quot;stu2&quot;127.0.0.1:6379&gt;rpop stulist&quot;stu3&quot;127.0.0.1:6379&gt;rpop stulist&quot;stu4&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2，右边进，左边去</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;rpush clist stu1(integer)1127.0.0.1:6379&gt;rpush clist stu2 (integer)2127.0.0.1:6379&gt;rpush clist stu3 (integer)3127.0.0.1:6379&gt;rpush clist stu4(integer)4127.0.0.1:6379&gt;rpush clist stu5 (integer)5127.0.0.1:6379&gt;lpop clist&quot;stu1&quot;127.0.0.1:6379&gt;lpopclist&quot;stu2&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-Set集合"><a href="#2-5-Set集合" class="headerlink" title="2.5 Set集合"></a>2.5 Set集合</h3><p>Set集合类型：无序、不可重复</p><p>增加元素语法：SADD key member[member…]</p><p>删除元素语法：SREM key member[member…]</p><p>获得集合中的所有元素：smembers key</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;saddu listuser1 (integer)1127.0.0.1:6379&gt;saddu listuser2 (integer)1127.0.0.1:6379&gt;saddu listuser3 (integer)1127.0.0.1:6379&gt;smembers ulist1)&quot;user2&quot;2)&quot;user3&quot;3)&quot;user1&quot;127.0.0.1:6379&gt;srem ulist user2(integer)1127.0.0.1:6379&gt;smembers ulist1)&quot;user3&quot;2)&quot;user1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断元素是否在集合中：SISMEMBER key member</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;smember sulist1)&quot;user3&quot;2)&quot;user1&quot;127.0.0.1:6379&gt;sismember ulist user2(integer)0127.0.0.1:6379&gt;sismember ulist user1 (integer)1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-Zset有序集合（了解）"><a href="#2-6-Zset有序集合（了解）" class="headerlink" title="2.6 Zset有序集合（了解）"></a>2.6 Zset有序集合（了解）</h3><p>Sortedset又叫zset,是有序集合，可排序的，但是唯一。Sortedset和set的不同之处，是会给set中的元素添加一个</p><p>分数，然后通过这个分数进行排序。</p><p>增加元素：ZADD key score member [score member…]</p><p>向有序集合中加入一个元素和该元素的分数(score)，如果该元素已经存在则会用新的分数替换原有的分数。</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;zadd num 120 stu 130 stu 240 stu3(integer)3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加带分数(可用学生成绩，销售数量等来做分数,方便计算排序)：</p><p>获得排名在某个范围的元素列表,并按照元素分数降序返回</p><p>语法：ZREVRANGE key start stop[WITHSCORES]</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;zadd num1 10 stu4(integer)1127.0.0.1:6379&gt;zrevrange num1 0 41)&quot;stu3&quot;2)&quot;stu2&quot;3)&quot;stu1&quot;4)&quot;stu4&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取元素的分数:ZSCORE key member</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;zscore num1 stu2&quot;30&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除元素ZREM key member [member…]</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;zrem num1 stu2(integer)1127.0.0.1:6379&gt;zrevrange num1 0 41)&quot;stu3&quot;2)&quot;stu1&quot;3)&quot;stu4&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得元素的分数的可以在命令尾部加上WITHSCORES参数</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;zrevrange num1 0 4 withscores1)&quot;stu3&quot;2)&quot;40&quot;3)&quot;stu1&quot;4)&quot;20&quot;5)&quot;stu4&quot;6)&quot;10&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：商品销售量；学生排名等</p><p>给某一个属性加分数或减分，减分时使用负数:</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;zincrby num1 2 stu1&quot;22&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例:</p><p>商品编号1001的销量是9，商品编号1002的销量是1</p><pre class="line-numbers language-none"><code class="language-none">ZADD sellsort 9 1001 10 1002<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>商品编号1001的销量加1</p><pre class="line-numbers language-none"><code class="language-none">ZINCRBY sellsort 1 1001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>商品销量排序队列中前3名：</p><pre class="line-numbers language-none"><code class="language-none">zrevrange sellsort 0 2 withscores<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>学生排名前3名：</p><pre class="line-numbers language-none"><code class="language-none">zrevrange stus 0 2 withscores<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-7-HyperLogLog（了解）"><a href="#2-7-HyperLogLog（了解）" class="headerlink" title="2.7 HyperLogLog（了解）"></a>2.7 HyperLogLog（了解）</h3><p>HyperLogLog是一种使用随机化的算法，以少量内存提供集合中唯一元素数量的近似值。</p><p>HyperLogLog可以接受多个元素作为输入，并给出输入元素的基数估算值：</p><p>基数：集合中不同元素的数量。比如{‘apple’,‘banana’,‘cherry’,‘banana’,‘apple’}的基数就是3。</p><p>估算值：算法给出的基数并不是精确的，可能会比实际稍微多一些或者稍微少一些，但会控制在合理的范围</p><p>之内。</p><p>HyperLogLog的优点是，即使输入元素的数量或者体积非常非常大，计算基数所需的空间总是固定的、并且是很</p><p>小的。</p><p>在Redis里面，每个HyperLogLog键只需要花费12KB内存，就可以计算接近2^64个不同元素的基数。这和计</p><p>算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为HyperLogLog只会根据输入元素来计算基数，而不会储存输入元素本身，所以HyperLogLog不能像</p><p>集合那样，返回输入的各个元素。</p><p>HyperLogLog相关的一些基本命令。</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311174728197.png"></p><p>示例:</p><pre class="line-numbers language-none"><code class="language-none">redis 127.0.0.1:6379&gt;PFADD mykey &quot;redis&quot;1)(integer)1redis 127.0.0.1:6379&gt;PFADD mykey &quot;java&quot;1)(integer)1redis 127.0.0.1:6379&gt;PFADD mykey &quot;mysql&quot;1)(integer)1redis 127.0.0.1:6379&gt;PFCOUNT mykey(integer)3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-其他命令"><a href="#2-8-其他命令" class="headerlink" title="2.8 其他命令"></a>2.8 其他命令</h3><p>(1)keys返回满足给定pattern的所有key</p><pre class="line-numbers language-none"><code class="language-none">keys user* &#x2F;&#x2F;查询以user开头的keykeys* &#x2F;&#x2F;查询所有的key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(2)exists确认一个key是否存在,存在返回1</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;exists num2 &#x2F;&#x2F;语法:existskey(integer)1127.0.0.1:6379&gt;exists num23(integer)0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(3)del删除一个key</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;del num1&#x2F;&#x2F;语法:delkey删除存在的key返回1，不存在的key返回0 (integer)1127.0.0.1:6379&gt;del num23(integer)0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(4)rename重命名key:rename oldkey newkey</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;rename k1 k11OK127.0.0.1:6379&gt;keys*1)&quot;ulist&quot;2)&quot;k2&quot;3)&quot;user1&quot;4)&quot;num2&quot;5)&quot;clist&quot;6)&quot;k11&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(5)type返回值的类型：typekey</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;type ulistset127.0.0.1:6379&gt;type k11string127.0.0.1:6379&gt;type alist list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(6)EXPIRE key seconds</p><p>设置key的生存时间（单位：秒）key在多少秒后会自动删除</p><p>TTL key查看key剩余的生存时间</p><p>PERSIST key清除生存时间</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;set a1 123OK127.0.0.1:6379&gt;get a1&quot;123&quot;127.0.0.1:6379&gt;expire a1 60(integer)1127.0.0.1:6379&gt;ttl a1(integer)56127.0.0.1:6379&gt;ttl a1(integer)51127.0.0.1:6379&gt;ttl sa1(integer)47<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(7)获取服务器信息和统计:info</p><p>(8)删除当前选择数据库中的所有key：ﬂushdb</p><p>(9)删除所有数据库中的所有key:ﬂushall</p><h3 id="2-9-Redis的多数据库"><a href="#2-9-Redis的多数据库" class="headerlink" title="2.9 Redis的多数据库"></a>2.9 Redis的多数据库</h3><p>一个redis实例key包括多个数据库，客户端可以指定连接某个redis实例的哪个数据库，就好比一个mysql中创建多</p><p>个数据库，客户端连接时指定连接哪个数据库。</p><p>一个redis实例最多可提供16个数据库，下标从0-15，客户端默认连接第0号数据库，也可以通过select选择连接哪</p><p>个数据库，如下连接1号库:</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis的几种数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的进阶操作</title>
      <link href="/2022/03/11/Redis%E7%9A%84%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/03/11/Redis%E7%9A%84%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/mmexport1646998689126.jpg"></p><h1 id="Redis笔记四"><a href="#Redis笔记四" class="headerlink" title="Redis笔记四"></a>Redis笔记四</h1><h2 id="1-Redis的事务管理"><a href="#1-Redis的事务管理" class="headerlink" title="1.Redis的事务管理"></a>1.Redis的事务管理</h2><p>Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证： </p><p>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客 </p><p>户端发送来的命令请求所打断。 </p><p>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。 </p><p>一个事务从开始到执行会经历以下三个阶段： </p><p>开始事务。命令入队。 </p><p>执行事务。 </p><p><strong>实例</strong></p><p>以下是一个事务的例子， 它先以 MULTI 开始一个事务， 然后将多个命令入队到事务中， 最后由 EXEC 命令触发事 </p><p>务， 一并执行事务中的所有命令： </p><p>示例1: </p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; multi OK127.0.0.1:6379&gt; set bookname javaQUEUED 127.0.0.1:6379&gt; set bookname c++ QUEUED 127.0.0.1:6379&gt; set bookname html QUEUED127.0.0.1:6379&gt; exec1) OK 2) OK 3) OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2: </p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt;multi OK127.0.0.1:6379&gt; set u1 user1QUEUED127.0.0.1:6379&gt; get u1 QUEUED 127.0.0.1:6379&gt; sadd tag c++ html javaQUEUED127.0.0.1:6379&gt; smembers tag QUEUED127.0.0.1:6379&gt; exec1) OK2) &quot;user1&quot; 3) (integer) 34)  1)&quot;java&quot; 2) &quot;html&quot;3) &quot;c++&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Redis发布订阅者模式"><a href="#2-Redis发布订阅者模式" class="headerlink" title="2. Redis发布订阅者模式"></a>2. Redis发布订阅者模式</h2><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。 </p><p>Redis 客户端可以订阅任意数量的频道。 </p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311175855202.png"> </p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311175921850.png"> </p><p>在我们实例中我们创建了订阅频道名为 redisMessage: </p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; subscribe redisMessageReading messages... (press Ctrl-C to quit) 1) &quot;subscribe&quot; 2) &quot;redisMessage&quot; 3) (integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，我们先重新开启个 redis 客户端，然后在同一个频道 redisMessage 发布两次消息，订阅者就能接收到消 </p><p>息。</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; publish redisMessage &quot;demo1 test&quot; (integer) 1 127.0.0.1:6379&gt; publish redisMessage &quot;demo2 test&quot; (integer) 1 127.0.0.1:6379&gt; publish redisMessage &quot;demo3 test&quot; (integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>订阅者的客户端会显示如下消息 </p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; subscribe redisMessage Reading messages... (press Ctrl-C to quit)1) &quot;subscribe&quot; 2) &quot;redisMessage&quot; 3) (integer) 1 1) &quot;message&quot;2) &quot;redisMessage&quot; 3) &quot;demo1 test&quot; 1) &quot;message&quot;2) &quot;redisMessage&quot; 3) &quot;demo2 test&quot; 1) &quot;message&quot; 2) &quot;redisMessage&quot; 3) &quot;demo3 test&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Jedis连接Redis"><a href="#3-Jedis连接Redis" class="headerlink" title="3. Jedis连接Redis"></a>3. Jedis连接Redis</h2><p><strong>第一步：创建项目，导入依赖</strong> </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意： </p><p>1）确认远程服务器是否可以ping通: ping vm的ip地址 </p><p>2)确认防火墙是否关闭或放行 </p><p><strong>service iptables stop</strong> </p><p><strong>service iptables status</strong> </p><p><strong>第二步：链接服务器</strong></p><p><strong>方案一</strong> </p><p>单实例链接 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>“ip地址”<span class="token punctuation">,</span> 端口号<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立链接</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>核心代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Jedis</span> jedis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.197.129"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置值 </span>    jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"java001"</span><span class="token punctuation">,</span><span class="token string">"java工程师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> java001 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>java001<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见异常: </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20220311180518047.png"></p><p>解决方案: </p><p>虚拟机客户端连接的ip是127.0.0.1,意思是连接的本机,其他机器无法连接,这里需要修改配置文件,将连接地址改为虚 </p><p>拟机的地址,就可以了. </p><p>修改redis.conf文件里面的 bind 连接地址,将连接地址改为自己虚拟机的ip </p><pre class="line-numbers language-none"><code class="language-none">bind 192.168.197.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新启动服务,Jedis就可以正常连上了 </p><p>Idea中控制台打印：</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311180553905.png"></p><p><strong>方案二：连接池</strong> </p><p><strong>Jedis连接池连接，后面会使用Spring配置文件来整合</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1.获取连接池配置对象,设置配置项 </span><span class="token class-name">JedisPoolConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.1最大的连接数</span>config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.2最大的空闲 </span>config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.获取连接池</span><span class="token class-name">JedisPool</span> jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">"192.168.197.129"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">J</span>edis jedis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.设置数据</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">String</span> name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>jedis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 4.虚拟机关闭的时候，释放资源 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>jedisPool <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>jedisPool<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Redis持久化方式"><a href="#4-Redis持久化方式" class="headerlink" title="4. Redis持久化方式"></a>4. Redis持久化方式</h2><h3 id="4-1-什么是Redis持久化"><a href="#4-1-什么是Redis持久化" class="headerlink" title="4.1 什么是Redis持久化"></a>4.1 什么是Redis持久化</h3><p>由于redis的值放在内存中，为防止突然断电等特殊情况的发生，需要对数据进行持久化备份。即将内存数据保存 </p><p>到硬盘。</p><h3 id="4-2-Redis持久化存储方式"><a href="#4-2-Redis持久化存储方式" class="headerlink" title="4.2 Redis持久化存储方式"></a>4.2 Redis持久化存储方式</h3><h4 id="4-2-1-RDB持久化"><a href="#4-2-1-RDB持久化" class="headerlink" title="4.2.1 RDB持久化"></a>4.2.1 RDB持久化</h4><p>RDB 是以二进制文件，是在某个时间点将数据写入一个临时文件，持久化结束后，用这个临时文件替换上次持久化 </p><p>的文件，达到数据恢复。 </p><p>优点：使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能 </p><p>缺点：RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合 </p><p>数据要求不严谨的时候 </p><p>这里说的这个执行数据写入到临时文件的时间点是可以通过配置来自己确定的，通过配置redis 在 n 秒内如果超过 </p><p>m 个 key 被修改这执行一次 RDB 操作。这个操作就类似于在这个时间点来保存一次 Redis 的所有数据，一次快照 </p><p>数据。所有这个持久化方法也通常叫做 snapshots。 </p><p>RDB 默认开启，redis.conf 中的具体配置参数如下</p><pre class="line-numbers language-none"><code class="language-none">#dbfilename：持久化数据存储在本地的文件dbfilename dump.rdb #dir：持久化数据存储在本地的路径，如果是在&#x2F;redis&#x2F;redis-5.0.5&#x2F;src下启动的redis-cli，则数据会存储在当前 src目录下 dir .&#x2F; ##snapshot触发的时机，save##如下为900秒后，至少有一个变更操作，才会snapshot ##对于此值的设置，需要谨慎，评估系统的变更操作密集程度 ##可以通过“save”来关闭snapshot功能 #save时间，以下分别表示更改了1个key时间隔900s进行持久化存储；更改了10个key300s进行存储；更改10000个 key60s进行存储。save 900 1 save 300 10 save 60 10000 ##当snapshot时出现错误无法继续时，是否阻塞客户端“变更操作”，“错误”可能因为磁盘已满&#x2F;磁盘故障&#x2F;OS级别异常等 stop-writes-on-bgsave-error yes ##是否启用rdb文件压缩，默认为“yes”，压缩往往意味着“额外的cpu消耗”，同时也意味这较小的文件尺寸以及较短的网 络传输时间 rdbcompression yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:测试时使用root用户操作 </p><h4 id="4-2-2-AOF持久化"><a href="#4-2-2-AOF持久化" class="headerlink" title="4.2.2 AOF持久化"></a>4.2.2 AOF持久化</h4><p>Append-Only File，将“操作 + 数据”以格式化指令的方式追加到操作日志文件的尾部，在 append 操作返回后(已经 </p><p>写入到文件或者将要写入)，才进行实际的数据变更，“日志文件”保存了历史所有的操作过程；当 server 需要数据 </p><p>恢复时，可以直接 replay 此日志文件，即可还原所有的操作过程。AOF 相对可靠，AOF 文件内容是字符串，非常 </p><p>容易阅读和解析。 </p><p>优点：可以保持更高的数据完整性，如果设置追加 fifile 的时间是 1s，如果 redis 发生故障，最多会丢失 1s 的数 </p><p>据；且如果日志写入不完整支持 redis-check-aof 来进行日志修复；AOF 文件没被 rewrite 之前（文件过大时会对 </p><p>命令进行合并重写），可以删除其中的某些命令（比如误操作的 flflushall）。 </p><p>缺点：AOF 文件比 RDB 文件大，且恢复速度慢。 </p><p>我们可以简单的认为 AOF 就是日志文件，此文件只会记录“变更操作”(例如：set/del 等)，如果 server 中持续的大 </p><p>量变更操作，将会导致 AOF 文件非常的庞大，意味着 server 失效后，数据恢复的过程将会很长；事实上，一条数 </p><p>据经过多次变更，将会产生多条 AOF 记录，其实只要保存当前的状态，历史的操作记录是可以抛弃的；因为 AOF </p><p>持久化模式还伴生了“AOF rewrite”。</p><p>AOF 的特性决定了它相对比较安全，如果你期望数据更少的丢失，那么可以采用 AOF 模式。如果 AOF 文件正在被 </p><p>写入时突然 server 失效，有可能导致文件的最后一次记录是不完整，你可以通过手工或者程序的方式去检测并修 </p><p>正不完整的记录，以便通过 aof 文件恢复能够正常；同时需要提醒，如果你的 redis 持久化手段中有 aof，那么在 </p><p>server 故障失效后再次启动前，需要检测 aof 文件的完整性。</p><p>AOF 默认关闭，开启方法，修改配置文件 <strong>reds.conf：appendonly yes</strong> </p><p>AOF 是文件操作，对于变更操作比较密集的 server，那么必将造成磁盘 IO 的负荷加重；此外 linux 对文件操作采 </p><p>取了“延迟写入”手段，即并非每次 write 操作都会触发实际磁盘操作，而是进入了 buffffer 中，当 buffffer 数据达到 </p><p>阀值时触发实际写入(也有其他时机)，这是 linux 对文件系统的优化，但是这却有可能带来隐患，如果 buffffer 没有 </p><p>刷新到磁盘，此时物理机器失效(比如断电)，那么有可能导致最后一条或者多条 aof 记录的丢失。通过上述配置文 </p><p>件，可以得知 redis 提供了 3 中 aof 记录同步选项： </p><p>always：每一条 aof 记录都立即同步到文件，这是最安全的方式，也以为更多的磁盘操作和阻塞延迟，是 IO 开支 </p><p>较大。 </p><p>everysec：每秒同步一次，性能和安全都比较中庸的方式，也是 redis 推荐的方式。如果遇到物理服务器故障，有 </p><p>可能导致最近一秒内 aof 记录丢失(可能为部分丢失)。 </p><p>no：redis 并不直接调用文件同步，而是交给操作系统来处理，操作系统可以根据 buffffer 填充情况 / 通道空闲时间 </p><p>等择机触发同步；这是一种普通的文件操作方式。性能较好，在物理服务器故障时，数据丢失量会因 OS 配置有 </p><p>关。</p><p>其实，我们可以选择的太少，everysec 是最佳的选择。如果你非常在意每个数据都极其可靠，建议你选择一款“关 </p><p>系性数据库”。 </p><h4 id="4-2-3-AOF和RDB的区别"><a href="#4-2-3-AOF和RDB的区别" class="headerlink" title="4.2.3 AOF和RDB的区别"></a>4.2.3 AOF和RDB的区别</h4><p>RDB: </p><p>RDB是在某个时间点将数据写入一个临时文件，持久化结束后，用这个临时文件替换上次持久化的文件，达到数据 </p><p>恢复。优点：使用单独子进程来进行持久化，主进程不会进行任何IO操作，保证了redis的高性能 </p><p>缺点：RDB是间隔一段时间进行持久化，如果持久化之间redis发生故障，会发生数据丢失。所以这种方式更适合 </p><p>数据要求不严谨的时候 </p><p>AOF： </p><p>Append-only fifile，将“操作 + 数据”以格式化指令的方式追加到操作日志文件的尾部，在append操作返回后(已经写 </p><p>入到文件或者即将写入)，才进行实际的数据变更，“日志文件”保存了历史所有的操作过程；当server需要数据恢复 </p><p>时，可以直接replay此日志文件，即可还原所有的操作过程。AOF相对可靠，它和mysql中bin.log、apache.log、 </p><p>zookeeper中txn-log简直异曲同工。AOF文件内容是字符串，非常容易阅读和解析。 </p><p>优点：可以保持更高的数据完整性，如果设置追加fifile的时间是1s，如果redis发生故障，最多会丢失1s的数据；且 </p><p>如果日志写入不完整支持redis-check-aof来进行日志修复；AOF文件没被rewrite之前（文件过大时会对命令进行 </p><p>合并重写），可以删除其中的某些命令（比如误操作的flflushall）。 </p><p>缺点：AOF文件比RDB文件大，且恢复速度慢。</p><h2 id="5-Redis主从复制"><a href="#5-Redis主从复制" class="headerlink" title="5. Redis主从复制"></a>5. Redis主从复制</h2><ul><li>持久化保证了即使redis服务重启也不会丢失数据，但是当redis服务器的硬盘损坏了可能会导致数据丢失，通 过redis的主从复制机制就可以避免这种单点故障（单台服务器的故障）。 </li><li>主redis中的数据和从上的数据保持实时同步,当主redis写入数据时通过主从复制机制复制到两个从服务上。 </li><li>主从复制不会阻塞master，在同步数据时，master 可以继续处理client 请求. </li><li>主机master配置:无需配置</li></ul><p>推荐主从模式同步数据: </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311182021943.png"> </p><p>工作中一般选用：一主两从或一主一从 </p><p>数据会同步到从服务器。在这个集群中的几台服务器上都有同样的数据。</p><p><strong>主从搭建步骤</strong></p><p>主机：不用配置。仅仅只需要配置从机,从机slave配置:(这里是伪集群) </p><p>第一步：复制出一个从机,注意使用root用户</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost myapps]# cp redis&#x2F; redis1 -r [root@localhost myapps]# ll 总用量 40drwxr-xr-x. 3 root root 4096 2月 1 09:26 redis drwxr-xr-x. 3 root root 4096 2月 1 09:27 redis1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：修改从机的redis.conf </p><p>语法：replicaof // replicaof 主机ip 主机端口号 </p><p>提示:检索文件: 输入:/replicaof 当前页没有时，输入n，查找下一页 </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311182133587.png"> </p><p>第三步：修改从机的port地址为6380 </p><p>在从机redis.conf中修改 </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311182157564.png"></p><p>第四步：清除从机中的持久化文件</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost bin]# rm -rf appendonly.aof dump.rdb [root@localhost bin]# ll 总用量 15440 -rwxr-xr-x. 1 root root 4588902 7月 1 09:27 redis-benchmark -rwxr-xr-x. 1 root root 22225 7月 1 09:27 redis-check-aof -rwxr-xr-x. 1 root root 45443 7月 1 09:27 redis-check-dump-rwxr-xr-x. 1 root root 4691809 7月 1 09:27 redis-cli -rwxrwxrwx. 1 root root 12 7月 1 09:27 redis-sentinel -&gt; redis-server-rwxr-xr-x. 1 root root 6450337 7月 1 09:27 redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步：启动从机</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost redis1]# .&#x2F;bin&#x2F;redis-server .&#x2F;redis.conf <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第六步：启动6380的客户端</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost redis1]# .&#x2F;bin&#x2F;redis-cli -p 6380 127.0.0.1:6380&gt; keys * 1) &quot;mylist&quot; 2) &quot;num&quot; 3) &quot;bookCate1&quot; 4) &quot;newbook&quot;127.0.0.1:6380&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>停止客户端: ./bin/redis-cli -p 6380 shutdown </p><p>注意： </p><p><strong>Ø</strong> <strong>主机一旦发生增删改操作，那么从机会自动将数据同步到从机中</strong> </p><p><strong>Ø</strong> <strong>从机不能执行写操作只能读</strong></p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6380&gt; get username &quot;hehe&quot; 127.0.0.1:6380&gt; set username haha (error) READONLY You can&#39;t write against a read only slave.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>复制的过程原理</strong> </p><p>当从库和主库建立MS(master slaver)关系后，会向主数据库发送SYNC命令； </p><p>主库接收到SYNC命令后会开始在后台保存快照（RDB持久化过程），并将期间接收到的写命令缓存起来； </p><p>快照完成后,主Redis会将快照文件和所有缓存的写命令发送给从Redis； </p><p>从Redis接收到后，会载入快照文件并且执行收到的缓存命令； </p><p>主Redis每当接收到写命令时就会将命令发送从Redis，保证数据的一致；【内部完成,所以<strong>不支持客户端在从</strong> </p><p><strong>机人为写数据</strong>。】 </p><p><strong>复制架构中出现宕机情况</strong>?</p><p><strong>从Redis宕机:重启就好</strong> </p><p><strong>主Redis宕机</strong>:从数据库(从机)中执行SLAVEOF NO ONE命令，断开主从关系并且提升为主库继续服务[把一个从做为 </p><p>主机，这个时候新主机[之前的从机]就具备写入的能力]；主服务器修好后，重新启动后，执行SLAVEOF命令，将其 </p><p>设置为从库[老主机设置为从机]。[手动执行，过程复杂，容易出错。]是否有更好的方案？ </p><h2 id="6-Redis哨兵模式"><a href="#6-Redis哨兵模式" class="headerlink" title="6. Redis哨兵模式"></a>6. Redis哨兵模式</h2><p><strong>哨兵模式</strong>：给集群分配一个站岗的。 </p><p>哨兵的作用就是对Redis系统的运行情况监控，它是一个独立进程,它的功能： </p><p>\1. 监控主数据库和从数据库是否运行正常； </p><p>\2. 主数据出现故障后自动将从数据库转化为主数据库； </p><p>如果主机宕，开启选举工作，选择一个从做主机。环境准备：一主两从，启动任一从机时，启动哨兵模式 </p><p>虽然哨兵(sentinel) 释出为一个单独的可执行文件 redis-sentinel ,但实际上它只是一个运行在特殊模式下的 Redis </p><p>服务器，你可以在启动一个普通 Redis 服务器时通过给定 –sentinel 选项来启动哨兵(sentinel)。 </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311182622457.png"></p><h2 id="7-Redis集群方案"><a href="#7-Redis集群方案" class="headerlink" title="7. Redis集群方案"></a>7. Redis集群方案</h2><p>有点多！！！不写了，详细百度咯</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的基本介绍</title>
      <link href="/2022/03/11/Redis%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/03/11/Redis%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/mmexport1646998713127.jpg"></p><h1 id="Redis笔记一"><a href="#Redis笔记一" class="headerlink" title="Redis笔记一"></a>Redis笔记一</h1><h2 id="1-了解Nosql"><a href="#1-了解Nosql" class="headerlink" title="1. 了解Nosql"></a>1. 了解Nosql</h2><h3 id="1-1-什么是Nosql"><a href="#1-1-什么是Nosql" class="headerlink" title="1.1 什么是Nosql"></a>1.1 什么是Nosql</h3><p>NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是 </p><p>超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的 </p><p>数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合，多重数据 </p><p>种类带来的挑战，尤其是大数据应用难题。 </p><p>NoSQL最常见的解释是“non-relational”， “Not Only SQL”也被很多人接受。NoSQL仅仅是一个概念，泛指非关系 </p><p>型的数据库，区别于关系数据库，它们不保证关系数据的ACID特性。 </p><h3 id="1-2-为什么要使用Nosql"><a href="#1-2-为什么要使用Nosql" class="headerlink" title="1.2 为什么要使用Nosql"></a>1.2 为什么要使用Nosql</h3><p>传统的数据库遇到的瓶颈 </p><p>传统的关系数据库具有不错的性能，高稳定型，久经历史考验，而且使用简单，功能强大，同时也积累 了大量的 </p><p>成功案例。在互联网领域，MySQL成为了绝对靠前的王者，毫不夸张的说，MySQL为互联网 的发展做出了卓越的 </p><p>贡献。</p><p>在90年代，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付。在那个时候，更多的都是 静态 </p><p>网页，动态交互类型的网站不多。 </p><p>到了最近10年，网站开始快速发展。火爆的论坛、博客、sns、微博逐渐引领web领域的潮流。在初 期，论坛的流 </p><p>量其实也不大，如果你接触网络比较早，你可能还记得那个时候还有文本型存储的论坛程 序，可以想象一般的论坛 </p><p>的流量有多大。</p><p>现在网站的特点: </p><p>(1) 高并发读写 </p><p>Web2.0网站，数据库并发负载非常高，往往达到每秒上万次的读写请求 </p><p>(2) 高容量存储和高效存储 </p><p>Web2.0网站通常需要在后台数据库中存储海量数据，如何存储海量数据并进行高效的查询往往是一个 挑战 </p><p>(3) 高扩展性和高可用性 </p><p>随着系统的用户量和访问量与日俱增，需要数据库能够很方便的进行扩展、维护 </p><h3 id="1-3-NoSql数据库的优势"><a href="#1-3-NoSql数据库的优势" class="headerlink" title="1.3 NoSql数据库的优势"></a>1.3 NoSql数据库的优势</h3><p>(1) 易扩展NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。<strong>数据之间无关系</strong>，这 样就 </p><p>非常容易扩展。也无形之间，在架构的层面上带来了可扩展的能力。 </p><p>(2)大数据量，高性能 </p><p>NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性， 数据 </p><p>库的结构简单。一般MySQL使用Query Cache，每次表的更新Cache就失效，是一种大粒度的 Cache，在针对 </p><p>web2.0的交互频繁的应用，Cache性能不高。而NoSQL的Cache是记录级的，是一种细 粒度的Cache，所以 </p><p>NoSQL在这个层面上来说就要性能高很多了。 </p><p>(3)灵活的数据模型 </p><p>NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删 字段 </p><p>是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦。这点在大数据量 的web2.0时代 </p><p>尤其明显。 </p><p>(4) 高可用 </p><p>NoSQL在不太影响性能的情况，就可以方便的实现高可用的架构。比如Cassandra，HBase模型，通过 复制 </p><p>模型也能实现高可用。 </p><h3 id="1-4-常见的NoSql的产品"><a href="#1-4-常见的NoSql的产品" class="headerlink" title="1.4 常见的NoSql的产品"></a>1.4 常见的NoSql的产品</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311165908000.png"></p><h3 id="1-5各个产品的区别"><a href="#1-5各个产品的区别" class="headerlink" title="1.5各个产品的区别"></a>1.5各个产品的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20220311170017629.png"></p><h2 id="2-Redis介绍"><a href="#2-Redis介绍" class="headerlink" title="2. Redis介绍"></a>2. Redis介绍</h2><h3 id="2-1-什么是Redis"><a href="#2-1-什么是Redis" class="headerlink" title="2.1 什么是Redis"></a>2.1 什么是Redis</h3><p>全称：REmote DIctionary Server（远程字典服务器）。是完全开源免费的，用C语言编写的， 遵守BCD协议。是 </p><p>一个高性能的(key/value)分布式内存数据库， </p><p>基于内存运行并支持持久化的NoSQL数据库，是当前最热门的NoSql数据库之一,也被人们称为数据结构服务器。 </p><p>Redis 与其他 key - value 缓存产品有以下三个特点 </p><p>(1) Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用 </p><p>(2) Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储 </p><p>(3) Redis支持数据的备份，即master-slave(主从)模式的数据备份 </p><h3 id="2-2-Redis的优势"><a href="#2-2-Redis的优势" class="headerlink" title="2.2 Redis的优势"></a>2.2 Redis的优势</h3><p>(1) 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。 </p><p>(2) 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。 </p><p>(3) 原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。 </p><p>(4) 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性 </p><p>(5) 采用<strong>单线程</strong>，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不 </p><p>用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗； </p><p>(6) 使用多路I/O复用模型，非阻塞IO； </p><h3 id="2-3-Redis的应用场景"><a href="#2-3-Redis的应用场景" class="headerlink" title="2.3 Redis的应用场景"></a>2.3 Redis的应用场景</h3><p>(1) 缓存(数据查询，短连接，新闻内容，商品内容等)，使用最多 </p><p>(2) 聊天室在线好友列表 </p><p>(3) 任务队列(秒杀，抢购，12306等) </p><p>(4) 应用排行榜 </p><p>(5) 网站访问统计 </p><p>(6) 数据过期处理(可以精确到毫秒) </p><p>(7) 分布式集群架构中的session问题 </p><h3 id="2-4-Redis下载"><a href="#2-4-Redis下载" class="headerlink" title="2.4 Redis下载"></a>2.4 Redis下载</h3><p>1）Http://redis.io/ 英文地址 </p><p>2）Http://<a href="http://www.redis.cn/">www.redis.cn/</a> 中文地址 </p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX</title>
      <link href="/2021/11/23/AJAX/"/>
      <url>/2021/11/23/AJAX/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211123172832648.png"></p><h1 id="⼀、Ajax技术与原理"><a href="#⼀、Ajax技术与原理" class="headerlink" title="⼀、Ajax技术与原理"></a>⼀、Ajax技术与原理</h1><h2 id="1-1-Ajax简介"><a href="#1-1-Ajax简介" class="headerlink" title="1.1 Ajax简介"></a>1.1 Ajax简介</h2><p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。<br>​AJAX 不是新的编程语⾔，⽽是⼀种使⽤现有标准的新⽅法。<br>​AJAX 是与服务器交换数据并更新部分⽹⻚的艺术，在不重新加载整个⻚⾯的情况下。</p><h2 id="1-2-Ajax所包含的技术"><a href="#1-2-Ajax所包含的技术" class="headerlink" title="1.2 Ajax所包含的技术"></a>1.2 Ajax所包含的技术</h2><p>⼤家都知道ajax并⾮⼀种新的技术，⽽是⼏种原有技术的结合体。它由下列技术组合⽽成。</p><pre class="line-numbers language-none"><code class="language-none">1.使⽤CSS和XHTML来表示。2.使⽤DOM模型来交互和动态显示。3.使⽤XMLHttpRequest来和服务器进⾏异步通信。4.使⽤javascript来绑定和调⽤。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>AJAX 的核⼼是 XMLHttpRequest 对象。<br>不同的浏览器创建 XMLHttpRequest 对象的⽅法是有差异的。<br><strong>IE 浏览器使⽤ ActiveXObject，⽽其他的浏览器使⽤名为 XMLHttpRequest 的 JavaScript 内建对象</strong></p><h2 id="1-3-Ajax的⼯作原理"><a href="#1-3-Ajax的⼯作原理" class="headerlink" title="1.3 Ajax的⼯作原理"></a>1.3 Ajax的⼯作原理</h2><p>​    Ajax的⼯作原理相当于在⽤户和服务器之间加了—个中间层(AJAX引擎)，使⽤户操作与服务器响应异步<br>化。并不是所有的⽤户请求都提交给服务器。像—些数据验证和数据处理等都交给Ajax引擎⾃⼰来做,，<br>只有确定需要从服务器读取新数据时再由Ajax引擎代为向服务器提交请求。</p><h2 id="1-4-XMLHttpRequest常⽤属性"><a href="#1-4-XMLHttpRequest常⽤属性" class="headerlink" title="1.4 XMLHttpRequest常⽤属性"></a>1.4 XMLHttpRequest常⽤属性</h2><h3 id="1-onreadystatechange-属性"><a href="#1-onreadystatechange-属性" class="headerlink" title="1. onreadystatechange 属性"></a>1. onreadystatechange 属性</h3><p>onreadystatechange 属性存有处理服务器响应的函数。<br>下⾯的代码定义⼀个空的函数，可同时对 onreadystatechange 属性进⾏设置：</p><pre class="line-numbers language-none"><code class="language-none">xmlHttp.onreadystatechange &#x3D; function() &#123; &#x2F;&#x2F;我们需要在这写⼀些代码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-readyState-属性"><a href="#2-readyState-属性" class="headerlink" title="2. readyState 属性"></a>2. readyState 属性</h3><p>readyState 属性存有服务器响应的状态信息。每当 readyState 改变时，onreadystatechange 函数就会<br>被执⾏。<br>readyState 属性可能的值：</p><table><thead><tr><th><strong>状态</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>0</td><td>请求未初始化（在调⽤ open() 之前）</td></tr><tr><td>1</td><td>请求已提出（调⽤ send() 之前）</td></tr><tr><td>2</td><td>请求已发送（这⾥通常可以从响应得到内容头部）</td></tr><tr><td>3</td><td>请求处理中（响应中通常有部分数据可⽤，但是服务器还没有完成响应）</td></tr><tr><td>4</td><td>请求已完成（可以访问服务器响应并使⽤它）</td></tr></tbody></table><p>我们要向这个 onreadystatechange 函数添加⼀条 If 语句，来测试我们的响应是否已完成(意味着可获得数据)：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//从服务器的response获得数据 </span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-responseText-属性"><a href="#3-responseText-属性" class="headerlink" title="3. responseText 属性"></a>3. responseText 属性</h3><p>可以通过 responseText 属性来取回由服务器返回的数据。<br>在我们的代码中，我们将把时间⽂本框的值设置为等于 responseText：</p><pre class="line-numbers language-none"><code class="language-none">xmlHttp.onreadystatechange &#x3D; function() &#123;  if (xmlHttp.readyState &#x3D;&#x3D; 4) &#123;  document.myForm.time.value &#x3D; xmlHttp.responseText;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其它属性如下：</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121221447015.png"></p><h2 id="1-5-XMLHttpRequest⽅法"><a href="#1-5-XMLHttpRequest⽅法" class="headerlink" title="1.5 XMLHttpRequest⽅法"></a>1.5 XMLHttpRequest⽅法</h2><h3 id="1-open-⽅法"><a href="#1-open-⽅法" class="headerlink" title="1. open() ⽅法"></a>1. open() ⽅法</h3><p>open() 有三个参数。第⼀个参数定义发送请求所使⽤的⽅法，第⼆个参数规定服务器端脚本的URL，第<br>三个参数规定应当对请求进⾏异步地处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">xmlHttp<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"test.php"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-send-⽅法"><a href="#2-send-⽅法" class="headerlink" title="2. send() ⽅法"></a>2. send() ⽅法</h3><p>send() ⽅法将请求送往服务器。如果我们假设 HTML ⽂件和 PHP ⽂件位于相同的⽬录，那么代码是这<br>样的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其它⽅法如下：</p><p><strong><img src="C:/Users/10452/AppData/Roaming/Typora/typora-user-images/image-20211121221720353.png"></strong></p><h1 id="二、-Ajax编程步骤"><a href="#二、-Ajax编程步骤" class="headerlink" title="二、 Ajax编程步骤"></a>二、 Ajax编程步骤</h1><p>为了⽅便理解，我给AJAX统⼀了⼀个流程，要想实现AJAX，就要按照以后步骤⾛：</p><ol><li>创建XMLHttpRequest对象。</li><li>设置请求⽅式。</li><li>调⽤回调函数。</li><li>发送请求。<br>下⾯来看下具体步骤：</li></ol><h2 id="2-1-创建XMLHttpRequest对象"><a href="#2-1-创建XMLHttpRequest对象" class="headerlink" title="2.1 创建XMLHttpRequest对象"></a>2.1 创建XMLHttpRequest对象</h2><p>创建XMLHttp对象的语法是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> xmlHttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是IE5或者IE6浏览器，则使⽤<strong>ActiveX</strong>对象，创建⽅法是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> xmlHttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⼀般我们⼿写AJAX的时候，⾸先要判断该浏览器是否⽀持XMLHttpRequest对象，如果⽀持则创建该对</p><p>象，如果不⽀持则创建ActiveX对象。JS代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第⼀步：创建XMLHttpRequest对象</span><span class="token keyword">var</span> xmlHttp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">window<span class="token punctuation">.</span></span>XMLHttpRequest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//⾮IE </span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">window<span class="token punctuation">.</span></span>ActiveXObject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//IE </span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-设置请求⽅式"><a href="#2-2-设置请求⽅式" class="headerlink" title="2.2 设置请求⽅式"></a>2.2 设置请求⽅式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第⼆步：设置和服务器端交互的相应参数，向路径</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span><span class="token class-name">JsLearning3</span><span class="token operator">/</span>getAjax准备发送数据 <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/JsLearning3/getAjax"</span><span class="token punctuation">;</span>xmlHttp<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>open⽅法如下：</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121222655186.png"></p><p><strong>GET 还是 POST？</strong><br>与 POST 相⽐，GET 更简单也更快，并且在⼤部分情况下都能⽤。然⽽，在以下情况中，请使⽤ POST<br>请求：<br>    ⽆法使⽤缓存⽂件（更新服务器上的⽂件或数据库）<br>    向服务器发送⼤量数据（POST 没有数据量限制）<br>    发送包含未知字符的⽤户输⼊时，POST ⽐ GET 更稳定也更可靠</p><p><strong>异步 - True 或 False？</strong><br>    AJAX 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。XMLHttpRequest 对<br>象如果要⽤于 AJAX 的话，其 open() ⽅法的 async 参数必须设置为 true：对于 web 开发⼈员来说，发<br>送异步请求是⼀个巨⼤的进步。很多在服务器执⾏的任务都相当费时。AJAX 出现之前，这可能会引起应<br>⽤程序挂起或停⽌。<br>通过 AJAX，JavaScript ⽆需等待服务器的响应，⽽是：<br>在等待服务器响应时执⾏其他脚本<br>当响应就绪后对响应进⾏处理</p><h2 id="2-3-调⽤回调函数"><a href="#2-3-调⽤回调函数" class="headerlink" title="2.3 调⽤回调函数"></a>2.3 调⽤回调函数</h2><p>​    所谓回调函数，就是请求在后台处理完，再返回到前台所实现的功能。在这个例⼦⾥，我们的回调<br>函数要实现的功能就是接收后台处理后反馈给前台的数据，然后将这个数据显示到指定的div上。因为从<br>后台返回的数据可能是错误的，所以在回调函数中⾸先要判断后台返回的信息是否正确，如果正确才可<br>以继续执⾏。代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第三步：注册回调函数</span>xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> obj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xmlHttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"AJAX服务器返回错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这段代码就是回调函数的核⼼内容，就是获取后台返回的数据，然后将这个数据赋值给id为testid的<br>div。xmlHttp对象有两个属性都可以获取后台返回的数据，分别是：responseText和responseXML，<br>其中responseText是⽤来获得字符串形式的响应数据，responseXML是⽤来获得 XML 形式的响应数<br>据。⾄于选择哪⼀个是取决于后台给返回的数据的，这个例⼦⾥我们只是显示⼀条字符串数据所以选择<br>的是responseText。</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">var obj &#x3D; document.getElementById(testid);obj.innerHTML &#x3D; xmlHttp.responseText;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-4-发送请求"><a href="#2-4-发送请求" class="headerlink" title="2.4 发送请求"></a>2.4 发送请求</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第四步：设置发送请求的内容和发送报送。然后发送请求</span><span class="token keyword">var</span> uname<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">var</span> upass<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"userPass"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token punctuation">;</span><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token string">"userName="</span> <span class="token operator">+</span> uname<span class="token operator">+</span> <span class="token string">"&amp;userPass="</span> <span class="token operator">+</span>upass<span class="token operator">+</span> <span class="token string">"&amp;time="</span> <span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增加time随机参数，防⽌读取缓存 </span>xmlHttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向请求添加 HTTP 头，POST如果有数据⼀定加加！！！！</span>xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-完整代码"><a href="#2-5-完整代码" class="headerlink" title="2.5 完整代码"></a>2.5 完整代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//dopost方法</span><span class="token comment">//为了防止给前台输出乱码，所以指定响应的编码格式</span>resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"账户已被注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"账户可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">></span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">></span></span>$<span class="token class-name">Title</span>$<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    function <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//发送异步请求</span>      <span class="token comment">//1.创建XMLHttpRequest对象</span>      <span class="token keyword">var</span> xmlHttp<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">window<span class="token punctuation">.</span></span>XMLHttpRequest</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//非IE</span>        xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">window<span class="token punctuation">.</span></span>ActiveXObject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHttP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//2.打开连接</span>      <span class="token keyword">var</span> uname <span class="token operator">=</span> window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token comment">//xmlHttp.open("get","/testuname?username="+uname,true);//true表示通过异步的方式进行请求</span>      xmlHttp<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">,</span><span class="token string">"/testuname"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//3.指定回调函数,这个属性有处理服务器响应的函数</span>      xmlHttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//3.1判断状态,4代表可以访问的状态，也就是200的那个状态码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//3.2接收返回的数据</span>          <span class="token keyword">var</span> responseText <span class="token operator">=</span> xmlHttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>          document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"rs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> responseText<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//4.发送数据</span>      <span class="token comment">//post的请求</span>      <span class="token comment">//请求的头信息</span>      xmlHttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded;charset=UTE-8"</span><span class="token punctuation">)</span>      xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"username="</span><span class="token operator">+</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//get的请求不要伪装请求头信息</span>      <span class="token comment">//xmlHttp.send();</span>    <span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>h1<span class="token punctuation">></span></span>index<span class="token punctuation">.</span>jsp<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  username<span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"uname"</span> onblur<span class="token operator">=</span><span class="token string">"test()"</span><span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"rs"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121225056619.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121225107739.png"> </p><h1 id="三、-jquery的ajax操作"><a href="#三、-jquery的ajax操作" class="headerlink" title="三、 jquery的ajax操作"></a>三、 jquery的ajax操作</h1><h2 id="3-1传统⽅式实现Ajax的不⾜"><a href="#3-1传统⽅式实现Ajax的不⾜" class="headerlink" title="3.1传统⽅式实现Ajax的不⾜"></a>3.1传统⽅式实现Ajax的不⾜</h2><p>步骤繁琐</p><p> ⽅法、属性、常⽤值较多不好记忆</p><h2 id="3-2-ajax-⽅法"><a href="#3-2-ajax-⽅法" class="headerlink" title="3.2 ajax()⽅法"></a>3.2 ajax()⽅法</h2><p>可以通过发送 HTTP请求加载远程数据，是 jQuery 最底层的 Ajax 实现，具有较⾼灵活性。<br>$.ajax( [settings] ); //参数 settings 是$.ajax ( )⽅法的参数列表，⽤于配置 Ajax 请求的键值对集合;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> url<span class="token operator">:</span>请求地址 type<span class="token operator">:</span><span class="token string">"get | post | put | delete "</span> 默认是get<span class="token punctuation">,</span> data<span class="token operator">:</span>请求参数 <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"pwd"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> dataType<span class="token operator">:</span>请求数据类型<span class="token string">"html | text | json | xml | script | jsonp "</span><span class="token punctuation">,</span> success<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>dataTextStatus<span class="token punctuation">,</span>jqxhr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//请求成功时 </span>error<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span>jqxhr<span class="token punctuation">,</span>textStatus<span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token comment">//请求失败时</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-get-post-⽅法通过远程-HTTP-GET-请求载⼊信息。"><a href="#3-3-get-post-⽅法通过远程-HTTP-GET-请求载⼊信息。" class="headerlink" title="3.3 get() ,post()⽅法通过远程 HTTP GET 请求载⼊信息。"></a>3.3 get() ,post()⽅法通过远程 HTTP GET 请求载⼊信息。</h2><p>这是⼀个简单的 GET 请求功能以取代复杂 $.ajax</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//省略将服务器返回的数据显示到⻚⾯的代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//省略将服务器返回的数据显示到⻚⾯的代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>url:请求的路径</p><p>data:发送的数据</p><p>success:成功函数</p><p>datatype 返回的数据 </p><h2 id="3-4代码"><a href="#3-4代码" class="headerlink" title="3.4代码"></a>3.4代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">></span></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">></span></span>$<span class="token class-name">Title</span>$<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"js/jquery-1.8.0.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>script<span class="token punctuation">></span></span>        $<span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            $<span class="token punctuation">(</span><span class="token string">"#uname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//1获得value值</span>                <span class="token keyword">var</span> uname <span class="token operator">=</span> $<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//2.发送请求</span><span class="token comment">/*                $.ajax(&#123;                    url:"/testuname",                    data:"username="+uname,                    type:"post",                    dataType:"text",//指的是服务器会返回一个text的文本数据                    //回调函数，处理服务器响应                    success:function(rs)&#123;                        $("#rs").html(rs)                    &#125;                &#125;)*/</span>                $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"testuname"</span><span class="token punctuation">,</span><span class="token string">"username="</span><span class="token operator">+</span>uname<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    $<span class="token punctuation">(</span><span class="token string">"#rs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span><span class="token generics"><span class="token punctuation">&lt;</span>h1<span class="token punctuation">></span></span><span class="token class-name">JqueryForAjax</span><span class="token punctuation">.</span>jsp<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>username<span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"uname"</span><span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"rs"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、-JSON"><a href="#四、-JSON" class="headerlink" title="四、 JSON"></a>四、 JSON</h1><h2 id="4-1、什么是JSON"><a href="#4-1、什么是JSON" class="headerlink" title="4.1、什么是JSON"></a>4.1、什么是JSON</h2><pre><code>     (JavaScript Object Notation) 是⼀种轻量级的数据交换格式。 易于⼈阅读和编写。同时也易于</code></pre><p>机器解析和⽣成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition -<br>December 1999的⼀个⼦集。 JSON采⽤完全独⽴于语⾔的⽂本格式，但是也使⽤了类似于C语⾔家族的<br>习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语<br>⾔。</p><h2 id="4-2、JSON对象定义和基本使⽤"><a href="#4-2、JSON对象定义和基本使⽤" class="headerlink" title="4.2、JSON对象定义和基本使⽤"></a>4.2、JSON对象定义和基本使⽤</h2><p>​    在标准的json格式中，json对象由在括号括起来，对象中的属性也就是json的key是⼀个字符串，所以<br>⼀定要使⽤双引号引起来。每组key之间使⽤逗号进⾏分隔。</p><h3 id="4-2-1、JSON的定义"><a href="#4-2-1、JSON的定义" class="headerlink" title="4.2.1、JSON的定义"></a>4.2.1、JSON的定义</h3><p>Json定义格式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>“key” <span class="token operator">:</span> value <span class="token punctuation">,</span> <span class="token comment">// Number类型</span>“key2” <span class="token operator">:</span> “value” <span class="token punctuation">,</span> <span class="token comment">// 字符串类型</span>“key3” <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token comment">// 数组类型</span>“key4” <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// json 对象类型</span>“key5” <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token comment">// json 数组</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3、JSON在java中的使⽤-重要"><a href="#4-3、JSON在java中的使⽤-重要" class="headerlink" title="4.3、JSON在java中的使⽤(重要)"></a>4.3、JSON在java中的使⽤(重要)</h2><p>我们要使⽤json和java中使⽤，我们需要使⽤到⼀个第三⽅的包。它就是</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121230328117.png"> </p><h2 id="4-4、java对象和json之间的转换"><a href="#4-4、java对象和json之间的转换" class="headerlink" title="4.4、java对象和json之间的转换"></a>4.4、java对象和json之间的转换</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java->json</span><span class="token class-name">Users</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"197120"</span><span class="token punctuation">,</span><span class="token number">123.456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//json->java</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"&#123;\"money\":123.456,\"password\":\"197120\",\"uid\":10,\"username\":\"aaa\"&#125;"</span><span class="token punctuation">;</span><span class="token class-name">JSONObject</span> jsonObject1 <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>jsonObject1<span class="token punctuation">,</span> <span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//java集合->json</span><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"197120"</span><span class="token punctuation">,</span><span class="token number">123.456</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token string">"197120"</span><span class="token punctuation">,</span><span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">,</span><span class="token string">"197120"</span><span class="token punctuation">,</span><span class="token number">12.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONArray</span> jsonArray <span class="token operator">=</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//json-?java集合</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"[&#123;\"money\":123.456,\"password\":\"197120\","</span> <span class="token operator">+</span>        <span class="token string">"\"uid\":10,\"username\":\"aaa\"&#125;,&#123;\"money\":1.23,\"password\""</span> <span class="token operator">+</span>        <span class="token string">":\"197120\",\"uid\":11,\"username\":\"bbb\"&#125;,&#123;\"money\":12.23,"</span> <span class="token operator">+</span>        <span class="token string">"\"password\":\"197120\",\"uid\":12,\"username\":\"ccc\"&#125;]"</span><span class="token punctuation">;</span><span class="token class-name">JSONArray</span> jsonArray1 <span class="token operator">=</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> o1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>jsonArray1<span class="token punctuation">,</span> <span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o2 <span class="token operator">:</span> jsonArray1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-5实例代码"><a href="#4-5实例代码" class="headerlink" title="4.5实例代码"></a>4.5实例代码</h2><h3 id="4-5-1-服务器代码"><a href="#4-5-1-服务器代码" class="headerlink" title="4.5.1 服务器代码"></a>4.5.1 服务器代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/getuser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetUsersServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//为了防止给前台输出乱码，所以指定响应的编码格式</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> uid <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> userid <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Users</span> users <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>userid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三2"</span><span class="token punctuation">,</span><span class="token string">"abc2"</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三3"</span><span class="token punctuation">,</span><span class="token string">"abc3"</span><span class="token punctuation">,</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三4"</span><span class="token punctuation">,</span><span class="token string">"abc4"</span><span class="token punctuation">,</span><span class="token number">4.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//java -> json</span>        <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> printWriter <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-2-jsp代码"><a href="#4-5-2-jsp代码" class="headerlink" title="4.5.2 jsp代码"></a>4.5.2 jsp代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">></span></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">></span></span><span class="token class-name">Title</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"js/jquery-1.11.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>script<span class="token punctuation">></span></span>    $<span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        $<span class="token punctuation">(</span><span class="token string">"#uid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//1获得value值</span>            <span class="token keyword">var</span> uid <span class="token operator">=</span> $<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*            $.ajax(&#123;                url:"/getuser",                data:"uid="+uid,                type:"post",                dataType:"text",//指的是服务器会返回一个text的文本数据                //回调函数，处理服务器响应                success:function(rs)&#123;                    $("#uname").val(rs.username);                    $("#pass").val(rs.password);                    $("#money").val(rs.money);                &#125;            &#125;)*/</span>            $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/getuser"</span><span class="token punctuation">,</span><span class="token string">"uid="</span><span class="token operator">+</span>uid<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//转换成可以处理的json</span>                rs <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>rs<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//此时的rs是json格式的对象</span>                $<span class="token punctuation">(</span><span class="token string">"#uname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                $<span class="token punctuation">(</span><span class="token string">"#pass"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>                $<span class="token punctuation">(</span><span class="token string">"#money"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span>    uid<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"uid"</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">></span></span>    uname<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"uname"</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">></span></span>    pass<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"pass"</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">></span></span>    money<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"money"</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-3-结果展示"><a href="#4-5-3-结果展示" class="headerlink" title="4.5.3 结果展示"></a>4.5.3 结果展示</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121230918033.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SmartUpload工具包对文件上传与下载</title>
      <link href="/2021/11/23/SmartUpload%E5%B7%A5%E5%85%B7%E5%8C%85%E5%AF%B9%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
      <url>/2021/11/23/SmartUpload%E5%B7%A5%E5%85%B7%E5%8C%85%E5%AF%B9%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211123114234523.png"></p><h1 id="SmartUpload-jar实现文件上传"><a href="#SmartUpload-jar实现文件上传" class="headerlink" title="SmartUpload.jar实现文件上传"></a>SmartUpload.jar实现文件上传</h1><h2 id="1-将jar包添加到项目中-smartupload-jar"><a href="#1-将jar包添加到项目中-smartupload-jar" class="headerlink" title="1.将jar包添加到项目中:smartupload.jar"></a>1.将jar包添加到项目中:smartupload.jar</h2><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211123111702797.png"> </p><h2 id="2-准备上传的页面"><a href="#2-准备上传的页面" class="headerlink" title="2.准备上传的页面"></a>2.准备上传的页面</h2><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;!--FileUpload.jsp--&gt;&lt;form action&#x3D;&quot;uploadtest&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;    姓名: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;uname&quot;&gt;&lt;br&gt;    图片: &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;pic&quot;&gt;&lt;br&gt;    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注:</strong></p><p>(1)form标签中要添加enctype属性 </p><p>(2)提交方式必须是post</p><h2 id="3-开始获取数据-保存文件"><a href="#3-开始获取数据-保存文件" class="headerlink" title="3.开始获取数据,保存文件"></a>3.开始获取数据,保存文件</h2><p><strong>实例代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/uploadtest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.创建上传文件的操作对象</span>            <span class="token class-name">SmartUpload</span> smartUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmartUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.初始化上传操作</span>            <span class="token class-name">PageContext</span> pageContext <span class="token operator">=</span> <span class="token class-name">JspFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getPageContext                    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> resp<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            smartUpload<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>pageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.1设置编码</span>            smartUpload<span class="token punctuation">.</span><span class="token function">setCharset</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.上传</span>            smartUpload<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4.获取文件信息</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> smartUpload<span class="token punctuation">.</span><span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> contentType <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取文本信息</span>            <span class="token class-name">String</span> uname <span class="token operator">=</span> smartUpload<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"uname="</span> <span class="token operator">+</span> uname<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//5.指定上传路径</span>            <span class="token class-name">String</span> uploadpath <span class="token operator">=</span> <span class="token string">"/uploadfiles/"</span><span class="token operator">+</span>fileName<span class="token punctuation">;</span>            <span class="token comment">//6.保存到指定位置</span>            file<span class="token punctuation">.</span><span class="token function">saveAs</span><span class="token punctuation">(</span>uploadpath<span class="token punctuation">,</span><span class="token class-name">File</span><span class="token punctuation">.</span>SAVEAS_VIRTUAL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//7.跳转到成功页面</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SmartUploadException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：</strong></p><p>（1)此时如果表单中有其他数据时，不能通过request直接获取，需要通过SmartUpload对象获取<br> String name=su.getRequest().getParameter(“bookName”);<br> 并且该代码要在SmartUpload操作完成后添加<br> (2)解决乱码:<br> new String(name.getBytes(“GBK”),”utf-8”)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//内置参数按顺序含义如下图</span><span class="token class-name">PageContext</span> pageContext <span class="token operator">=</span> <span class="token class-name">JspFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getPageContext<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> resp<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211123112247453.png"></p><h1 id="SmartUpload-jar实现文件下载"><a href="#SmartUpload-jar实现文件下载" class="headerlink" title="SmartUpload.jar实现文件下载"></a>SmartUpload.jar实现文件下载</h1><h2 id="1-下载页面"><a href="#1-下载页面" class="headerlink" title="1.下载页面"></a>1.下载页面</h2><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;!--success.jsp--&gt;&lt;body&gt;  &lt;h1&gt;success.jsp&lt;&#x2F;h1&gt;  &lt;a href&#x3D;&quot;downimg?filename&#x3D;$&#123;filename&#125;&quot;&gt;下载&lt;&#x2F;a&gt;  &lt;img src&#x3D;&quot;uploadfiles&#x2F;$&#123;filename&#125;&quot; alt&#x3D;&quot;&quot;&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-服务器代码"><a href="#2-服务器代码" class="headerlink" title="2.服务器代码"></a>2.服务器代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/downimg"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> filename <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">"/uploadfiles/"</span><span class="token operator">+</span>filename<span class="token punctuation">;</span>        <span class="token comment">//设置响应头和响应类型</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表示返回过来的是一个流</span>        <span class="token comment">//attachment 告诉浏览器以附件的方式下载文件(弹出下载框)</span>        resp<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//跳转页面</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//清空缓冲区:将服务端缓冲区的文件内容,立即权并不传送给客户端</span>        resp<span class="token punctuation">.</span><span class="token function">flushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="上传下载上述实例展示"><a href="#上传下载上述实例展示" class="headerlink" title="上传下载上述实例展示"></a>上传下载上述实例展示</h1><h2 id="1-上传"><a href="#1-上传" class="headerlink" title="1.上传"></a>1.上传</h2><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211123113031893.png"></p><h2 id="2展示并下载"><a href="#2展示并下载" class="headerlink" title="2展示并下载"></a>2展示并下载</h2><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211123113213331.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> smartupload.jar </tag>
            
            <tag> 文件上传下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC的Demo</title>
      <link href="/2021/11/21/MVC%E7%9A%84Demo/"/>
      <url>/2021/11/21/MVC%E7%9A%84Demo/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211121162532008.png"> </p><h1 id="MVC的简单demo"><a href="#MVC的简单demo" class="headerlink" title="MVC的简单demo"></a>MVC的简单demo</h1><h2 id="简单了解MVC"><a href="#简单了解MVC" class="headerlink" title="简单了解MVC"></a>简单了解MVC</h2><p>M：(Model) 模型 : 应⽤程序的核⼼功能，管理这个模块中⽤的数据和值（bean,dao）；</p><p>V(View )视图: 视图提供模型的展示，管理模型如何显示给⽤户，它是应⽤程序的外观；（jsp/html）</p><p>C(Controller)控制器: 对⽤户的输⼊做出反应，管理⽤户和视图的交互，是连接模型和视图的枢纽。</p><p>（servlet/service）</p><p>MVC⽤于将web（UI）层进⾏职责解耦</p><p><strong>说明:mvc设计模式(不属于23种设计模式)</strong></p><h2 id="这里我不打算写一些理论知识直接上代码咯"><a href="#这里我不打算写一些理论知识直接上代码咯" class="headerlink" title="这里我不打算写一些理论知识直接上代码咯"></a>这里我不打算写一些理论知识直接上代码咯</h2><h3 id="一、分层（包含M和C）"><a href="#一、分层（包含M和C）" class="headerlink" title="一、分层（包含M和C）"></a>一、分层（包含M和C）</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211121155442696.png"> </p><h4 id="1-bean"><a href="#1-bean" class="headerlink" title="1.bean"></a>1.bean</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//实体类包主要存放于数据库对应的实体类</span><span class="token comment">//类名=表名</span><span class="token comment">//属性名=列名</span><span class="token comment">//实体类需要包含：属性，构造（无参，全参），getter，setter</span><span class="token comment">//属于Model（M）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> stuid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> stuname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getStuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stuid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> stuid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stuid <span class="token operator">=</span> stuid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStuname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stuname<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuname</span><span class="token punctuation">(</span><span class="token class-name">String</span> stuname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stuname <span class="token operator">=</span> stuname<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-dao"><a href="#2-dao" class="headerlink" title="2.dao"></a>2.dao</h4><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211121155735864.png"> </p><h5 id="2-1接口"><a href="#2-1接口" class="headerlink" title="2.1接口"></a>2.1接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//实体类+Dao=当前接口名</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义操作数据库的方法</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student1</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2实现类"><a href="#2-2实现类" class="headerlink" title="2.2实现类"></a>2.2实现类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口名+Impl=当前类名</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">DruidUtil</span> <span class="token keyword">implements</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student1</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> pps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"select * from student1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> pps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Student1</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                student<span class="token punctuation">.</span><span class="token function">setStuid</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"stuid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                student<span class="token punctuation">.</span><span class="token function">setStuname</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"stuname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                student<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token function">close</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>pps<span class="token punctuation">,</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-service"><a href="#3-service" class="headerlink" title="3.service"></a>3.service</h4><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211121155830655.png"> </p><h5 id="3-1接口"><a href="#3-1接口" class="headerlink" title="3.1接口"></a>3.1接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//bean类名+Service=当前类名</span><span class="token comment">//service层主要定义业务逻辑，现阶段主要调取dao层</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//查询全部</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student1</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2实现类"><a href="#3-2实现类" class="headerlink" title="3.2实现类"></a>3.2实现类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">StudentDao</span> studentDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student1</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> studentDao<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-servlet"><a href="#4-servlet" class="headerlink" title="4.servlet"></a>4.servlet</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//C-->Controller 控制层</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/getstus"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//即使是get请求也会执行post</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.接收请求参数</span>        <span class="token comment">//2.调取service层方法</span>        <span class="token class-name">StudentService</span> studentService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student1</span><span class="token punctuation">></span></span> stulist <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            stulist <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3.跳转页面</span>        <span class="token comment">//后台传递数据给前台</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"stulist"</span><span class="token punctuation">,</span>stulist<span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/show.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-util-连接数据库的工具包"><a href="#5-util-连接数据库的工具包" class="headerlink" title="5.util(连接数据库的工具包)"></a>5.util(连接数据库的工具包)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> ds<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Properties</span> ppt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ppt<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>ppt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 从连接池中取出一个连接给用户     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">,</span> <span class="token class-name">Statement</span> state<span class="token punctuation">,</span> <span class="token class-name">ResultSet</span> rs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            state<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-1配置文件"><a href="#5-1配置文件" class="headerlink" title="5.1配置文件"></a>5.1配置文件</h5><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211121160155870.png"> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>javaweb<span class="token operator">?</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span><span class="token class-name">UTC</span>username<span class="token operator">=</span>rootpassword<span class="token operator">=</span>lxy18750112980driverClassName<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>initialSize<span class="token operator">=</span><span class="token number">5</span>maxActive<span class="token operator">=</span><span class="token number">10</span>minIdle<span class="token operator">=</span><span class="token number">5</span>maxWait<span class="token operator">=</span><span class="token number">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、V的部分"><a href="#二、V的部分" class="headerlink" title="二、V的部分"></a>二、V的部分</h3><h4 id="1-导包"><a href="#1-导包" class="headerlink" title="1.导包"></a>1.导包</h4><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211121160408647.png"> </p><h4 id="2-index-jsp"><a href="#2-index-jsp" class="headerlink" title="2.index.jsp"></a>2.index.jsp</h4><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;&#x2F;title&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;  &lt;a href&#x3D;&quot;&#x2F;getstus&quot;&gt;查询学生列表&lt;&#x2F;a&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-show-jsp"><a href="#3-show-jsp" class="headerlink" title="3.show.jsp"></a>3.show.jsp</h4><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;%@taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;h1&gt;show.jsp&lt;&#x2F;h1&gt;    &lt;table border&#x3D;&quot;1&quot; width&#x3D;&quot;500px&quot; bgcolor&#x3D;&quot;aqua&quot;&gt;        &lt;tr&gt;            &lt;td&gt;id&lt;&#x2F;td&gt;            &lt;td&gt;name&lt;&#x2F;td&gt;            &lt;td&gt;age&lt;&#x2F;td&gt;            &lt;td&gt;sex&lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;    &lt;c:forEach items&#x3D;&quot;$&#123;requestScope.stulist&#125;&quot; var&#x3D;&quot;stu&quot;&gt;        &lt;tr&gt;            &lt;td&gt;$&#123;stu.stuid&#125;&lt;&#x2F;td&gt;            &lt;td&gt;$&#123;stu.stuname&#125;&lt;&#x2F;td&gt;            &lt;td&gt;$&#123;stu.age&#125;&lt;&#x2F;td&gt;            &lt;td&gt;$&#123;stu.sex&#x3D;&#x3D;1?&#39;男&#39;:&#39;女&#39;&#125;&lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;    &lt;&#x2F;c:forEach&gt;    &lt;&#x2F;table&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、数据库"><a href="#三、数据库" class="headerlink" title="三、数据库"></a>三、数据库</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211121160705836.png"> </p><h3 id="四、样例展示"><a href="#四、样例展示" class="headerlink" title="四、样例展示"></a>四、样例展示</h3><h4 id="1-直接访问show-jsp"><a href="#1-直接访问show-jsp" class="headerlink" title="1.直接访问show.jsp"></a>1.直接访问show.jsp</h4><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211121160922344.png"> </p><h4 id="2-index-jsp-1"><a href="#2-index-jsp-1" class="headerlink" title="2.index.jsp"></a>2.index.jsp</h4><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211121160938416.png"> </p><h4 id="3-通过点击index-jsp内超链接访问show-jsp"><a href="#3-通过点击index-jsp内超链接访问show-jsp" class="headerlink" title="3.通过点击index.jsp内超链接访问show.jsp"></a>3.通过点击index.jsp内超链接访问show.jsp</h4><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211121160957029.png"> </p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话跟踪和过滤器拦截器</title>
      <link href="/2021/11/21/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2021/11/21/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211121161816512.png"></p><h1 id="Session和Cookie"><a href="#Session和Cookie" class="headerlink" title="Session和Cookie"></a>Session和Cookie</h1><h2 id="什么是会话跟踪技术"><a href="#什么是会话跟踪技术" class="headerlink" title="什么是会话跟踪技术"></a>什么是会话跟踪技术</h2><p>会话跟踪是Web程序中常⽤的技术，⽤来跟踪⽤户的整个会话。保持对⽤户会话期间的数据管理。常⽤<br>的会话跟踪技术是Cookie与Session。<br>Cookie通过在客户端记录信息确定⽤户身份<br>Session通过在服务器端记录信息确定⽤户身份。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="1-什么是Cookie"><a href="#1-什么是Cookie" class="headerlink" title="1.什么是Cookie"></a>1.什么是Cookie</h3><pre class="line-numbers language-none"><code class="language-none"> Cookie是客户端(⼀般指浏览器)请求服务器后,服务器发给客户端的⼀个辨认标识，保存在客户端，当客户端再次向服务器发送请求时，会携带着这个辨认标识，服务器就可以通过这个标识来识别客户端的身份或状态等。 Cookie的作⽤：跟踪会话，记录⼀次会话中(即Session，⼀次会话可能会有多次请求，当然也可以有多个Cookie来跟踪不同的信息)的信息，这样服务器就会知道⽤户的状态，⽐如有没有登录成功，付款时购物⻋中的东⻄等，就相当于贴在客户端脑⻔上的纸条，浏览器看不到，但服务器看得到。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Cookie的应⽤"><a href="#2-Cookie的应⽤" class="headerlink" title="2.Cookie的应⽤"></a>2.Cookie的应⽤</h3><h4 id="2-1-保持⽤户登录状态"><a href="#2-1-保持⽤户登录状态" class="headerlink" title="2.1 保持⽤户登录状态"></a>2.1 保持⽤户登录状态</h4><p>​    将⽤户的信息保存到Cookie中，并发送给浏览器，并且将有效时间设置为⼀个较⻓的时间，这样浏览器<br>在以后访问⽹站时，都会带着该Cookie，服务器以此来辨识⽤户，⽤户就不再需要输⼊⽤户名和密码等<br>信息。</p><h4 id="2-2-记录⽤户名"><a href="#2-2-记录⽤户名" class="headerlink" title="2.2 记录⽤户名"></a>2.2 记录⽤户名</h4><p> ⼀旦⽤户登录成功以后，下次再登录时，直接将Cookie中的⽤户名读取并显示出来，这样⽤户就不<br>需要再次输⼊⽤户名，只输⼊密码即可。</p><h3 id="3-Cookie的设置和获取"><a href="#3-Cookie的设置和获取" class="headerlink" title="3. Cookie的设置和获取"></a>3. Cookie的设置和获取</h3><h4 id="3-1-通过HttpServletResponse-addCookie的⽅式设置Cookie"><a href="#3-1-通过HttpServletResponse-addCookie的⽅式设置Cookie" class="headerlink" title="3.1 通过HttpServletResponse.addCookie的⽅式设置Cookie"></a>3.1 通过HttpServletResponse.addCookie的⽅式设置Cookie</h4><p>注意:new Cookie()时两个参数都是字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接收参数</span><span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.后台创建cookie</span><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cookie.setMaxAge();</span><span class="token comment">//2.返回给前端</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-服务端获取客户端携带的cookie：通过HttpServletRequest获取"><a href="#3-2-服务端获取客户端携带的cookie：通过HttpServletRequest获取" class="headerlink" title="3.2 服务端获取客户端携带的cookie：通过HttpServletRequest获取"></a>3.2 服务端获取客户端携带的cookie：通过HttpServletRequest获取</h4><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%  &#x2F;&#x2F;这里用request取是后端相对于前端是请求过来的！！!  Cookie[] cookies &#x3D; request.getCookies();  String value &#x3D; &quot;&quot;;  &#x2F;&#x2F;有cookie就从后端取出来&quot;uname&quot;是后端给cookie去的别名  if (cookies!&#x3D;null &amp;&amp; cookies.length&gt;0)&#123;    for (Cookie cookie : cookies) &#123;      if (cookie.getName().equals(&quot;uname&quot;))&#123;        value &#x3D; cookie.getValue();        break;      &#125;;    &#125;  &#125;  pageContext.setAttribute(&quot;unameCookie&quot;,value);%&gt;&lt;!--这样实现利用cookie保存上一次的用户名--&gt;用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;unameCookie&#125;&quot;&gt;&lt;br&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-删除Cookie"><a href="#4-删除Cookie" class="headerlink" title="4.删除Cookie"></a>4.删除Cookie</h3><p>通过设置同名Cookie的最⼤存活时间为0，删除Cookie是指使浏览器不再保存Cookie，使Cookie⽴即失效</p><p>举例：使name为username的Cookie⽴即失效</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建⼀个name为username的Cookie</span><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.设置Cookie的有效时间为0</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除cookie的关键</span><span class="token comment">//3.将cookie发送给浏览器，来替换同名Cookie</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Cookie的有效时间"><a href="#5-Cookie的有效时间" class="headerlink" title="5.Cookie的有效时间"></a>5.Cookie的有效时间</h3><p> Cookie发送给浏览器以后，浏览器并不会永久保存，也就是到了⼀定的时间以后浏览器会⾃动销毁Cookie。Cookie的默认有效时间为⼀次会话(⼀次打开关闭浏览器的过程)，我们也可以⼿动指定Cookie的有效时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//setMaxAge⽤来设置Cookie的最⼤有效时间，需要int型的参数，代表有效的秒数</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span>秒数<span class="token punctuation">)</span>；<span class="token comment">//当参数⼤于0时，会设置为指定的秒数</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当参数等于0时,浏览器不会保存Cookie,Cookie⽴即失效</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当参数⼩于0时，和不设置是⼀样，当前会话有效</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置⼀个永久有效的Cookie，并⾮永久，只是使Cookie的⽣命很⻓⽽已</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">365</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="1-什么是Session"><a href="#1-什么是Session" class="headerlink" title="1.什么是Session"></a>1.什么是Session</h3><p>​    Session是另⼀种记录客户状态的机制，不同的是<strong>Cookie保存在客户端浏览器</strong>中，⽽<strong>Session保存在服务器</strong>上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。<br>​    如果说Cookie机制是通过检查客户身上的“通⾏证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session相当于程序在服务器上建⽴的⼀份客户档案，客户来访的时候只需要查询客户档案表就可以了。</p><h3 id="2-创建Session的格式"><a href="#2-创建Session的格式" class="headerlink" title="2.创建Session的格式"></a>2.创建Session的格式</h3><p>​     Session对应的类为javax.servlet.http.HttpSession类。每个来访者对应⼀个Session对象，所有该客户的状态信息都保存在这个Session对象⾥。<strong>Session对象是在客户端第⼀次请求服务器的时候创建的。</strong></p><p>​    Session也是⼀种key-value的属性对，通过getAttribute(Stringkey)和setAttribute(String key，Objectvalue)⽅法读写客户状态信息。Servlet⾥通过request.getSession()⽅法获取该客户的 Session</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取Session对象</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置Session中的属性</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录时间为："</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取</span><span class="token class-name">Session</span>属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Session的⽣命周期"><a href="#3-Session的⽣命周期" class="headerlink" title="3.Session的⽣命周期"></a>3.Session的⽣命周期</h3><p>​    Session保存在服务器端。<strong>为了获得更⾼的存取速度，服务器⼀般把Session放在内存⾥。每个⽤户都会</strong><br><strong>有⼀个独⽴的Session。如果Session内容过于复杂，当⼤量客户访问服务器时可能会导致内存溢出。因</strong><br><strong>此，Session⾥的信息应该尽量精简。</strong></p><p>​    Session在⽤户第⼀次访问服务器的时候⾃动创建。需要注意只有访问<strong>JSP、Servlet等程序时才会创建</strong><br><strong>Session</strong>，只访问<strong>HTML、IMAGE等静态资源并不会创建Session</strong>。如果尚未⽣成Session，也可以使<br>request.getSession(true)强制⽣成Session。<br>​    Session⽣成后，只要⽤户继续访问，服务器就会更新Session的最后访问时间，并维护该Session。⽤户<br>每访问服务器⼀次，⽆论是否读写Session，服务器都认为该⽤户的Session“活跃（active）”了⼀次。<br>​    由于会有越来越多的⽤户访问服务器，因此Session也会越来越多。为防⽌内存溢出，服务器会把⻓时间<br>内没有活跃的Session从内存删除。这个时间就是Session的超时时间。如果超过了超时时间没访问过服<br>务器，Session就⾃动失效了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>用标签的形式在web<span class="token punctuation">.</span>xml里面设置session的最大活动时间<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>session<span class="token operator">-</span>config<span class="token operator">></span>    <span class="token operator">&lt;</span>session<span class="token operator">-</span>timeout<span class="token operator">></span><span class="token number">30</span><span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>timeout<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>config<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过代码设置session的最大活动时间.单位（秒）</span>session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-Session常⽤的⽅法"><a href="#4-Session常⽤的⽅法" class="headerlink" title="4.Session常⽤的⽅法"></a>4.Session常⽤的⽅法</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121145517213.png"> </p><h3 id="5-Sesssion的应⽤场景"><a href="#5-Sesssion的应⽤场景" class="headerlink" title="5.Sesssion的应⽤场景"></a>5.Sesssion的应⽤场景</h3><p>​    代码演示：1.登录 2.退出(创建Session和消除Session)</p><h3 id="6-Session和Cookie的区别"><a href="#6-Session和Cookie的区别" class="headerlink" title="6.Session和Cookie的区别"></a>6.Session和Cookie的区别</h3><p>​    (1) Cookie数据保存在客户端，Session数据保存在服务器端。<br>​    (2) Session是由应⽤服务器维持的⼀个服务器端的存储空间，⽤户在连接服务器时，会由服务器⽣成⼀<br>个唯⼀的SessionID,⽤该SessionID 为标识符来存取服务器端的Session存储空间。⽽SessionID这⼀数据<br>则是保存到客户端，⽤<strong>Cookie保存</strong>的，⽤户提交⻚⾯时，会将这⼀SessionID提交到服务器端，来存取<br>Session数据。这⼀过程，是不⽤开发⼈员⼲预的。所以⼀旦客户端禁⽤Cookie，那么Session也会失<br>效。<br>​    (3) Cookies是属于Session对象的⼀种。但有不同，Cookies不会占服务器资源，是存在客服端内存或者<br>⼀个Cookie的⽂本⽂件中；⽽Session则会占⽤服务器资源。所以，尽量不要使⽤Session，⽽使⽤<br>Cookies。但是我们⼀般认为Cookie是不可靠的，Cookies是保存在本机上的，但是其信息的完全可⻅性<br>且易于本地编辑性，往往可以引起很多的安全问题Session是可靠地。但是⽬前很多著名的站点也都⽤<br>Cookie</p><h2 id="Cookie和Session样例说明"><a href="#Cookie和Session样例说明" class="headerlink" title="Cookie和Session样例说明"></a>Cookie和Session样例说明</h2><p>​    话不多说，直接上代码：</p><h3 id="1-index-jsp"><a href="#1-index-jsp" class="headerlink" title="1.index.jsp"></a>1.index.jsp</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;!--index.jsp页面--&gt;&lt;body&gt;&lt;%  &#x2F;&#x2F;这里用request取是后端相对于前端是请求过来的！！!  Cookie[] cookies &#x3D; request.getCookies();  String value &#x3D; &quot;&quot;;  &#x2F;&#x2F;有cookie就从后端取出来   &quot;uname&quot;是后端给cookie去的别名  if (cookies!&#x3D;null &amp;&amp; cookies.length&gt;0)&#123;    for (Cookie cookie : cookies) &#123;      if (cookie.getName().equals(&quot;uname&quot;))&#123;        value &#x3D; cookie.getValue();        break;      &#125;;    &#125;  &#125;  pageContext.setAttribute(&quot;unameCookie&quot;,value);%&gt;  &lt;form action&#x3D;&quot;login&quot; method&#x3D;&quot;post&quot;&gt;    用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;unameCookie&#125;&quot;&gt;&lt;br&gt;    密码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;pass&quot;&gt;&lt;br&gt;    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;login&quot;&gt;  &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121151208990.png"> </p><p>​    <strong>输入错误的用户名会重定向到首页，并且cookie会保存用户名</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121151301385.png"> </p><h3 id="2-success-jsp"><a href="#2-success-jsp" class="headerlink" title="2.success.jsp"></a>2.success.jsp</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;!--这是success.jsp页面--&gt;&lt;body&gt;  &lt;h1&gt;success(testSession) 只有用户登录以后才能访问的页面&lt;&#x2F;h1&gt;当前登录用户是:$&#123;sessionScope.username&#125;&lt;br&gt;  &lt;a href&#x3D;&quot;loginout&quot;&gt;退出&lt;&#x2F;a&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>取出session里的成功登陆用户名并且显示</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121151556018.png"> </p><h3 id="3-index-jsp里表单请求地址"><a href="#3-index-jsp里表单请求地址" class="headerlink" title="3.index.jsp里表单请求地址"></a>3.index.jsp里表单请求地址</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/login"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"error.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"login-Servlet被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.接收参数</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> pass <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.判断正误</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//session存值</span>            <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span>pass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//通过代码设置session的最大活动时间.单位（秒）</span>            session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//登录成功</span>            <span class="token comment">//不管是重定向还是转发，session数据是不会丢失的，重定向时request中的数据会丢失</span>            resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.后台创建cookie</span>            <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//cookie.setMaxAge();</span>            <span class="token comment">//2.返回给前端</span>            resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-success-jsp超链接的请求地址"><a href="#4-success-jsp超链接的请求地址" class="headerlink" title="4.success.jsp超链接的请求地址"></a>4.success.jsp超链接的请求地址</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/loginout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginOutServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使session失效</span>        req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"index.jsp "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Filter和Listener"><a href="#Filter和Listener" class="headerlink" title="Filter和Listener"></a>Filter和Listener</h1><h2 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器(Filter)"></a>过滤器(Filter)</h2><h3 id="1-什么是过滤器"><a href="#1-什么是过滤器" class="headerlink" title="1.什么是过滤器"></a>1.什么是过滤器</h3><p>​    过滤器实际上就是对web资源进⾏拦截，做⼀些处理后再交给下⼀个过滤器或servlet处理，通常都</p><p>是⽤来拦截request进⾏处理的，也可以对返回的response进⾏拦截处理</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121152206804.png"></p><h3 id="2-过滤器的语法格式"><a href="#2-过滤器的语法格式" class="headerlink" title="2.过滤器的语法格式"></a>2.过滤器的语法格式</h3><h4 id="2-1-创建⼀个类实现Filter接⼝"><a href="#2-1-创建⼀个类实现Filter接⼝" class="headerlink" title="2.1.创建⼀个类实现Filter接⼝"></a>2.1.创建⼀个类实现Filter接⼝</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-重写接⼝中的⽅法"><a href="#2-2-重写接⼝中的⽅法" class="headerlink" title="2.2.重写接⼝中的⽅法"></a>2.2.重写接⼝中的⽅法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//当服务器启动时执行init</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化filter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//请求和响应时都会执行这个方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>servletRequest<span class="token punctuation">;</span>    <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span>servletResponse<span class="token punctuation">;</span><span class="token comment">//处理乱码</span>    request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//防止用户在未登录的情况下访问资源</span>    <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得请求地址</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestURI="</span><span class="token operator">+</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestURI<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"success.jsp"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> username<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//调取下一个过滤器,或者调取Servlet</span>    filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销毁filter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-在web-xml⽂件中配置"><a href="#2-3-在web-xml⽂件中配置" class="headerlink" title="2.3.在web.xml⽂件中配置"></a>2.3.在web.xml⽂件中配置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>filter<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>f1<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>FirstFilter</span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span><span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>f1<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token comment">/*&lt;/url-pattern>   &lt;!--/*表示不管从哪里访问都会执行util.FirstFilter拦截器的操作-->&lt;/filter-mapping></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使⽤场景"><a href="#3-使⽤场景" class="headerlink" title="3.使⽤场景"></a>3.使⽤场景</h3><p>3.1.如何防⽌⽤户未登录就执⾏后续操作<br>     String name=(String)session.getAttribute(“key”);<br>     if(name==null){ //跳转到登录⻚⾯ }<br>3.2.设置编码⽅式–统⼀设置编码<br>3.3.加密解密(密码的加密和解密)<br>3.4.⾮法⽂字筛选<br>3.5.下载资源的限制<br>过滤器的特点:在servlet之前和之后都会被执⾏</p><h2 id="监听器-Listener"><a href="#监听器-Listener" class="headerlink" title="监听器(Listener)"></a>监听器(Listener)</h2><h3 id="1-什么是监听器"><a href="#1-什么是监听器" class="headerlink" title="1.什么是监听器"></a>1.什么是监听器</h3><p> 监听器就是监听某个域对象的的状态变化的组件<br> 监听器的相关概念：<br>     事件源：被监听的对象(三个域对象 request、session、servletContext)<br>     监听器：监听事件源对象事件源对象的状态的变化都会触发监听器<br>     注册监听器：将监听器与事件源进⾏绑定<br>     响应⾏为：监听器监听到事件源的状态变化时所涉及的功能代码（程序员编写代码）</p><h3 id="2-监听器分类"><a href="#2-监听器分类" class="headerlink" title="2.监听器分类"></a>2.监听器分类</h3><p> 第⼀维度按照被监听的对象划分：ServletRequest域、HttpSession域、ServletContext域<br> 第⼆维度按照监听的内容分：监听域对象的创建与销毁的、监听域对象的属性变化的</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211121153945620.png"></p><h3 id="3-监听三⼤域对象的创建与销毁的监听器"><a href="#3-监听三⼤域对象的创建与销毁的监听器" class="headerlink" title="3.监听三⼤域对象的创建与销毁的监听器"></a>3.监听三⼤域对象的创建与销毁的监听器</h3><p>​        <strong>监听器的编写步骤（重点）：</strong></p><p>​             编写⼀个监听器类去实现监听器接⼝<br>​             覆盖监听器的⽅法<br>​             需要在web.xml中进⾏配置—注册</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置监听器<span class="token operator">--</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>listener<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>SessionListener</span><span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>listener<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>AttributeListener</span><span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionListener</span> <span class="token keyword">implements</span> <span class="token class-name">HttpSessionListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> httpSessionEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session的创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpSessionEvent<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> httpSessionEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session的销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttributeListener</span> <span class="token keyword">implements</span> <span class="token class-name">HttpSessionAttributeListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> httpSessionBindingEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session存值,"</span><span class="token operator">+</span>httpSessionBindingEvent<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>httpSessionBindingEvent<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> httpSessionBindingEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session移除数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> httpSessionBindingEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/me.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
            <tag> Filter </tag>
            
            <tag> Listener </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jsp简单入门必备知识</title>
      <link href="/2021/11/18/Jsp%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/11/18/Jsp%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211118153900486.png"></p><h2 id="一、什么是Jsp"><a href="#一、什么是Jsp" class="headerlink" title="一、什么是Jsp"></a>一、什么是Jsp</h2><p>​    JSP全名为Java Server Pages，中⽂名叫java服务器⻚⾯，其根本是⼀个简化的Servlet设计，它 是由</p><p>Sun Microsystems公司倡导、许多公司参与⼀起建⽴的⼀种动态⽹⻚技术标准。JSP技术有点类似ASP技</p><p>术，它是在传统的⽹⻚HTML⽂件(<em>.htm,</em>.html)中插⼊Java程序段(Scriptlet)和JSP标记(tag)，从⽽形成</p><p>JSP⽂件，后缀名为(*.jsp)。 ⽤JSP开发的Web应⽤是跨平台的，既能在Linux下运⾏，也能在其他操作系</p><p>统上运⾏。</p><p>​     JSP将⽹⻚逻辑与⽹⻚设计的显示分离，⽀持可重⽤的基于组件的设计，使基于Web的应⽤程序的开</p><p>发变得迅速和容易。</p><p>*.html 静态⻚⾯(包含固定的⻚⾯内容)</p><p>*.jsp 动态⻚⾯(⻚⾯数据可以动态更新,⽀持嵌套java代码和html代码)</p><h2 id="二、为什么会出现Jsp"><a href="#二、为什么会出现Jsp" class="headerlink" title="二、为什么会出现Jsp"></a>二、为什么会出现Jsp</h2><p>​    1.servlet展示信息的不⽅便，引⼊了JSP。</p><p>​    2.JSP本质上也是⼀个servlet！！！！！！</p><p>​    3.JSP就是在HTML⻚⾯中嵌⼊了java代码。</p><h2 id="三、Jsp如何嵌套Java代码"><a href="#三、Jsp如何嵌套Java代码" class="headerlink" title="三、Jsp如何嵌套Java代码"></a>三、Jsp如何嵌套Java代码</h2><p>​    答案:⼩脚本(&lt;% java代码%&gt;)</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">声明标签 &lt;%!变量或者⽅法声明%&gt;表达式标签 &lt;%&#x3D; 表达式%&gt; 在⻚⾯上显示的效果程序代码标签 &lt;%java代码%&gt; ⻚⾯上动态展示内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    page指令:</p><p>​    &lt;%@ page language=”java” import=”java.util.*” pageEncoding=”UTF-8”%&gt;</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt; &lt;%! int i&#x3D;10;%&gt;&lt;!--成员变量--&gt; &lt;%! public void show()&#123;&#125;%&gt; &lt;!--成员⽅法--&gt; &lt;%&#x3D;i%&gt; &lt;!--输出变量值--&gt; &lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    如果把⼀个数据存在request域(其他域也是一样)中，取值操作如下：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%request.setAttribute(&quot;a1&quot;,&quot;AAA&quot;);%&gt;request&#x3D;&lt;%&#x3D;request.getAttribute(&quot;a1&quot;)%&gt;&lt;br&gt;&lt;%    &#x2F;&#x2F;response.sendRedirect();    response.getWriter();%&gt;&lt;%    session.setAttribute(&quot;b1&quot;,&quot;bbb&quot;);%&gt;session:&lt;%&#x3D;session.getAttribute(&quot;b1&quot;)%&gt; &lt;br&gt;&lt;%    &#x2F;&#x2F;application表示的是整个程序在运行期间    application.setAttribute(&quot;c1&quot;,&quot;ccc&quot;);%&gt;application:&lt;%&#x3D;application.getAttribute(&quot;c1&quot;)%&gt; &lt;br&gt;&lt;%    &#x2F;&#x2F;page&#x3D;this，表示当前页面    pageContext.setAttribute(&quot;d1&quot;,&quot;ddd&quot;);%&gt;pageContext:&lt;%&#x3D;pageContext.getAttribute(&quot;d1&quot;)%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211118131923632.png"><br>    另外开一个jsp页面取这些值：（因为服务端没有存储处理请求，直接返回页面所以request为空，因为不是同一个页面所以在前一个页面用pageContext存的值在新开的页面也是为空)</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;h1&gt;test2.jsp&lt;&#x2F;h1&gt;request&#x3D;&lt;%&#x3D;request.getAttribute(&quot;a1&quot;)%&gt;&lt;br&gt;session:&lt;%&#x3D;session.getAttribute(&quot;b1&quot;)%&gt; &lt;br&gt;application:&lt;%&#x3D;application.getAttribute(&quot;c1&quot;)%&gt; &lt;br&gt;pageContext:&lt;%&#x3D;pageContext.getAttribute(&quot;d1&quot;)%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211118132149734.png"> </p><h2 id="四、Jsp的工作原理"><a href="#四、Jsp的工作原理" class="headerlink" title="四、Jsp的工作原理"></a>四、Jsp的工作原理</h2><p>​    当浏览器访问tomcat服务器.jsp页面会翻译成index_jsp.java⽂件，对这个java⽂件进⾏编译，产⽣⼀个</p><p>index.jsp⽂件，会将index.jsp翻译成index_jsp.java⽂件，对这个java⽂件进⾏编译，产⽣⼀个</p><p>index_jsp.class⽂件，将class⽂件加载运⾏。将JSP翻译成java⽂件，它是将JSP中的所有的HTML代码通</p><p>过流进⾏输出，也就是说最终翻译成class，被虚拟机加载，它本质是servlet，它就会往回响应，响应回</p><p>去就是把JSP中的HTML代码以流的⽅式写回浏览器。所以在JSP中展示出了HTML代码</p><h2 id="五、JSP的九大内置对象"><a href="#五、JSP的九大内置对象" class="headerlink" title="五、JSP的九大内置对象"></a>五、JSP的九大内置对象</h2><p>​     JSP中⼀共预先定义了9个这样的对象，分别为：request、response、session、application、out、</p><p>pagecontext、config、page、exception</p><h3 id="1-request对象"><a href="#1-request对象" class="headerlink" title="1.request对象"></a>1.request对象</h3><p>​    request 对象是 javax.servlet.httpServletRequest类型的对象。 该对象代表了客户端的请求信</p><p>息，主要⽤于接受通过HTTP协议传送到服务器的数据。（包括头信息、系统信息、请求⽅式以及请求参</p><p>数等）。request对象的作⽤域为⼀次请求。</p><h3 id="2-response对象"><a href="#2-response对象" class="headerlink" title="2.response对象"></a>2.response对象</h3><p>​    response 代表的是对客户端的响应，主要是将JSP容器处理过的对象传回到客户端。response</p><p>对象也具有作⽤域，它只在JSP⻚⾯内有效。所属类型:HttpServletResponse</p><h3 id="3-session对象"><a href="#3-session对象" class="headerlink" title="3. session对象"></a>3. session对象</h3><p>​    session 对象是由服务器⾃动创建的与⽤户请求相关的对象。服务器为每个⽤户都⽣成⼀个</p><p>session对象，⽤于保存该⽤户的信息，跟踪⽤户的操作状态。session对象内部使⽤Map类来保存数</p><p>据，因此保存数据的格式为 “Key/value”。 session对象的value可以使复杂的对象类型，⽽不仅仅局限</p><p>于字符串类型。HttpSession</p><h3 id="4-application对象"><a href="#4-application对象" class="headerlink" title="4.application对象"></a>4.application对象</h3><p>​    application 对象可将信息保存在服务器中，直到服务器关闭，否则application对象中保存的信息</p><p>会在整个应⽤中都有效。与session对象相⽐，application对象⽣命周期更⻓，类似于系统的“全局变量”</p><p>ServletContext</p><p>区别：</p><p> request:单次请求</p><p> session:浏览器访问期间(会话期间)</p><p> application:服务器启动期间,所存的数据可以跨浏览器</p><h3 id="5-out对象"><a href="#5-out对象" class="headerlink" title="5.out对象"></a>5.out对象</h3><p>​    out 对象⽤于在Web浏览器内输出信息，并且管理应⽤服务器上的输出缓冲区。在使⽤ out 对</p><p>象输出数据时，可以对数据缓冲区进⾏操作，及时清除缓冲区中的残余数据，为其他的输出让出缓冲空</p><p>间。待数据输出完毕后，要及时关闭输出流。</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%out.print(&quot;&lt;script&gt;alert(&#39;success&#39;)&lt;&#x2F;script&gt;&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-pageContext对象"><a href="#6-pageContext对象" class="headerlink" title="6.pageContext对象"></a>6.pageContext对象</h3><p>​    pageContext 对象的作⽤是取得任何范围的参数，通过它可以获取 JSP⻚⾯的out、</p><p>request、reponse、session、application 等对象。pageContext对象的创建和初始化都是由容器来完</p><p>成的，在JSP⻚⾯中可以直接使⽤ pageContext对象。（也就是打开jsp本页面对象）</p><h3 id="7-config对象"><a href="#7-config对象" class="headerlink" title="7.config对象"></a>7.config对象</h3><p>​    config 对象的主要作⽤是取得服务器的配置信息。通过 pageConext对象的 getServletConfig() ⽅法</p><p>可以获取⼀个config对象。当⼀个Servlet 初始化时，容器把某些信息通过config对象传递给这个</p><p>Servlet。 开发者可以在web.xml ⽂件中为应⽤程序环境中的Servlet程序和JSP⻚⾯提供初始化参数。</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;将image路径转换成服务器端的路径String url&#x3D; config.getServletContext().getRealPath(&quot;&#x2F;image&quot;);&lt;h1&gt;url&#x3D;&lt;%&#x3D;url %&gt;&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-page对象"><a href="#8-page对象" class="headerlink" title="8.page对象"></a>8.page对象</h3><p>​    page 对象代表JSP本身，只有在JSP⻚⾯内才是合法的。 page隐含对象本质上包含当前 Servlet</p><p>接⼝引⽤的变量，类似于Java编程中的 this 指针。</p><h3 id="9-exception对象"><a href="#9-exception对象" class="headerlink" title="9.exception对象"></a>9.exception对象</h3><p>​    　exception 对象的作⽤是显示异常信息，只有在包含 isErrorPage=”true” 的⻚⾯中才可以被使⽤，</p><p>在⼀般的JSP⻚⾯中使⽤该对象将⽆法编译JSP⽂件。excepation对象和Java的所有对象⼀样，都具有系</p><p>统提供的继承结构。exception 对象⼏乎定义了所有异常情况。在Java程序中，可以使⽤try/catch关键</p><p>字来处理异常情况； 如果在JSP⻚⾯中出现没有捕获到的异常，就会⽣成 exception 对象，并把</p><p>exception 对象传送到在page指令中设定的错误⻚⾯中，然后在错误⻚⾯中处理相应的 exception 对</p><p>象。</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; errorPage&#x3D;&quot;test2.jsp&quot;&lt;--表示的是当这个页面有异常的时候，会跳转到test2.jsp--&gt;        &lt;%&#x3D;6&#x2F;0%&gt;  &lt;--这个页面的除0异常错误--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; isErrorPage&#x3D;&quot;true&quot; %&gt;&lt;--声明错误的页面isErrorPage要为&#39;true&#39;--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211118134640646.png"> </p><p>发现当访问有错误信息的test.jsp页面时，会自动跳转到test2.jsp页面，并且显示出报错信息。/ by zero</p><p>jsp的作⽤域:</p><p>pageContext -&gt; request -&gt; session -&gt; application</p><p>当前⻚⾯ 单次请求有效 当前会话期间 服务器运⾏期间有效</p><h2 id="六、Jsp的指令"><a href="#六、Jsp的指令" class="headerlink" title="六、Jsp的指令"></a>六、Jsp的指令</h2><p>JSP指令⽤来设置整个JSP⻚⾯相关的属性，如⽹⻚的编码⽅式和脚本语⾔。</p><p>语法格式如下：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ directive attribute&#x3D;&quot;value&quot; %&gt;directive：指令名称 attribute 属性名 value:属性值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-page指令"><a href="#1-page指令" class="headerlink" title="1.page指令"></a>1.page指令</h3><p>Page指令为容器提供当前⻚⾯的使⽤说明<strong>⼀个JSP⻚⾯</strong>可以包含多个page指令</p><p>Page指令的语法格式：</p><p><strong>&lt;%@ page attribute=”value” %&gt;</strong></p><p>举例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.List"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.ArrayList"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.Date"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">--</span>java<span class="token operator">:</span>解释该JSP⽂件时采⽤的语⾔，⼀般为java语⾔，默认为java<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">--</span><span class="token function">contentType</span><span class="token punctuation">(</span>有效的⽂档类型<span class="token punctuation">)</span>客户端浏览器根据该属性判断⽂档类型，例如 HTML格式为text<span class="token operator">/</span>html、纯⽂本格式为text<span class="token operator">/</span>plain、JPG图像为image<span class="token operator">/</span>jpeg、GIF图像为image<span class="token operator">/</span>gifWORD⽂档为application<span class="token operator">/</span>msword，该属性常跟着charset设置编码⼀起，作⽤是通知服务器和浏览器都使⽤同⼀个码表<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span>errorpage<span class="token operator">:</span>指明⼀个错误⻚⾯，如果该JSP程序抛出⼀个未捕捉的异常，则转到errorPage指定的⻚⾯，errorPage指定的⻚isErrorPage属性为<span class="token boolean">true</span>，且内置的exception对象为未捕捉的异常<span class="token operator">--</span><span class="token operator">-></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> errorPage<span class="token operator">=</span><span class="token string">"test2.jsp"</span><span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>isErrorPage<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> isErrorPage<span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-include指令"><a href="#2-include指令" class="headerlink" title="2.include指令"></a>2.include指令</h3><p>JSP可以通过include指令来包含其他⽂件。<strong>被包含的⽂件可以是JSP⽂件、HTML⽂件或⽂本⽂件</strong>。包含的⽂件就好像是该JSP⽂件的⼀部分，会被同时编译执⾏。</p><p>Include指令的语法格式如下：</p><p>&lt;%@ include file=”⽂件相对 url 地址” %&gt;</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ include file&#x3D;&quot;⽂件相对 url 地址&quot; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>include 指令中的⽂件名实际上是⼀个相对的 URL 地址。</p><p>如果您没有给⽂件关联⼀个路径，JSP编译器默认在当前路径下寻找。</p><p>举例：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;body&gt;    &lt;%@include file&#x3D;&quot;top.jsp&quot;%&gt;    &lt;%@include file&#x3D;&quot;middle.jsp&quot;%&gt;    &lt;%@include file&#x3D;&quot;buttom.jsp&quot;%&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211118140651558.png"> </p><h3 id="3-taglib指令"><a href="#3-taglib指令" class="headerlink" title="3.taglib指令"></a>3.taglib指令</h3><pre><code> JSP API允许⽤户⾃定义标签，⼀个⾃定义标签库就是⾃定义标签的集合。</code></pre><p>​     Taglib指令引⼊⼀个⾃定义标签集合的定义，包括库路径、⾃定义标签。</p><p>格式：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ taglib uri&#x3D;&quot;uri&quot; prefix&#x3D;&quot;&quot; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="七、状态码"><a href="#七、状态码" class="headerlink" title="七、状态码"></a>七、状态码</h2><p>常见举例：</p><p>200 OK 请求被确认</p><p>400 Bad Request 服务器⽆法识别请求</p><p>403 Forbidden 禁⽌访问所请求的⻚⾯</p><p>404 Not Found 服务器⽆法找到所请求的⻚⾯</p><p>500 Internal Server Error 请求不完整，服务器遇⻅了出乎意料的状况</p><p>501 Not Implemented     请求不完整，服务器不提供所需要的功能</p><h2 id="八、EL表达式"><a href="#八、EL表达式" class="headerlink" title="八、EL表达式"></a>八、EL表达式</h2><p><strong>（1）</strong>什么Expression Language表达式语⾔</p><p>最初定义于JSTL1.0部分</p><p>在JSP2.0中，EL从JSTL中剥离出来，放置在JSP规范中，称为JSP2.0规范的⼀部分</p><p>在JSP中使⽤EL表达式，可以简化对象和变量的访问是EL表达式</p><p><strong>（2）</strong>EL表达式语法</p><p>语法格式：**${需要展示信息的名字}**</p><p>注意：</p><p><strong>当表达式没有指定变量或者对象的范围时，</strong></p><p><strong>那么容器会依次从pageContext—&gt;request—&gt;session—&gt;application中查找该变量或对象,我们可以</strong></p><p><strong>通过隐含对象获得指定作⽤域的值:</strong></p><p>pageScope对象，⽤于获取当前⻚⾯的属性值</p><p>requestScope对象，⽤于获取请求范围的属性值</p><p>sessionScope对象，⽤于获取会话范围的属性值</p><p>applicationScope对象，⽤于获取程序范围的属性值</p><p><strong>语法:</strong></p><p> ${requestScope.key}</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;body&gt;    &lt;h1&gt;top.jsp&lt;&#x2F;h1&gt;    &lt;%        &#x2F;&#x2F;EL表达式如果要读取变量，该变量一定要在作用域中：        &#x2F;&#x2F;pageContext,request,session,application        int a &#x3D; 10;        pageContext.setAttribute(&quot;a1&quot;,a);        List list &#x3D; new ArrayList();        list.add(&quot;abc&quot;);        pageContext.setAttribute(&quot;a2&quot;,list);        Map map &#x3D; new HashMap();        map.put(&quot;k1&quot;,&quot;key&quot;);        pageContext.setAttribute(&quot;a3&quot;,map);        &#x2F;&#x2F;如果在相同key的前提下，不同作用域，el表达式会选择展示哪一个值?        pageContext.setAttribute(&quot;a4&quot;,&quot;pageContext内容&quot;);        request.setAttribute(&quot;a4&quot;,&quot;request内容&quot;);        session.setAttribute(&quot;a4&quot;,&quot;session内容&quot;);        application.setAttribute(&quot;a4&quot;,&quot;application内容&quot;);    %&gt;    $&#123;20+30&#125;&lt;br&gt;    $&#123;20&gt;30&#125;&lt;br&gt;    $&#123;20&lt;30&#125;&lt;br&gt;    $&#123;20&gt;30?&quot;aaa&quot;:&quot;bbb&quot;&#125;&lt;br&gt;    a&#x3D;$&#123;a1&#125;&lt;br&gt;    abc&#x3D;$&#123;a2[0]&#125;&lt;br&gt;    k1&#x3D;$&#123;a3.k1&#125;&lt;br&gt;    不指定作用域a4&#x3D;$&#123;a4&#125;&lt;!--会显示pageContext内容，el表达式会默认从低到高范围找，找到就不在访问后面的--&gt;&lt;br&gt;    指定作用域session的a4&#x3D;$&#123;sessionScope.a4&#125;&lt;br&gt;    request作用域的a4&#x3D;$&#123;requestScope.a4&#125;&lt;br&gt;    pageContext的a4&#x3D;$&#123;pageScope.a4&#125;&lt;br&gt;    application的a4&#x3D;$&#123;applicationScope.a4&#125;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211118141959989.png"> </p><h2 id="九、JSTL"><a href="#九、JSTL" class="headerlink" title="九、JSTL"></a>九、JSTL</h2><h3 id="1-什么是JSTL"><a href="#1-什么是JSTL" class="headerlink" title="(1)什么是JSTL"></a><strong>(1)什么是JSTL</strong></h3><p>JSP标准标签库（JSTL）是⼀个JSP标签集合，它封装了JSP应⽤的通⽤核⼼功能。</p><p>JSTL⽀持通⽤的、结构化的任务，⽐如迭代，条件判断，XML⽂档操作，国际化标签SQL标签。 除了</p><p><strong>这些，它还提供了⼀个框架来使⽤集成JSTL的⾃定义标签。</strong></p><p>根据JSTL标签所提供的功能，可以将其分为5个类别。<strong>核⼼标签 格式化标签 sql标签xml标签jstl函数</strong></p><h3 id="2-JSTL的作⽤和语法格式"><a href="#2-JSTL的作⽤和语法格式" class="headerlink" title="(2) JSTL的作⽤和语法格式"></a><strong>(2) JSTL的作⽤和语法格式</strong></h3><p><strong>作⽤：简化jsp⻚⾯编写代码</strong></p><p><strong>语法格式：</strong></p><ol><li>下载 jakarta-taglibs-standard-1.1.2.zip 包并解压，将 jakarta-taglibs-standard-1.1.2/lib/ 下的两</li></ol><p>个 jar ⽂件：standard.jar 和 jstl.jar ⽂件拷⻉到 /WEB-INF/lib/ 下。</p><p>​    <img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211118142602885.png"></p><ol start="2"><li>在JSP⻚⾯中引⼊&lt;%@ taglib prefix=”⻚⾯使⽤的名称” uri=”功能范围的路径”%&gt;    </li></ol><table><thead><tr><th><strong>功能范围</strong></th><th><strong>Uri</strong></th><th><strong>前缀</strong></th></tr></thead><tbody><tr><td>core</td><td><a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a></td><td>c</td></tr><tr><td>i18n</td><td><a href="http://java.sun.com/jsp/jstl/fmt">http://java.sun.com/jsp/jstl/fmt</a></td><td>fmt</td></tr><tr><td>sql</td><td><a href="http://java.sun.com/jsp/jstl/sql">http://java.sun.com/jsp/jstl/sql</a></td><td>sql</td></tr><tr><td>xml</td><td><a href="http://java.sun.com/jsp/jstl/xml">http://java.sun.com/jsp/jstl/xml</a></td><td>x</td></tr><tr><td>functions</td><td><a href="http://java.sun.com/jsp/jstl/function">http://java.sun.com/jsp/jstl/function</a></td><td>fn</td></tr></tbody></table><h3 id="3-核⼼标签"><a href="#3-核⼼标签" class="headerlink" title="(3) 核⼼标签"></a><strong>(3)</strong> <strong>核⼼标签</strong></h3><p>①核⼼标签是最常⽤的 JSTL标签。引⽤核⼼标签库的语法如下：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>② 核⼼标签的分类</strong></p><p><strong>表达式操作</strong> <strong>out</strong>、<strong>set</strong>、<strong>remove</strong>、<strong>catch</strong></p><p><strong>流程控制</strong> <strong>if</strong>、<strong>choose</strong>、<strong>when</strong>、<strong>otherwise</strong></p><p><strong>迭代操作</strong> <strong>forEach</strong>、<strong>forTokens</strong></p><p><strong>URL</strong> <strong>操作</strong> <strong>import</strong>、<strong>param</strong>、<strong>url</strong>、<strong>redirect</strong></p><p><strong>Set</strong> <strong>标签</strong></p><p><strong>＜c:set&gt;主要⽤来将变量存储⾄JSP范围中 或是JavaBean的属性或Map对象中</strong></p><p><strong>＜c:out&gt;主要⽤来显示数据的内容</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;c:set var&#x3D;&quot;uname&quot; value&#x3D;&quot;张三&quot; scope&#x3D;&quot;session&quot;&gt;&lt;&#x2F;c:set&gt;&lt;c:out value&#x3D;&quot;$&#123;sessionScope.uname&#125;&quot;&gt;&lt;&#x2F;c:out&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>＜:remove&gt;主要负责移除变量</strong></p><p><strong>＜c:if&gt;主要⽤于进⾏if判断,如果为true,则输出标签体中的内容</strong> </p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;c:if test&#x3D;&quot;$&#123;uname&#x3D;&#x3D;&#39;张三&#39;&#125;&quot;&gt;    这是张三&lt;&#x2F;c:if&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>＜c:choose&gt;,＜c:when&gt;,＜c:otherwise&gt;作⽤相当于if-else</strong> </p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;c:choose&gt;    &lt;c:when test&#x3D;&quot;$&#123;uname&#x3D;&#x3D;&#39;张三&#39;&#125;&quot;&gt;        c-choose:张三    &lt;&#x2F;c:when&gt;    &lt;c:otherwise&gt;        c-choose:不是张三    &lt;&#x2F;c:otherwise&gt;&lt;&#x2F;c:choose&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>＜c:forEach&gt;循环控制，它可以将数组,集合(Collection)中的成员循序浏览⼀遍。</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%    List list &#x3D; new ArrayList();    list.add(&quot;abc&quot;);    list.add(&quot;bcd&quot;);    list.add(&quot;李四&quot;);    pageContext.setAttribute(&quot;ulist&quot;,list);%&gt;&lt;h4&gt;循环数据&lt;&#x2F;h4&gt;&lt;c:forEach items&#x3D;&quot;$&#123;ulist&#125;&quot; var&#x3D;&quot;user&quot; varStatus&#x3D;&quot;sta&quot;&gt;    $&#123;sta.count&#125;-$&#123;sta.index&#125;$&#123;user&#125;&lt;br&gt;&lt;&#x2F;c:forEach&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(4)格式化标签</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;!--格式化数据fmt--&gt;&lt;%@taglib prefix&#x3D;&quot;fmt&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;fmt&quot; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%    pageContext.setAttribute(&quot;mytime&quot;,new Date());%&gt;date&#x3D;$&#123;mytime&#125;&lt;br&gt;格式化后的date&#x3D;&lt;fmt:formatDate value&#x3D;&quot;$&#123;mytime&#125;&quot; pattern&#x3D;&quot;yyyy-MM-dd&quot;&gt;&lt;&#x2F;fmt:formatDate&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上述举例代码输出实例：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211118144212383.png"> </p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsp </tag>
            
            <tag> jstl </tag>
            
            <tag> el表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制</title>
      <link href="/2021/10/30/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/10/30/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211030025908336.png"></p><h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><h2 id="一、什么是Java反射机制？"><a href="#一、什么是Java反射机制？" class="headerlink" title="一、什么是Java反射机制？"></a>一、什么是Java反射机制？</h2><p>​        Java的反射(reflection)机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。反射被视为动态语言的关键。</p><p>​        Java反射机制主要提供了以下功能： 在运行时判断任意一个对象所属的类;在运行时构造任意一个类的对象;在运行时判断任意一个类所具有的成员变量和方法;在运行时调用任意一个对象的方法;生成动态代理。</p><p>​        反射技术大量用于Java设计模式和框架技术，最常见的设计模式就是工厂模式和单例模式。</p><p>​        单例模式(Singleton)：这个模式主要作用是保证在Java应用程序中，一个类Class只有一个实例存在。在很多操作中，比如建立目录 数据库连接都需要这样的单线程操作。这样做就是为了节省内存空间，保证我们所访问到的都是同一个对象。</p><p>​        工厂模式(Factory)：工厂模式利用Java反射机制和Java多态的特性可以让我们的程序更加具有灵活性。用工厂模式进行大型项目的开发，可以很好的进行项目并行开发。 </p><h2 id="二、类加载器"><a href="#二、类加载器" class="headerlink" title="二、类加载器"></a>二、类加载器</h2><ul><li><p>​        Java类加载器（Java Classloader）是Java运行时环境（Java Runtime Environment）的一部分， 负责动态加载Java类到Java虚拟机的内存空间中。 </p></li><li><p>​        java默认有三种类加载器，BootstrapClassLoader、ExtensionClassLoader、App ClassLoader。 </p></li><li><p>​        BootstrapClassLoader（引导启动类加载器）： </p></li></ul><p>​                嵌在JVM内核中的加载器，该加载器是用C++语言写的，主要负载加载JAVA_HOME/lib下的类库，引 导启动类加载器无法被应用程序直接使用。 </p><ul><li>​        ExtensionClassLoader（扩展类加载器）： </li></ul><p>​                ExtensionClassLoader是用JAVA编写，且它的父类加载器是Bootstrap。 </p><p>​                是由sun.misc.Launcher$ExtClassLoader实现的，主要加载JAVA_HOME/lib/ext目录中的类库。 </p><p>​                它的父加载器是BootstrapClassLoader </p><ul><li>​        App ClassLoader（应用类加载器）： </li></ul><p>​                App ClassLoader是应用程序类加载器，负责加载应用程序classpath目录下的所有jar和class文 件。它的父加载器为Ext ClassLoader</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211030025508894%20-%20%E5%89%AF%E6%9C%AC.png"> </p><pre class="line-numbers language-none"><code class="language-none">类通常是按需加载，即第一次使用该类时才加载。由于有了类加载器，Java运行时系统不需要知道文件与 文件系统。学习类加载器时，掌握Java的委派概念很重要。 双亲委派模型：如果一个类加载器收到了一个类加载请求，它不会自己去尝试加载这个类，而是把这个请求 转交给父类加载器去完成。每一个层次的类加载器都是如此。因此所有的类加载请求都应该传递到最顶层的 启动类加载器中，只有到父类加载器反馈自己无法完成这个加载请求（在它的搜索范围没有找到这个类） 时，子类加载器才会尝试自己去加载。委派的好处就是避免有些类被重复加载。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-加载配置文件"><a href="#1-加载配置文件" class="headerlink" title="1.加载配置文件"></a>1.加载配置文件</h3><p>​        如何通过java反射机制加载配置文件呢？这里我们通过一个简单的小例子来说明!</p><ol><li>首先我们在项目下建立一个source文件目录，如何设置为资源根目录</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211030010218043.png"> </p><p>​    2.如何通过类.class获取类加载器进而加载配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Demo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"config.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211030010257026.png"> </p><p>​    <strong>值得注意的是默认加载的是src路径下的文件，但是当项目存在resource root目录时，就变为了加载resource root下的文件了。</strong></p><h2 id="三、Class对象的相关操作"><a href="#三、Class对象的相关操作" class="headerlink" title="三、Class对象的相关操作"></a>三、Class对象的相关操作</h2><p>要想了解一个类,必须先要获取到该类的字节码文件对象.</p><p>在Java中，每一个字节码文件，被夹在到内存后，都存在一个对应的Class类型的对象</p><h3 id="1-得到Class的几种方式"><a href="#1-得到Class的几种方式" class="headerlink" title="1.得到Class的几种方式"></a>1.得到Class的几种方式</h3><p>如果在编写代码时,指导类的名称,且类已经存在,可以通过</p><p><strong>包名.类名.class得到一个类的类对象</strong></p><p>如果拥有类的对象,可以通过 <strong>Class对象.getClass()得到一个类的类对象</strong></p><p>如果在编写代码时,知道类的名称,可以通过</p><p><strong>Class.forName(包名+类名):得到一个类的类对象</strong></p><p>上述的三种方式,在调用时,如果类在内存中不存在,则会加载到内存!如果类已经在内存中存在,不会重复加载,而是重复利用!</p><p><strong>(一个class文件在内存中不会存在两个类对象)</strong></p><ul><li><p>了解</p><p>  基本数据类型的类对象:基本数据类型.clss 、包装类.type</p><p>  基本数据类型包装类对象:包装类.class</p></li></ul><h3 id="2-获取Constructor-构造器）"><a href="#2-获取Constructor-构造器）" class="headerlink" title="2.获取Constructor(构造器）"></a>2.获取Constructor(构造器）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加载类</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.java.reflect.People"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到无参构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> cs <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用无参数构造方法创建对象</span><span class="token class-name">People</span> p <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";"</span> <span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用两个参数传入的构造方法(有参构造)</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> cs2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取属性</span><span class="token class-name">People</span> p2 <span class="token operator">=</span> cs2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取所有权限的构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> cs3 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在类中是私有构造，只有这样才可以找得到私有的方法</span>cs3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到了私有的构造方法不代表可以访问，所以得设置权限</span><span class="token class-name">People</span> p3 <span class="token operator">=</span> cs3<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"法外狂徒张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>People类中三个构造方法</strong></p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211030012012654.png" style="zoom: 67%;" /> <p><strong>输出结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211030011713738.png"> </p><h3 id="3-获取Method-方法"><a href="#3-获取Method-方法" class="headerlink" title="3.获取Method(方法)"></a>3.获取Method(方法)</h3><ol><li>getMethod(StringmethodName,class..clss)</li></ol><p>根据参数列表的类型和方法名,得到一个方法(public修饰的)</p><ol start="2"><li>getMethods();</li></ol><p>得到一个类的所有方法(public修饰的)</p><ol start="3"><li>getDeclaredMethod(StringmethodName,class..clss)</li></ol><p>根据参数列表的类型和方法名,得到一个方法(除继承以外所有的:包含私有,共有,保护,默认)</p><ol start="4"><li>getDeclaredMethods();</li></ol><p>得到一个类的所有方法(除继承以外所有的:包含私有,共有,保护,默认)</p><p>如何执行Method方法呢？</p><p>​    得到的方法.invoke(Object o,Object…para):</p><p>参数1.要调用方法的对象</p><p>参数2.要传递的参数列表‘</p><p>​    setAccessible(boolean flag)</p><p>如果flag为true，则表示忽略访问权限检查!(可以访问任何权限的方法)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加载类</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> c1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.java.reflect.People"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取类的构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取对象</span><span class="token class-name">People</span> p <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取类的方法</span><span class="token class-name">Method</span> setName <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> setAge <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setAge"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取各种权限方法</span>setAge<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置可以访问私有权限</span><span class="token comment">//参数1：哪个对象要执行setname方法;参数二：调用方法时传递的参数0-n(可变参数)</span>setName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"法外狂徒张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>setAge<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211030012827224.png"> </p><h3 id="4-获取Field-属性"><a href="#4-获取Field-属性" class="headerlink" title="4.获取Field(属性)"></a>4.获取Field(属性)</h3><ol><li>getDeclaredField(String filedName) </li></ol><p>根据属性的名称, 获取一个属性对象 (可以获取到私有的属性) </p><ol start="2"><li>getDeclaredFields() </li></ol><p>获取所有属性 (包括私有)</p><ol start="3"><li>getField(String filedName) </li></ol><p>根据属性的名称, 获取一个属性对象 (public属性) </p><ol start="4"><li>getFields() </li></ol><p>获取所有属性 (public)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.java.reflect.People"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span> c1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造方法</span><span class="token class-name">Object</span> o <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象</span><span class="token class-name">Field</span> phoneNumber <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"phoneNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取私有属性对象</span>phoneNumber<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置操作权限</span>phoneNumber<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">"18750112980"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给o这个对象里的phoneNumber属性赋值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211030013733194.png"> </p><h2 id="四、关于反射和注解"><a href="#四、关于反射和注解" class="headerlink" title="四、关于反射和注解"></a>四、关于反射和注解</h2><h3 id="1-获取类，属性，方法的全部注解对象"><a href="#1-获取类，属性，方法的全部注解对象" class="headerlink" title="1.获取类，属性，方法的全部注解对象"></a>1.获取类，属性，方法的全部注解对象</h3><pre class="line-numbers language-none"><code class="language-none">Annotation[] annotations01 &#x3D; Class&#x2F;Field&#x2F;Method.getAnnotations(); for (Annotation annotation : annotations01) &#123;System.out.println(annotation); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-根据类型获取类-属性-方法的注解对象"><a href="#2-根据类型获取类-属性-方法的注解对象" class="headerlink" title="2.根据类型获取类,属性,方法的注解对象"></a>2.根据类型获取类,属性,方法的注解对象</h3><pre class="line-numbers language-none"><code class="language-none">注解类型 对象名 &#x3D; (注解类型) c.getAnnotation(注解类型.class);&#x2F;&#x2F;这个c是该注解所在的类的class对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-具体操作示例"><a href="#3-具体操作示例" class="headerlink" title="3.具体操作示例"></a>3.具体操作示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*表注解*/</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token comment">//允许使用在类上面</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment">//持久化策略</span><span class="token annotation punctuation">@Documented</span><span class="token comment">//允许使用在文档里</span><span class="token annotation punctuation">@Inherited</span><span class="token comment">//允许继承</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">TableAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//用于标注类对应的表格名称</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*属性注解*/</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token comment">//可以是用在属性上面</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment">//策略</span><span class="token annotation punctuation">@Documented</span><span class="token comment">//可以使用在文档里</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ColumnAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//描述列名</span>    <span class="token class-name">String</span> <span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//描述类型</span>    <span class="token class-name">String</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//描述数据的长度</span>    <span class="token class-name">String</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211030014654221.png"> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.java.reflectandInterface.Book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TableAnnotation</span> ta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TableAnnotation</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表名:"</span> <span class="token operator">+</span> ta<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f <span class="token operator">:</span> fs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ColumnAnnotation</span> ca <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ColumnAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"属性，对于数据库的字段："</span> <span class="token operator">+</span>    ca<span class="token punctuation">.</span><span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，数据类型："</span> <span class="token operator">+</span> ca<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，数据长度："</span> <span class="token operator">+</span>    ca<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211030014750369.png"> </p><h2 id="五、内省-现阶段了解"><a href="#五、内省-现阶段了解" class="headerlink" title="五、内省(现阶段了解)"></a>五、内省(现阶段了解)</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>基于反射 , java所提供的一套应用到JavaBean的API </p><p>一个定义在包中的类 , 拥有<strong>无参构造器</strong> 所有<strong>属性私有</strong>, 所有属性提供<strong>get/set方法</strong> 实现了<strong>序列化接口</strong> 这种类, 我们称其为 bean类 . </p><p>Java提供了一套java.beans包的api , 对于反射的操作, 进行了封装 ! </p><h3 id="2-Introspector"><a href="#2-Introspector" class="headerlink" title="2.Introspector"></a>2.Introspector</h3><pre class="line-numbers language-none"><code class="language-none">获取Bean类信息 方法:BeanInfo getBeanInfo(Class cls) 通过传入的类信息, 得到这个Bean类的封装对象 .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-BeanInfo"><a href="#3-BeanInfo" class="headerlink" title="3.BeanInfo"></a>3.BeanInfo</h3><pre class="line-numbers language-none"><code class="language-none">常用的方法: MethodDescriptor[] getPropertyDescriptors(): 获取bean类的 get&#x2F;set方法 数组，即这个数组里存放的一个对象同时包含着get set方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-MethodDescriptor"><a href="#4-MethodDescriptor" class="headerlink" title="4.MethodDescriptor"></a>4.MethodDescriptor</h3><pre class="line-numbers language-none"><code class="language-none">常用方法: 1. Method getReadMethod(); 获取一个get方法 2. Method getWriteMethod(); 获取一个set方法 有可能返回null 注意 ,加判断 !<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-实例操作"><a href="#5-实例操作" class="headerlink" title="5.实例操作"></a>5.实例操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Express</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">BeanInfo</span> bi <span class="token operator">=</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">getBeanInfo</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取bean的信息</span><span class="token class-name">PropertyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pds <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取所有get set 方法</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyDescriptor</span> pd <span class="token operator">:</span> pds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Method</span> get <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getReadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Method</span> set <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>get<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211030015632212.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaSe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML和JSON知识点</title>
      <link href="/2021/10/20/XML%E5%92%8CJSON%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2021/10/20/XML%E5%92%8CJSON%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020234358063.png"></p><h1 id="XML与JSON"><a href="#XML与JSON" class="headerlink" title="XML与JSON"></a>XML与JSON</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>业务目标： </p><p>学习数据格式，便于后续更好的进行开发 </p><p>技能目标： </p><p>掌握 XML/JSON 语法（绝对重点） </p><p>掌握 XML 解析（熟悉即可） </p><p>掌握 JSON 解析（绝对重点）</p><h2 id="一、XML"><a href="#一、XML" class="headerlink" title="一、XML"></a>一、XML</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>可扩展标记语言（eXtensible Markup Language）。 </p><p>特性:</p><ol><li><p>xml具有平台无关性, 是一门独立的标记语言. </p></li><li><p>xml具有自我描述性</p></li></ol><h3 id="2-为什么要学习XML捏？"><a href="#2-为什么要学习XML捏？" class="headerlink" title="2.为什么要学习XML捏？"></a>2.为什么要学习XML捏？</h3><ol><li><p>网络数据传输. </p></li><li><p>数据存储 </p></li><li><p>配置文件</p></li></ol><p>XML文件是保存XML数据的一种方式 </p><p>XML数据也可以以其他的方式存在（如在内存中构建XML数据）。 </p><p>不要将XML语言狭隘的理解成XML文件！</p><h3 id="3-XML的格式"><a href="#3-XML的格式" class="headerlink" title="3.XML的格式"></a>3.XML的格式</h3><p><strong>1.XML文档声明：</strong></p><?xml version="1.0" encoding="UTF-8"?><p><strong>2.样例：</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persons</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10001<span class="token punctuation">"</span></span> <span class="token attr-name">groupid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10002<span class="token punctuation">"</span></span> <span class="token attr-name">groupid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>persons</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--在内存里可以看成是一个文档树--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.注释：</strong></p><p>1.注释不能写在文档文档声明前 2.注释不能嵌套注释 </p><p>格式:</p><p>注释开始: &lt;!– </p><p>注释结束: –&gt; </p><h3 id="4-XML解析"><a href="#4-XML解析" class="headerlink" title="4.XML解析"></a>4.XML解析</h3><ul><li><strong>接下来的操作需要导入jar包</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020232951725.png"> </p><h4 id="DOM4J解析XML-掌握"><a href="#DOM4J解析XML-掌握" class="headerlink" title="DOM4J解析XML(掌握)"></a>DOM4J解析XML(掌握)</h4><h5 id="1-主要步骤"><a href="#1-主要步骤" class="headerlink" title="1.主要步骤"></a>1.主要步骤</h5><pre class="line-numbers language-none"><code class="language-none">1. 引入jar文件 dom4j.jar 2. 创建一个指向XML文件的输入流 FileInputStream fis &#x3D; new FileInputStream(&quot;xml文件的地址&quot;); 3. 创建一个XML读取工具对象 SAXReader sr &#x3D; new SAXReader(); 4. 使用读取工具对象, 读取XML文档的输入流 , 并得到文档对象--&gt; 指的是加载到内存的 整个XML文档.Document doc &#x3D; sr.read(fis); 5. 通过文档对象, 获取XML文档中的根元素对象 Element root &#x3D; doc.getRootElement();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-解析本地文件"><a href="#2-解析本地文件" class="headerlink" title="2.解析本地文件"></a>2.解析本地文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.获取输入流</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E://developer//kaikeba//课件与笔记xml//课件与笔记//工具//Demo1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建XML读取对象</span><span class="token class-name">SAXReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.读取并且得到文档对象(相当于把流指向的文件加载到了内存变成树状结构)</span><span class="token class-name">Document</span> doc <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.通过文档获取根元素</span><span class="token class-name">Element</span> root <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.解析元素</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Element book = root.element("book");Element name = book.element("name");Element info = book.element("info");System.out.println(name.getText());System.out.println(info.getText());*/</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> es <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> es<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Element</span> book <span class="token operator">=</span> es<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020225940605.png" style="zoom:67%;" /> <h5 id="3-解析网络文件"><a href="#3-解析网络文件" class="headerlink" title="3.解析网络文件"></a>3.解析网络文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> phone <span class="token operator">=</span> <span class="token string">"13860690901"</span><span class="token punctuation">;</span><span class="token comment">//1.获取XML资源的输入流</span><span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"https://apis.juhe.cn/mobile/get?%20phone="</span><span class="token operator">+</span>phone<span class="token operator">+</span><span class="token string">"&amp;dtype=xml&amp;key=9f3923e8f87f1ea50ed4ec8c39cc9253"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">URLConnection</span> conn <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开连接</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接获取流对象</span><span class="token comment">//2.创建一个XML读取对象</span><span class="token class-name">SAXReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.通过读取对象，读取XML数据，返回文档对象</span><span class="token class-name">Document</span> doc <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.获取根节点</span><span class="token class-name">Element</span> root <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.解析内容</span><span class="token class-name">String</span> code <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"resultcode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Element</span> result <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> province <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> city <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>province<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机号码归属地为："</span> <span class="token operator">+</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机号码归属地为："</span> <span class="token operator">+</span> province <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"areacode"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"zip"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入正确的手机号码！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020232233837.png"> </p><h4 id="DOM4J-XPATH解析XML"><a href="#DOM4J-XPATH解析XML" class="headerlink" title="DOM4J - XPATH解析XML"></a>DOM4J - XPATH解析XML</h4><h5 id="1-路径表达式"><a href="#1-路径表达式" class="headerlink" title="1.路径表达式"></a>1.路径表达式</h5><pre class="line-numbers language-none"><code class="language-none">通过路径快速的查找一个或一组元素 路径表达式: 1. &#x2F; : 从根节点开始查找 2. &#x2F;&#x2F; : 从发起查找的节点位置 查找后代节点 3. . : 查找当前节点 4. .. : 查找父节点 5. @ : 选择属性 属性使用方式: [@属性名&#x3D;&#39;值&#39;] [@属性名&gt;&#39;值&#39;] [@属性名&lt;&#39;值&#39;] [@属性名!&#x3D;&#39;值&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-解析本地文件-1"><a href="#2-解析本地文件-1" class="headerlink" title="2.解析本地文件"></a>2.解析本地文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">      <span class="token comment">//1.获取输入流</span>      <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E://developer//kaikeba//课件与笔记xml//课件与笔记//工具//Demo1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//2.创建XML读取对象</span>      <span class="token class-name">SAXReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//3.读取并且得到文档对象(相当于把流指向的文件加载到了内存变成树状结构)</span>      <span class="token class-name">Document</span> doc <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//4.通过文档对象+xpath,查找所有的name节点</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">selectNodes</span><span class="token punctuation">(</span><span class="token string">"//book//name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.查找单个节点</span>      <span class="token class-name">Node</span> node <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">selectSingleNode</span><span class="token punctuation">(</span><span class="token string">"//book[@id = '1002']//name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> node<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020231057859.png"> </p><h5 id="3-解析网络文件-1"><a href="#3-解析网络文件-1" class="headerlink" title="3.解析网络文件"></a>3.解析网络文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> phone <span class="token operator">=</span> <span class="token string">"13860690901"</span><span class="token punctuation">;</span><span class="token comment">//1.获取XML资源的输入流</span><span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"https://apis.juhe.cn/mobile/get?%20phone="</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">"&amp;dtype=xml&amp;key=9f3923e8f87f1ea50ed4ec8c39cc9253"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">URLConnection</span> conn <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建一个XML读取对象</span><span class="token class-name">SAXReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.通过读取对象，读取XML数据，返回文档对象</span><span class="token class-name">Document</span> doc <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Node</span> node <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">selectSingleNode</span><span class="token punctuation">(</span><span class="token string">"//company"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选择单一节点不加属性过滤默认找第一个</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> node<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020231316434.png"> </p><h3 id="5-Java生成XML-熟悉"><a href="#5-Java生成XML-熟悉" class="headerlink" title="5.Java生成XML(熟悉)"></a>5.Java生成XML(熟悉)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.通过文档帮助器，创建一个空的文档对象</span><span class="token class-name">Document</span> doc <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">createDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.给文档添加一个根节点</span><span class="token class-name">Element</span> books <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.通过根节点丰富子节点</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span>   <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Element</span> book <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Element</span> name <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"java程序设计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Element</span> info <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"非常好的一本书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增加属性</span><span class="token punctuation">&#125;</span><span class="token comment">//4.创建一个文件的输出流</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"G://大三上//books.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.将输出流转换成xml输出流</span><span class="token class-name">XMLWriter</span> xw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6.写出文档</span>xw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7.释放资源</span>xw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020232121985.png"> </p><h3 id="6-XStream的使用-了解"><a href="#6-XStream的使用-了解" class="headerlink" title="6.XStream的使用(了解)"></a>6.XStream的使用(了解)</h3><ul><li>快速的将Java中的对象, 转换为 XML字符串. </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"林小婷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//XStream</span><span class="token comment">//1.创建一个XStream对象</span><span class="token class-name">XStream</span> xs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.修改某个类型生成的根节点（可选的，默认包名.类名）</span>xs<span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.传入对象，开始生成</span><span class="token class-name">String</span> s <span class="token operator">=</span> xs<span class="token punctuation">.</span><span class="token function">toXML</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个person类需要自己建static Person&#123;...&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211020232822207.png"> </p><h3 id="7-xml的解析时遇到的问题"><a href="#7-xml的解析时遇到的问题" class="headerlink" title="7.xml的解析时遇到的问题"></a>7.xml的解析时遇到的问题</h3><p>遇到的问题：</p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211019163455678.png" style="zoom: 67%;" /> <p>解决方法二：文件另存修改编码集，还能处理节点.getText()显示到内存时的乱码问题！</p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211019164654629.png" style="zoom:67%;" /> <h3 id="8-面试题"><a href="#8-面试题" class="headerlink" title="8.面试题"></a>8.面试题</h3><pre class="line-numbers language-none"><code class="language-none">问: Java中有几种XML解析方式 ? 分别是什么 ? 有什么样的优缺点 ? 答: 四种. 1. SAX解析解析方式是事件驱动机制 ! SAX解析器, 逐行读取XML文件解析 , 每当解析到一个标签的开始&#x2F;结束&#x2F;内容&#x2F;属性时,触 发事件. 我们可以编写程序在这些事件发生时, 进行相应的处理. 优点:分析能够立即开始，而不是等待所有的数据被处理    逐行加载,节省内存.有助于解析大于系统内存的文档    有时不必解析整个文档,它可以在某个条件得到满足时停止解析. 缺点:1. 单向解析，无法定位文档层次，无法同时访问同一文档的不同部分数据(因为逐 行解析, 当解析第n行是, 第n-1行已经被释放了, 无法在进行操作了). 2. 无法得知事件发生时元素的层次, 只能自己维护节点的父&#x2F;子关系. 3. 只读解析方式, 无法修改XML文档的内容. 2. DOM解析是用与平台和语言无关的方式表示XML文档的官方W3C标准，分析该结构通常需要加载整个 文档和内存中建立文档树模型.程序员可以通过操作文档树, 来完成数据的获取 修改 删除等. 优点:文档在内存中加载, 允许对数据和结构做出更改. 访问是双向的，可以在任何时候在树中双向解析数据。 缺点:文档全部加载在内存中 , 消耗资源大.（其实也不大可以忽略不计） 3. JDOM解析目的是成为Java特定文档模型，它简化与XML的交互并且比使用DOM实现更快。由于是第一 个Java特定模型，JDOM一直得到大力推广和促进。 JDOM文档声明其目的是“使用20%（或更少）的精力解决80%（或更多）Java&#x2F;XML问题” （根据学习曲线假定为20%） 优点:使用具体类而不是接口，简化了DOM的API。大量使用了Java集合类，方便了Java开发人员。 缺点:没有较好的灵活性。 性能不是那么优异。DOM4J解析XML 掌握4. DOM4J解析 它是JDOM的一种智能分支。它合并了许多超出基本XML文档表示的功能，包括集成的XPath 支持、XML Schema支持以及用于大文档或流化文档的基于事件的处理。它还提供了构建文档表示的选项， DOM4J是一个非常优秀的Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一 个开放源代码的软件。如今你可以看到越来越多的Java软件都在使用DOM4J来读写XML。 目前许多开源项目中大量采用DOM4J , 例如:Hibernate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、JSON"><a href="#二、JSON" class="headerlink" title="二、JSON"></a>二、JSON</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h3><ul><li>JSON: JavaScript Object Notation JS对象简谱 , 是一种轻量级的数据交换格式. </li></ul><h3 id="2-组成"><a href="#2-组成" class="headerlink" title="2.组成"></a>2.组成</h3><h4 id="对象格式"><a href="#对象格式" class="headerlink" title="对象格式"></a>对象格式</h4><pre class="line-numbers language-none"><code class="language-none">一本书书名简介 java:    class Book&#123;    private String name;     private String info;    get&#x2F;set...     &#125;    Book b &#x3D; new Book();     b.setName(“金苹果”);     b.setInfo(“种苹果”); ...js:     var b &#x3D; new Object();     b.name &#x3D; &quot;金苹果&quot;;     b.info &#x3D; &quot;种苹果&quot;; XML:    &lt;book&gt;    &lt;name&gt;金苹果&lt;&#x2F;name&gt;     &lt;info&gt;种苹果&lt;&#x2F;info&gt;     &lt;&#x2F;book&gt; JSON:    &#123;     &quot;name&quot;:&quot;金苹果&quot;,     &quot;info&quot;:&quot;种苹果&quot;     json一个对象, 由一个大括号表示.     括号中 描述对象的属性 . 通过键值对来描述对象的属性     (可以理解为, 大括号中, 包含的是一个个的键值对.)     格式:    键与值之间使用冒号连接, 多个键值对之间使用逗号分隔.     键值对的键 应使用引号引住 (通常Java解析时, 键不使用引号会报错. 而JS能正确解析.)    键值对的值, 可以是JS中的任意类型的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组格式"><a href="#数组格式" class="headerlink" title="数组格式"></a>数组格式</h4><pre class="line-numbers language-none"><code class="language-none">在JSON格式中可以与对象互相嵌套 [元素1,元素2...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>     <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"伟杰老师"</span><span class="token punctuation">,</span>     <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>    <span class="token property">"pengyou"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王二"</span><span class="token punctuation">,</span><span class="token string">"麻子"</span><span class="token punctuation">,</span>               <span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"野马老师"</span><span class="token punctuation">,</span>                 <span class="token property">"info"</span><span class="token operator">:</span><span class="token string">"像匹野马一样狂奔在技术钻研的道路上"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token property">"heihei"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"大长刀"</span><span class="token punctuation">,</span> <span class="token property">"length"</span><span class="token operator">:</span><span class="token string">"40m"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Java和JSON的联系"><a href="#3-Java和JSON的联系" class="headerlink" title="3.Java和JSON的联系"></a>3.Java和JSON的联系</h3><p><strong>要做什么?</strong></p><ul><li>将Java中的对象 快速的转换为 JSON格式的字符串. </li><li>将JSON格式的字符串, 转换为Java的对象.</li></ul><h3 id="4-Gson"><a href="#4-Gson" class="headerlink" title="4.Gson"></a>4.Gson</h3><h4 id="下载jar包"><a href="#下载jar包" class="headerlink" title="下载jar包"></a>下载jar包</h4><p>首先到<a href="https://search.maven.org/artifact/com.google.code.gson/gson/2.8.8/jar%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84gson%E7%9A%84jar%E5%8C%85%E3%80%82">https://search.maven.org/artifact/com.google.code.gson/gson/2.8.8/jar下载对应的gson的jar包。</a></p><p>选择第一个jar，然后导入工程才能使用</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211021004251712.png"> </p><h4 id="对象转换为JSON字符串"><a href="#对象转换为JSON字符串" class="headerlink" title="对象转换为JSON字符串"></a>对象转换为JSON字符串</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建Gson对象</span><span class="token class-name">Gson</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.对象转json</span><span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">,</span><span class="token string">"金苹果"</span><span class="token punctuation">,</span><span class="token string">"种植苹果真辛苦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JSON字符串转换为对象"><a href="#JSON字符串转换为对象" class="headerlink" title="JSON字符串转换为对象"></a>JSON字符串转换为对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//3.通过Gson对象将json字符串转成对象</span><span class="token class-name">Book</span> book1 <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"&#123;\"id\":\"100\",\"name\":\"金苹果\",\"info\":\"种植苹果真辛苦\"&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.也可以通过Gson对象将json字符串转换成集合</span><span class="token class-name">HashMap</span> hashMap <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"&#123;\"id\":\"100\",\"name\":\"金苹果\",\"info\":\"种植苹果真辛苦\"&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211021005043330.png"></h5><h3 id="5-FastJson"><a href="#5-FastJson" class="headerlink" title="5.FastJson"></a>5.FastJson</h3><h4 id="下载jar包-1"><a href="#下载jar包-1" class="headerlink" title="下载jar包"></a>下载jar包</h4><p><a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p><p>选择：the lastest jar</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211021005441971.png">  </p><h4 id="对象转换为JSON字符串-1"><a href="#对象转换为JSON字符串-1" class="headerlink" title="对象转换为JSON字符串"></a>对象转换为JSON字符串</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">,</span><span class="token string">"唐诗三百首"</span><span class="token punctuation">,</span><span class="token string">"床前明月光，地上鞋两双"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.对象转换json字符串</span><span class="token class-name">String</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接调用 JSON静态方法</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JSON字符串转换为对象-1"><a href="#JSON字符串转换为对象-1" class="headerlink" title="JSON字符串转换为对象"></a>JSON字符串转换为对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//2.json字符串转换成对象</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"&#123;\"id\":\"1001\",\"info\":\"床前明月光，地上鞋两双\",\"name\":\"唐诗三百首\"&#125;"</span><span class="token punctuation">;</span><span class="token class-name">Book</span> book1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.转换数组["一二三",四五六","七八九"]</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"[\"一二三\",\"四五六\",\"七八九\"]"</span><span class="token punctuation">;</span>     <span class="token comment">// '\'是转义符</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211021005609329.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2021/10/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/10/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211015230118962.png"></p><h1 id="Java-多线程"><a href="#Java-多线程" class="headerlink" title="Java 多线程"></a>Java 多线程</h1><h2 id="一、-多线程技术概述"><a href="#一、-多线程技术概述" class="headerlink" title="一、    多线程技术概述"></a>一、    多线程技术概述</h2><h3 id="1-线程与进程"><a href="#1-线程与进程" class="headerlink" title="1.线程与进程"></a>1.线程与进程</h3><p>进程<br>    - 是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间</p><p>线程</p><ul><li>是进程中的一个执行路径，共享一个内存空间，线程之间可以自由切换，并发执行. 一个进程最少<br> 有一个线程</li><li>线程实际上是在进程基础之上的进一步划分，一个进程启动之后，里面的若干执行路径又可以划分<br> 成若干个线程</li><li></li></ul><h3 id="2-线程调度"><a href="#2-线程调度" class="headerlink" title="2.线程调度"></a>2.线程调度</h3><p>分时调度</p><ul><li>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</li></ul><p>抢占式调度</p><ul><li>优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，<br>Java使用的为抢占式调度。</li><li>CPU使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核新而言，某个时刻，<br>只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是 在同一时<br>刻运行。 其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的 使<br>用率更高。</li></ul><h3 id="3-同步与异步"><a href="#3-同步与异步" class="headerlink" title="3.同步与异步"></a>3.同步与异步</h3><p><strong>同步</strong>:排队执行 , 效率低但是安全.（在一条道路上一起执行）</p><p><strong>异步</strong>:同时执行 , 效率高但是数据不安全.（在多条道路上同时执行）</p><h3 id="4-并发与并行"><a href="#4-并发与并行" class="headerlink" title="4.并发与并行"></a>4.并发与并行</h3><p><strong>并发</strong>：指两个或多个事件在<strong>同一个时间段内</strong>发生。</p><p>​    多个CPU同时执行多个任务。比如：多个人同时做不同的事情</p><p><strong>并行</strong>：指两个或多个事件在<strong>同一时刻</strong>发生（同时发生）。</p><p>​    一个CPU（采用时间片）同时执行多个任务。不如：秒杀、多个人做同一件事情    </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211015232327814.png"> </p><h2 id="二、线程的常用方法"><a href="#二、线程的常用方法" class="headerlink" title="二、线程的常用方法"></a>二、线程的常用方法</h2><h3 id="1-Thread中常用方法"><a href="#1-Thread中常用方法" class="headerlink" title="1.Thread中常用方法"></a>1.Thread中常用方法</h3><ul><li>可以看jdk11API,这里只是列出几个常用</li></ul><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>1.start()</td><td>启动当前线程；调用当前线程的run()方法</td></tr><tr><td>2.run()</td><td>通常重写继承Thread类中的此方法，将创建多线程要执行的操作声明在此方法中</td></tr><tr><td>3.currentThread()</td><td>静态方法，返回执行当前代码的线程</td></tr><tr><td>4.getName()</td><td>获取当前线程的名字</td></tr><tr><td>5.setName()</td><td>设置当前线程的名字</td></tr><tr><td>6.yield()</td><td>释放当前cpu的执行权</td></tr><tr><td>7.join()</td><td>线程a中调用线程b的join()，此时线程a就会进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态</td></tr><tr><td>8.sleep(long millis)</td><td>让当前线程“休眠”指定millis毫秒。在改时间段内，当前线程处于阻塞状态</td></tr><tr><td>9.isAlive()</td><td>判断当前线程是否存活</td></tr></tbody></table><h3 id="2-线程的优先级"><a href="#2-线程的优先级" class="headerlink" title="2.线程的优先级"></a>2.线程的优先级</h3><h4 id="①-描述"><a href="#①-描述" class="headerlink" title="①.描述"></a>①.描述</h4><table><thead><tr><th>变量和类型</th><th>字段</th><th>描述</th></tr></thead><tbody><tr><td><code>static int</code></td><td><code>MAX_PRIORITY</code></td><td>线程可以拥有的最大优先级。 <strong>10</strong></td></tr><tr><td><code>static int</code></td><td><code>MIN_PRIORITY</code></td><td>线程可以拥有的最低优先级。 <strong>1</strong></td></tr><tr><td><code>static int</code></td><td><code>NORM_PRIORITY</code></td><td>分配给线程的默认优先级。 <strong>5是默认优先级</strong></td></tr></tbody></table><h4 id="②-如何获取和设置当前线程的优先级"><a href="#②-如何获取和设置当前线程的优先级" class="headerlink" title="②.如何获取和设置当前线程的优先级"></a>②.如何获取和设置当前线程的优先级</h4><ul><li>int getPriority()    ：获取当前线程的优先级</li><li>void setPriority(int newPriority)    ：设置线程的优先级</li></ul><p><strong>说明：</strong>高优先级的线程要抢占低优先级线程的CPU执行权。但是只是从概率上来讲，高优先级的线程高概率下被执行。并不意味着只有高优先级的线程被执行完以后，低优先级的线程才执行！！！</p><h2 id="三、创建线程的方式以及区别"><a href="#三、创建线程的方式以及区别" class="headerlink" title="三、创建线程的方式以及区别"></a>三、创建线程的方式以及区别</h2><h3 id="1-方式一：继承Thread类"><a href="#1-方式一：继承Thread类" class="headerlink" title="1.方式一：继承Thread类"></a>1.方式一：继承Thread类</h3><ul><li>步骤</li></ul><ol><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run()方法 –&gt;将此线程执行的操作声明在run()中</li><li>创建Thread类的子类对象</li><li>通过此对象调用start()方法</li></ol><h3 id="2-方式二：实现Runnable接口"><a href="#2-方式二：实现Runnable接口" class="headerlink" title="2.方式二：实现Runnable接口"></a>2.方式二：实现Runnable接口</h3><ul><li>步骤</li></ul><ol><li>创建一个实现Runnable接口的类</li><li>实现类中去实现Runnable接口中的抽象方法：run()</li><li>创建实现类对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ol><h3 id="3-比较创建线程的两种方式"><a href="#3-比较创建线程的两种方式" class="headerlink" title="3.比较创建线程的两种方式"></a>3.比较创建线程的两种方式</h3><ul><li><p>开发中：优先选择：实现Runnable接口的方式</p></li><li><p>原因：</p></li></ul><p>1.实现的方式没有类单继承的局限性</p><p>2.实现的方式更适合来处理多个线程共享数据的情况<em><strong>（可以把实现Runnable接口的实现类看做一个任务，多个线程共同执行一项任务）</strong></em></p><ul><li>相同点：</li></ul><p>两种方式都要重写run()方法，将线程要执行的逻辑声明在run()中</p><h2 id="四、线程的生命周期"><a href="#四、线程的生命周期" class="headerlink" title="四、线程的生命周期"></a>四、线程的生命周期</h2><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211015175559120.png"></p><h2 id="五、线程同步"><a href="#五、线程同步" class="headerlink" title="五、线程同步"></a>五、线程同步</h2><ul><li>关键字：<strong>synchronized</strong>：任何对象都能作为锁放在synchronized(){}的括号里，通常this表示当前类实现对象充当锁</li></ul><p> <strong>1.同步代码块：</strong></p><p>synchronized(this){</p><p>​    //要执行的操作</p><p>}</p><p><strong>2.同步方法：</strong></p><p>哪个类调用这个同步方法，就用这个类的this充当锁</p><p>public synchronized boolean sale(){</p><p>​    //要执行的操作</p><p>}</p><p>(注意同步方法声明为静态时，使用调用该方法的<strong>类名.class</strong>当做锁)</p><p><strong>3.ReentrantLock（显示锁）</strong></p><p>两个构造方法：</p><table><thead><tr><th>构造器</th><th>描述</th></tr></thead><tbody><tr><td><code>ReentrantLock()</code></td><td>创建一个 <code>ReentrantLock</code>的实例。</td></tr><tr><td><code>ReentrantLock(boolean fair)</code></td><td>使用给定的<strong>公平</strong>策略创建 <code>ReentrantLock</code>的实例。</td></tr></tbody></table><p>常用方法：lock() //获得锁   ;  unlock() //尝试释放此锁定</p><h2 id="六、线程通信"><a href="#六、线程通信" class="headerlink" title="六、线程通信"></a>六、线程通信</h2><h3 id="1-线程通信的例子："><a href="#1-线程通信的例子：" class="headerlink" title="1.线程通信的例子："></a>1.线程通信的例子：</h3><ul><li>使用两个线程打印100到1，线程一，线程二交替打印</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NumThread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NumberThread</span> numberThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumberThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>numberThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>numberThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">NumberThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一次没有含义，没有线程可以释放</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//让线程阻塞</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-涉及到的三个方法："><a href="#2-涉及到的三个方法：" class="headerlink" title="2.涉及到的三个方法："></a>2.涉及到的三个方法：</h3><p>1.wait():一旦执行此方法，当前线程进入阻塞状态，并释放同步监视器。</p><p>2.notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就会唤醒优先级最高的线程</p><p>3.notifyAll():一旦执行此方法，就会唤醒所有被wait的线程</p><p>​    <strong>说明：</strong></p><ul><li>1.上述三个方法必须用在同步代码块或同步方法中；</li><li>2.上述三个方法调用者必须是同步代码块或同步方法中的同步监视器；</li><li>3.上述三个方法的定义是在java.lang.Object类中；</li></ul><h3 id="3-面试题：sleep-和wait-的异同？"><a href="#3-面试题：sleep-和wait-的异同？" class="headerlink" title="3.面试题：sleep()和wait()的异同？"></a>3.面试题：sleep()和wait()的异同？</h3><p>1.相同点：一旦执行此方法，都可以使当前线程进入阻塞状态</p><p>2.不同点：</p><ul><li>两个方法声明的位置不同：Thread类中声明sleep()；Object类中声明wait()；</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用；wait()必须使用在同步代码块或同步方法中；</li><li>关于是否释放同步监视器：如果两个方法都是用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁</li></ul><h2 id="七、新线程的创建方式"><a href="#七、新线程的创建方式" class="headerlink" title="七、新线程的创建方式"></a>七、新线程的创建方式</h2><h3 id="1-实现Calllable接口创建线程"><a href="#1-实现Calllable接口创建线程" class="headerlink" title="1.实现Calllable接口创建线程"></a>1.实现Calllable接口创建线程</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211015222117014.png"></p><h3 id="2-线程池"><a href="#2-线程池" class="headerlink" title="2.线程池"></a>2.线程池</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211015222903251.png"></p><p><strong>四种线程池：</strong><a href="https://www.cnblogs.com/laojiao/p/9559002.html">https://www.cnblogs.com/laojiao/p/9559002.html</a></p><p><strong>1.</strong> <strong>缓存线程池</strong></p><p><strong>2.</strong> <strong>定长线程池</strong></p><p><strong>3.</strong> <strong>单线程线程池</strong></p><p><strong>4.</strong> <strong>周期性任务定长线程池</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaSe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> Thread </tag>
            
            <tag> Runnable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaIO总结归纳</title>
      <link href="/2021/10/13/JavaIO%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/"/>
      <url>/2021/10/13/JavaIO%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211013003945218.png"></p><h1 id="JavaIO"><a href="#JavaIO" class="headerlink" title="JavaIO"></a>JavaIO</h1><h2 id="一、IO流的概述"><a href="#一、IO流的概述" class="headerlink" title="一、IO流的概述"></a>一、IO流的概述</h2><h3 id="1-了解什么是IO流"><a href="#1-了解什么是IO流" class="headerlink" title="1.了解什么是IO流"></a>1.了解什么是IO流</h3><ol><li>可以将这种数据传输操作看做是一种数据的流动，按照数据流动的方向分为输入Input和输出Output(相对的来看)。</li><li>Java中的IO操作主要指的是 java.io包下的一些常用类的使用，通过这些常用类对数据进行读取（输入Input）和写出（Output）</li></ol><h3 id="2-IO流的分类"><a href="#2-IO流的分类" class="headerlink" title="2.IO流的分类:"></a>2.IO流的分类:</h3><ol><li><p>按照流的方向分为：输入流和输出流</p></li><li><p>按照流的数据类型分为：字节流和字符流</p><p> 字节流：<strong>以字节为单位操作</strong></p><p> ​        输入流：InputStream</p><p> ​        输出流：OutStream</p><p> 字符流：<strong>以字符为单位操作</strong></p><p> ​        输入流：Reader</p><p> ​        输出流：Writer</p></li></ol><h2 id="二、FileOutputStream-从内存写出到文件"><a href="#二、FileOutputStream-从内存写出到文件" class="headerlink" title="二、FileOutputStream(从内存写出到文件)"></a>二、FileOutputStream(从内存写出到文件)</h2><h3 id="1-常用方法："><a href="#1-常用方法：" class="headerlink" title="1.常用方法："></a>1.常用方法：</h3><table><thead><tr><th align="left"><code>void</code></th><th><code>close()</code></th><th>关闭此文件输出流并释放与此流关联的所有系统资源。</th></tr></thead><tbody><tr><td align="left"><code>void</code></td><td><code>write(byte[] b)</code></td><td>将指定字节数组中的 <code>b.length</code>字节写入此文件输出流。</td></tr><tr><td align="left"><code>void</code></td><td><code>write(byte[] b, int off,  int len)</code></td><td>将从偏移量 <code>off</code>开始的指定字节数组中的 <code>len</code>字节写入此文件输出流。</td></tr><tr><td align="left"><code>void</code></td><td><code>write(int b)</code></td><td>将指定的字节写入此文件输出流。</td></tr></tbody></table><h3 id="2-使用："><a href="#2-使用：" class="headerlink" title="2.使用："></a>2.使用：</h3><p>1.write(int b)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会自动生成文件</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传入的是(转换后的)字节，int类型8个低位，也就是一个字节，换算整型是0-255</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功写出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认一个对象fos从内存写出到文件，修改write内的内容默认是会覆盖文件</span><span class="token comment">//FileOutputStream fos = new FileOutputStream("G://a.txt",true); 此true表示在文件后追加内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.write(byte[] b) 和 write(byte[] b, int off,  int len)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//fos.write(b);//a.txt文件会显示ABCDEF</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示CD</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功写出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、FileInputstream-从文件读入到内存"><a href="#三、FileInputstream-从文件读入到内存" class="headerlink" title="三、FileInputstream(从文件读入到内存)"></a>三、FileInputstream(从文件读入到内存)</h2><h3 id="1-常用方法：-1"><a href="#1-常用方法：-1" class="headerlink" title="1.常用方法："></a>1.常用方法：</h3><ul><li><strong>返回值为int是将8位二进制数转换成的</strong></li><li><strong>int返回值为-1的时候表示读到文件末尾，没东西读入了，因此返回-1</strong></li></ul><table><thead><tr><th><code>int</code></th><th><code>read()</code></th><th>从此输入流中读取一个字节的数据。</th></tr></thead><tbody><tr><td><code>int</code></td><td><code>read(byte[] b)</code></td><td>从此输入流 <code>b.length</code>最多 <code>b.length</code>字节的数据读  <code>b.length</code>字节数组。</td></tr><tr><td><code>int</code></td><td><code>read(byte[] b, int off,  int len)</code></td><td>从此输入流 <code>len</code>最多 <code>len</code>字节的数据读入一个字节数组。</td></tr></tbody></table><h3 id="2-使用：-1"><a href="#2-使用：-1" class="headerlink" title="2.使用："></a>2.使用：</h3><p>1.read()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只读一个，返回的是67--> 'C' </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//控制台会连续读出C和D两个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.read(byte[] b)</p><p>首先将a.txt改为26英文字符</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211012190331409.png"> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表示一个读10个字符</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*末尾四个字符qrst表示字节数组末尾没被替换一起被输出了，是错误的abcdefghijklmnopqrstuvwxyzqrst*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>正确写法</strong>：不会导致qrst被读入，调用String指定位置读入指定长度</p><p><img src="C:/Users/10452/AppData/Roaming/Typora/typora-user-images/image-20211012191141218.png"> </p><h2 id="四、FileWriter-字符写出"><a href="#四、FileWriter-字符写出" class="headerlink" title="四、FileWriter(字符写出)"></a>四、FileWriter(字符写出)</h2><ul><li><strong>会识别中文等各个字符一整个进行输出，不会导致读取一半导致乱码</strong></li></ul><h3 id="1-采用上面方法进行编码，控制台输出"><a href="#1-采用上面方法进行编码，控制台输出" class="headerlink" title="1.采用上面方法进行编码，控制台输出"></a>1.采用上面方法进行编码，控制台输出</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211012223121614.png">     </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211012223534510.png">    </p><p><strong>原因：正常一个中文字符占2个字节，但是采用utf-8动态编码集，因此一个中文字符不一定是两个字节。</strong></p><p>‘<strong>？</strong>’<strong>表示只读了一半的字，因此需要字符流来解决读取一半字的问题，但是编码集还得手动控制</strong></p><h3 id="2-常用方法："><a href="#2-常用方法：" class="headerlink" title="2.常用方法："></a>2.常用方法：</h3><table><thead><tr><th><code>void</code></th><th><code>flush()</code></th><th>刷新流。</th></tr></thead><tbody><tr><td><code>void</code></td><td><code>write(char[] cbuf, int off,  int len)</code></td><td>写一个字符数组的一部分。</td></tr><tr><td><code>void</code></td><td><code>write(int c)</code></td><td>写一个字符。</td></tr><tr><td><code>void</code></td><td><code>write(String str, int off,  int len)</code></td><td>写一个字符串的一部分。</td></tr></tbody></table><h3 id="3-使用："><a href="#3-使用：" class="headerlink" title="3.使用："></a>3.使用：</h3><p>1.write(int c):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为字符a的范围比整形小，所以会自动转换成整数传进去！</span>fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.write(String str):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好中国！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-flush-刷新管道"><a href="#4-flush-刷新管道" class="headerlink" title="4.flush()刷新管道"></a>4.flush()刷新管道</h3><ul><li>​    <strong>默认流关闭会自动调用flush()，但是在流没有关闭的情况下，字符从内存输出到磁盘时若不手动调用flush()可能会导致磁盘文件没有内容显示，字符可能还在缓冲当中</strong></li></ul><h2 id="五、FileReader-字符读入"><a href="#五、FileReader-字符读入" class="headerlink" title="五、FileReader(字符读入)"></a>五、FileReader(字符读入)</h2><h3 id="1-常用方法：-2"><a href="#1-常用方法：-2" class="headerlink" title="1.常用方法："></a>1.常用方法：</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211012230433888.png"> </p><h3 id="2-使用：-2"><a href="#2-使用：-2" class="headerlink" title="2.使用："></a>2.使用：</h3><p><img src="C:/Users/10452/AppData/Roaming/Typora/typora-user-images/image-20211012230728868.png"> 此时a.txt内容</p><p>1.read():</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> read <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将整型转换成字符--->'锄'</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.利用循环和read()读完所有内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> read <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//锄禾日当午，汗滴禾下土，谁知盘中餐，粒粒皆辛苦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.利用char[]指定大小数组和read(char[] c)以及String构造函数new String(char,0,len)d读完所有内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"G:/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入时用于存储字符的容器</span><span class="token keyword">int</span> len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回的char数组中实际存储字符的个数</span><span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//锄禾日当午，汗滴禾下土，谁知盘中餐，粒粒皆辛苦</span><span class="token comment">//23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、转换流"><a href="#六、转换流" class="headerlink" title="六、转换流"></a>六、转换流</h2><ul><li>​    <strong>特点：字节流装饰为字符流：使用装饰者设计模式</strong></li></ul><h3 id="1-字节读入—-gt-字符读入："><a href="#1-字节读入—-gt-字符读入：" class="headerlink" title="1.字节读入—&gt;字符读入："></a>1.字节读入—&gt;字符读入：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"G://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//假设用到了网络爬虫，绝大部分几乎都是字节流，要获取中文等字符必须转换为字符流。</span><span class="token comment">//参数1：要转换的字节流</span><span class="token comment">//参数2：指定编码名称</span><span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> read <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//锄禾日当午，汗滴禾下土，谁知盘中餐，粒粒皆辛苦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-字节写出—-gt-字符写出："><a href="#2-字节写出—-gt-字符写出：" class="headerlink" title="2.字节写出—&gt;字符写出："></a>2.字节写出—&gt;字符写出：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//假设下面这一行获取的字节输出流是获取到的一个要给客户端发送数据的流，这里new是为了演示代码</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"G://b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"床前明月光"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>osw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尤其是在调用字符流写出时不要忘记加flush()刷新缓存</span>osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211012234708059.png"> </p><h2 id="七、打印流和缓存读取流"><a href="#七、打印流和缓存读取流" class="headerlink" title="七、打印流和缓存读取流"></a>七、打印流和缓存读取流</h2><h3 id="1-打印流"><a href="#1-打印流" class="headerlink" title="1.打印流"></a>1.打印流</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//字符输出(打印流)</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"G://c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字节的打印流，所以不要flush()，在c.txt中也有内容</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在c.txt文件里有如下内容</span><span class="token comment">//锄禾日当午，汗滴禾下土1</span><span class="token comment">//锄禾日当午，汗滴禾下土2</span><span class="token comment">//锄禾日当午，汗滴禾下土3</span><span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token string">"G://c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符的打印流，所以得手动flush</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午，汗滴禾下土3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-缓存读取流"><a href="#2-缓存读取流" class="headerlink" title="2.缓存读取流"></a>2.缓存读取流</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//缓存读取流：将字符输入流，转换为带有缓存，可以一次读取一行的缓存字符读取流</span><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"G://c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> text <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回读取一行的数据，数据末尾返回null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c.txt中三行只读取一行</span><span class="token comment">//锄禾日当午，汗滴禾下土1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
            <tag> InputStream </tag>
            
            <tag> OutStream </tag>
            
            <tag> Reader </tag>
            
            <tag> Writer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合总结归纳</title>
      <link href="/2021/10/10/Java%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/"/>
      <url>/2021/10/10/Java%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211011001259291.png"></p><h1 id="Java集合总结归纳"><a href="#Java集合总结归纳" class="headerlink" title="Java集合总结归纳"></a>Java集合总结归纳</h1><p>​    <strong>集合框架：</strong></p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211010014537419.png" alt="image-20211010014537419" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211010014356487.png" alt="image-20211010014356487" style="zoom:80%;" /> <h2 id="一-Collcetion接口"><a href="#一-Collcetion接口" class="headerlink" title="一.Collcetion接口"></a>一.Collcetion接口</h2><p>●Collection接口是List、Set 和Queue接口的父接口，该接口里定义的方法既可用于操作Set集合，也可用于操作List和Queue集合。</p><p>（1）List：有序，可以存放重复的内容<br>（2）Set：无序，不能存放重复的内容，所以的重复内容靠hashCode()和equals()两个方法区分<br>（3）Queue：队列接口<br>（4）SortedSet：可以对集合中的数据进行排序</p><p>●collection的常见方法<br>1.添加<br>　　boolean add(Object obj); –添加<br>　　boolean addAll(Collection coll) –添加集合<br>2.删除<br>　　boolean remove(Ooject obj); –删除<br>　　boolean remove(Collection coll) –删除集合<br>　　void clear() –移除所有内容<br>3.判断<br>　　boolean contains(object obj); –判断些集合指定的元素，则返回true<br>　　boolean containsAll(Collection coll) –判断些集合指定的合集，则返回true<br>　　boolean isEmpty(): –判断集合中是否有元素。<br>4.获取：<br>　　int size(); –返回集合中的元素数<br>　　Iterator iterator(); –取出元素的方式：迭代器</p><h3 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a>1.List</h3><p>●List:元素有序，可重复的集合–”动态”数组</p><h4 id="①-ArrayList"><a href="#①-ArrayList" class="headerlink" title="①.ArrayList"></a>①.ArrayList</h4><p>​        线程不安全，查询速度快。底层都是基于数组来储存集合元素，封装了一个动态的Object[]数组，是一种顺序存储的线性表。</p><h4 id="②-LinkedList"><a href="#②-LinkedList" class="headerlink" title="②.LinkedList"></a>②.LinkedList</h4><p>​        线程不安全，增删速度快，没有同步方法，是一个链式存储的线性变，本质上是一个双向链表。</p><h3 id="2-Set"><a href="#2-Set" class="headerlink" title="2.Set"></a>2.Set</h3><p>●Set：元素无序、不可重复的集合–类似高中的”集合”</p><h4 id="①HashSet"><a href="#①HashSet" class="headerlink" title="①HashSet"></a>①HashSet</h4><p>底层数据结构由HashMap的键来实现。不保证集合中元素的顺序，即不能保证迭代的顺序与插入的顺序一致。是线程不安全的。</p><h4 id="②TreeSet"><a href="#②TreeSet" class="headerlink" title="②TreeSet"></a>②TreeSet</h4><p>有序的存放，线程不安全，可以对Set集合中的元素进行排序，由红黑树来实现排序，TreeSet实际上也是SortedSet接口的子类，其在方法中实现了SortedSet的所有方法，并使用comparator()方法进行排序。</p><h4 id="③LinkedHashSet"><a href="#③LinkedHashSet" class="headerlink" title="③LinkedHashSet"></a>③LinkedHashSet</h4><p>底层由链表实现，按照元素插入的顺序进行迭代，即迭代输出的顺序与插入的顺序保持一致</p><h2 id="二-Map接口"><a href="#二-Map接口" class="headerlink" title="二.Map接口"></a>二.Map接口</h2><p>●Map接口:具有映射关系“key-value键值对” 的集合–类似于高中的“函数”y=f(x) (x1,y1) (x2,y2)</p><h3 id="1-HashMap（子类：LinkedHashMap）"><a href="#1-HashMap（子类：LinkedHashMap）" class="headerlink" title="1.HashMap（子类：LinkedHashMap）"></a>1.HashMap（子类：LinkedHashMap）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">HaspMap</span> <span class="token operator">:</span> 作为<span class="token class-name">Map</span>的主要实现类<span class="token punctuation">;</span>线程不安全，效率高<span class="token punctuation">;</span>可以存储<span class="token keyword">null</span>的key和value<span class="token operator">*</span>    <span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">LinkedHashMap</span><span class="token operator">:</span>保证在遍历map元素时，可以按照添加顺序实现遍历。<span class="token operator">*</span>                  原因<span class="token operator">:</span>在原有的<span class="token class-name">HaspMap</span>底层结构基础上<span class="token punctuation">,</span>添加了一对指针，指向前一个元素和后一个元素。<span class="token operator">*</span>                  对于频繁的遍历操作，此类执行效率高于<span class="token class-name">HaspMap</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​            HashMap的底层:数组+链表(jdk 7以前)<br>​            数组+链表+红黑树(jdk 8以后)</p><h3 id="2-TreeMap"><a href="#2-TreeMap" class="headerlink" title="2.TreeMap"></a>2.TreeMap</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">TreeMap</span> <span class="token operator">:</span> 可以按照添加的key<span class="token operator">-</span>value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序<span class="token operator">*</span>             底层使用红黑树<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em><strong>使用定制排序需要注意的点：</strong></em></p><h4 id="①实现Comparable对象的比较"><a href="#①实现Comparable对象的比较" class="headerlink" title="①实现Comparable对象的比较"></a>①实现Comparable对象的比较</h4><p><strong>compareTo方法的真正用途：比较当前自己（x）和下一个元素（y）值，当返回值大于0时，则替换位置。。。。。。。这句话很重要，请细品！！！！！！！！比较方法的实现是可以自定义的，也许是x&gt;y时，返回值大于0，替换位置，这时升序；x&lt;y,返回值也可以大于0，替换位置，这时降序</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211008195230866.png"> </p><p>​    这里的意思是按照成绩升序：因为this.score &gt; o.score 表示传新增加People对象成绩更大的话应该排在原本已有对象的下面！！return 1 表示返回的是this的对象，也就是新增加的的对象！！</p><h4 id="②传入Comparator匿名实现类进行对象比较"><a href="#②传入Comparator匿名实现类进行对象比较" class="headerlink" title="②传入Comparator匿名实现类进行对象比较"></a>②传入Comparator匿名实现类进行对象比较</h4><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211009014304325.png" alt="image-20211009014304325" style="zoom:67%;" /> <p>​    这里o1 &gt; o2 return -1；表示按成绩降序！！</p><h3 id="3-HashTable（子类Properties）"><a href="#3-HashTable（子类Properties）" class="headerlink" title="3.HashTable（子类Properties）"></a>3.HashTable（子类Properties）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">Hashtable</span> <span class="token operator">:</span> 作为古老实现类<span class="token punctuation">,</span>线程安全，效率低<span class="token punctuation">;</span>不能存储<span class="token keyword">null</span>的key，value<span class="token operator">*</span>       <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">:</span><span class="token class-name">Properties</span><span class="token operator">:</span>常用来处理配置文件。key<span class="token operator">-</span>value 都是<span class="token class-name">String</span>类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三-Iterator接口和ListIterator接口"><a href="#三-Iterator接口和ListIterator接口" class="headerlink" title="三.Iterator接口和ListIterator接口"></a>三.Iterator接口和ListIterator接口</h2><p>Iterator是一个接口，它是集合的迭代器。集合可以通过Iterator去遍历集合中的元素。Iterator提供的API接口如下：</p><p>　　♦ boolean hasNext()：判断集合里是否存在下一个元素。如果有，hasNext()方法返回 true。<br>　　♦ Object next()：返回集合里下一个元素。<br>　　♦ void remove()：删除集合里上一次next方法返回的元素。</p><p>　　ListIterator接口继承Iterator接口，提供了专门操作List的方法。ListIterator接口在Iterator接口的基础上增加了以下几个方法：</p><p>　　♦ boolean hasPrevious()：判断集合里是否存在上一个元素。如果有，该方法返回 true。<br>　　♦ Object previous()：返回集合里上一个元素。<br>　　♦ void add(Object o)：在指定位置插入一个元素。</p><p>　　以上两个接口相比较，不难发现，ListIterator增加了向前迭代的功能（Iterator只能向后迭代），ListIterator还可以通过add()方法向List集合中添加元素（Iterator只能删除元素）。</p><h2 id="四-常见面试题"><a href="#四-常见面试题" class="headerlink" title="四.常见面试题"></a>四.常见面试题</h2><h3 id="1-Collection-和-Collections的区别"><a href="#1-Collection-和-Collections的区别" class="headerlink" title="1.Collection 和 Collections的区别"></a>1.Collection 和 Collections的区别</h3><p>答：Collection是集合类的上级接口，继承于他的接口主要有Set 和List.</p><p>Collections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作</p><h3 id="2-Set里的元素是不能重复的，那么用什么方法来区分重复与否呢-是用-还是equals-它们有何区别"><a href="#2-Set里的元素是不能重复的，那么用什么方法来区分重复与否呢-是用-还是equals-它们有何区别" class="headerlink" title="2.Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别"></a>2.Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别</h3><p>答：Set里的元素是不能重复的，用equals()方法判读两个Set是否相等</p><p>  equals()和==方法决定引用值是否指向同一对象equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值</p><h3 id="3-List-Set-Map是否继承自Collection接口"><a href="#3-List-Set-Map是否继承自Collection接口" class="headerlink" title="3.List, Set, Map是否继承自Collection接口"></a>3.List, Set, Map是否继承自Collection接口</h3><p>答： List，Set是，Map不是</p><h3 id="4-两个对象值相同-x-equals-y-true-，但却可有不同的hash-code，这句话对不对"><a href="#4-两个对象值相同-x-equals-y-true-，但却可有不同的hash-code，这句话对不对" class="headerlink" title="4. 两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?"></a>4. 两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?</h3><p>答：不对，有相同的hash code</p><h3 id="5-说出ArrayList-Vector-LinkedList的存储性能和特性"><a href="#5-说出ArrayList-Vector-LinkedList的存储性能和特性" class="headerlink" title="5. 说出ArrayList,Vector, LinkedList的存储性能和特性"></a>5. 说出ArrayList,Vector, LinkedList的存储性能和特性</h3><p>答：ArrayList和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector由于使用了synchronized方法（线程安全），通常性能上较ArrayList差，而LinkedList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。</p><h3 id="6-HashMap和Hashtable的区别"><a href="#6-HashMap和Hashtable的区别" class="headerlink" title="6.HashMap和Hashtable的区别"></a>6.HashMap和Hashtable的区别</h3><p>答：</p><p>1.HashMap与Hashtable都实现了Map接口。由于HashMap的非线程安全性，效率上可能高于Hashtable。Hashtable的方法是Synchronize的，而HashMap不是，在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap 就必须为之提供外同步。</p><p>2.HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。</p><p>3.HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。因为contains方法容易让人引起误解。 </p><p>4.Hashtable继承自Dictionary类，而HashMap是Java1.2引进的Map interface的一个实现。</p><p>5.Hashtable和HashMap采用的hash/rehash算法都大概一样，所以性能不会有很大的差异。</p><h3 id="7-ArrayList和Vector的区别"><a href="#7-ArrayList和Vector的区别" class="headerlink" title="7.ArrayList和Vector的区别"></a>7.ArrayList和Vector的区别</h3><p>答：就ArrayList与Vector主要从二方面来说.</p><p>一.同步性:Vector是线程安全的，也就是说是同步的，而ArrayList是线程序不安全的，不是同步的</p><p>二.数据增长:当需要增长时,Vector默认增长为原来一培，而ArrayList却是原来的一半</p><h3 id="8-你所知道的集合类都有哪些？主要方法"><a href="#8-你所知道的集合类都有哪些？主要方法" class="headerlink" title="8.你所知道的集合类都有哪些？主要方法?"></a>8.你所知道的集合类都有哪些？主要方法?</h3><p>答：最常用的集合类是 List 和 Map。 List 的具体实现包括 ArrayList 和 Vector，它们是可变大小的列表，比较适合构建、存储和操作任何类型对象的元素列表。 List 适用于按数值索引访问元素的情形。 </p><p>Map 提供了一个更通用的元素存储方法。 Map 集合类用于存储元素对（称作”键”和”值”），其中每个键映射到一个值。</p><h3 id="9-以下代码的运行结果"><a href="#9-以下代码的运行结果" class="headerlink" title="9.以下代码的运行结果?"></a>9.以下代码的运行结果?</h3><table><thead><tr><th><strong>public</strong> <strong>static</strong> <strong>void</strong> main(String[] args) {        Integer[] datas = {1,2,3,4,5};        List<Integer> list = Arrays.<em>asList</em>(datas);        list.add(5);        System.*<strong>out*</strong>.println(list.size());    }</th></tr></thead><tbody><tr><td>运行异常，不允许添加元素,因为asList的返回对象是一个Arrays内部类,并没有实现集合的修改方法。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaSe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java集合 </tag>
            
            <tag> Collection </tag>
            
            <tag> Map </tag>
            
            <tag> Iterator </tag>
            
            <tag> 集合面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown入门语法</title>
      <link href="/2021/10/10/markdown%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/10/10/markdown%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211011000448621.png"></p><h1 id="markdown-快速入门语法"><a href="#markdown-快速入门语法" class="headerlink" title="markdown 快速入门语法"></a>markdown 快速入门语法</h1><h2 id="java开发学习路线-https-shimo-im-docs-KY8RHjcgdqwq88kq-read"><a href="#java开发学习路线-https-shimo-im-docs-KY8RHjcgdqwq88kq-read" class="headerlink" title="java开发学习路线 https://shimo.im/docs/KY8RHjcgdqwq88kq/read"></a>java开发学习路线 <a href="https://shimo.im/docs/KY8RHjcgdqwq88kq/read">https://shimo.im/docs/KY8RHjcgdqwq88kq/read</a></h2><h2 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//代码块语法:</span>```java    ```shell    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1.java代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">```<span class="token operator">*</span><span class="token operator">*</span><span class="token number">2</span>shell脚本<span class="token operator">*</span><span class="token operator">*</span>```shell<span class="token comment">//linux下spring项目的启动命令</span>#java <span class="token operator">-</span>jar blog start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、标题："><a href="#2、标题：" class="headerlink" title="2、标题："></a>2、标题：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//标题语法</span># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加粗</span><span class="token operator">*</span><span class="token operator">*</span>等不到天黑（加粗）<span class="token operator">*</span><span class="token operator">*</span><span class="token comment">//代码高亮显示</span><span class="token operator">==</span>代码高亮部分显示<span class="token operator">==</span><span class="token comment">//删除线</span><span class="token operator">~</span><span class="token operator">~</span>被删除的文字<span class="token operator">~</span><span class="token operator">~</span><span class="token comment">//斜体</span><span class="token operator">*</span>斜体内容<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//加粗<br><strong>等不到天黑（加粗）</strong><br>//代码高亮显示<br>==代码高亮部分显示==<br>//删除线<br><del>被删除的文字</del><br>//斜体<br><em>斜体内容</em></p><h2 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//引用语法</span><span class="token operator">></span>作者<span class="token operator">:</span>lxy<span class="token operator">>></span>作者<span class="token operator">:</span>lxy<span class="token operator">>>></span>作者<span class="token operator">:</span>lxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>作者:lxy</p><blockquote><p>作者:lxy</p><blockquote><p>作者:lxy</p></blockquote></blockquote></blockquote><h2 id="5-分割线："><a href="#5-分割线：" class="headerlink" title="5.分割线："></a>5.分割线：</h2><pre class="line-numbers language-jav" data-language="jav"><code class="language-jav">&#x2F;&#x2F;分割线1:---&#x2F;&#x2F;分割线2:***<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h3 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入:"></a>6.图片插入:</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在线图片 and 本地图片</span><span class="token operator">!</span><span class="token punctuation">[</span>图片名字<span class="token punctuation">]</span><span class="token punctuation">(</span>图片路径<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-超链接："><a href="#7-超链接：" class="headerlink" title="7.超链接："></a>7.超链接：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//超链接语法：</span><span class="token punctuation">[</span>我的hexo<span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>lxy197120<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="http://lxy197120.github.io/">我的hexo</a></p><h2 id="8-列表："><a href="#8-列表：" class="headerlink" title="8.列表："></a>8.列表：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//无序列表</span><span class="token operator">-</span> 目录<span class="token number">1</span><span class="token operator">-</span> 目录<span class="token number">2</span><span class="token operator">-</span> 目录<span class="token number">3</span><span class="token comment">//有序列表</span><span class="token comment">//1+. + 名称</span><span class="token number">1</span> <span class="token punctuation">.</span> 首页<span class="token number">2</span> <span class="token punctuation">.</span> 分类<span class="token number">3</span> <span class="token punctuation">.</span> 标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>目录1</li><li>目录2</li><li>目录3</li></ul><p>1 . 首页<br>2 . 分类<br>3 . 标签</p><h2 id="9-表格："><a href="#9-表格：" class="headerlink" title="9.表格："></a>9.表格：</h2><table><thead><tr><th>成绩</th><th>语文</th><th>数学</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java常用类库简单说明</title>
      <link href="/2021/10/06/java%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%B4%E6%98%8E/"/>
      <url>/2021/10/06/java%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211011000831318.png"></p><h1 id="java常用类库："><a href="#java常用类库：" class="headerlink" title="java常用类库："></a>java常用类库：</h1><h2 id="1-java-util-Objects"><a href="#1-java-util-Objects" class="headerlink" title="1.java.util.Objects"></a>1.java.util.Objects</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果是空会抛异常，让程序中断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-java-lang-Math"><a href="#2-java-lang-Math" class="headerlink" title="2.java.lang.Math"></a>2.java.lang.Math</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简单实例</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//200</span><span class="token comment">//四舍五入</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">100.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//101</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-100</span><span class="token comment">//返回小于等于参数的最大整数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-4.5</span><span class="token comment">//返回大于等于参数的最大整数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-3.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-java-math-Arrays"><a href="#3-java-math-Arrays" class="headerlink" title="3.java.math.Arrays"></a>3.java.math.Arrays</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[I@58ceff1 -->地址</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 6, 7, 5, 4, 3, 9, 2]</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 3, 4, 5, 6, 7, 9]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//二分查找返回找到元素下标</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8</span>arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//扩容数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-java-math-BigDecimal-–-gt-要运算不产生误差可以使用："><a href="#4-java-math-BigDecimal-–-gt-要运算不产生误差可以使用：" class="headerlink" title="4.java.math.BigDecimal –&gt;要运算不产生误差可以使用："></a>4.java.math.BigDecimal –&gt;要运算不产生误差可以使用：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.30000000000000004 -->java小数运算误差</span><span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b3 <span class="token operator">=</span> b1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加</span><span class="token class-name">BigDecimal</span> b4 <span class="token operator">=</span> b1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//减</span><span class="token class-name">BigDecimal</span> b5 <span class="token operator">=</span> b1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//乘</span><span class="token class-name">BigDecimal</span> b6 <span class="token operator">=</span> b1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//除</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-0.1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.02</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.5</span><span class="token comment">//可以通过BigDecimal的对象.xxxValue()方法获取对象里的值！！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-java-util-Date"><a href="#5-java-util-Date" class="headerlink" title="5.java.util.Date"></a>5.java.util.Date</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取当前时间</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token keyword">long</span> time <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//往前推一天</span><span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Wed Oct 06 00:33:39 CST 2021</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tue Oct 05 00:33:39 CST 2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-java-util-DateFormat"><a href="#6-java-util-DateFormat" class="headerlink" title="6.java.util.DateFormat"></a>6.java.util.DateFormat</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//DateFormat是抽象类，得实例化它的子类SimpleDateFormat</span><span class="token comment">/** y : 年* M : 月* d : 日* H : 时* m : 分* s : 秒* */</span><span class="token class-name">SimpleDateFormat</span> format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//format将data对象装换为字符串yyyy年MM月dd日 HH:mm ss</span><span class="token class-name">SimpleDateFormat</span> format1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> text <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021年10月06日 00:46 50</span><span class="token class-name">String</span> text1 <span class="token operator">=</span> format1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-10-06 00:46 50</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//parse:将 yyyy-MM-dd HH:mm ss 日期字符串装换为date对象</span><span class="token class-name">Date</span> date <span class="token operator">=</span> format1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-12-12 12:12 12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时间戳转换为距指定时间的天数：-67</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-java-util-Calendar"><a href="#7-java-util-Calendar" class="headerlink" title="7.java.util.Calendar"></a>7.java.util.Calendar</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Calendar.Year的值是底层Calendar里数组下标</span><span class="token class-name">Calendar</span> cl <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> year <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021</span><span class="token keyword">int</span> day <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//279</span>cl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2022</span>cl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2032</span><span class="token comment">//getTime:获取日历时间表示的Date对象</span><span class="token class-name">Date</span> date <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取修改操作完毕后的Date对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-java-lang-System"><a href="#8-java-lang-System" class="headerlink" title="8.java.lang.System"></a>8.java.lang.System</h2><p>System.gc()、System.exit()…… //看jdk11_API</p><h2 id="9-String"><a href="#9-String" class="headerlink" title="9.String"></a>9.String</h2><p>在进行字符串拼接的时候尽量不用”+“进行连接，会造成内存浪费，（存在永久区里，地址不用也没有删除）</p><p>常用方法看API</p>]]></content>
      
      
      <categories>
          
          <category> JavaSe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java常用类库 </tag>
            
            <tag> Arrays </tag>
            
            <tag> Date </tag>
            
            <tag> DateFormat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库开发基础</title>
      <link href="/2021/09/28/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/09/28/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211011001535361.png"></p><h1 id="Oracle数据库开发基础"><a href="#Oracle数据库开发基础" class="headerlink" title="Oracle数据库开发基础"></a>Oracle数据库开发基础</h1><h2 id="一-SQL-Structure-Query-Language-，基本语句"><a href="#一-SQL-Structure-Query-Language-，基本语句" class="headerlink" title="一.SQL(Structure Query Language)，基本语句"></a>一.SQL(Structure Query Language)，基本语句</h2><h2 id="1-基本认识："><a href="#1-基本认识：" class="headerlink" title="1.基本认识："></a>1.基本认识：</h2><p>1.DQL(Data Query Language)</p><p>​    select…from…where…</p><p>2.DML(Data Manipulation操作 Language)</p><p>​    insert…    update…    delete…</p><p>3.TPL(Transaction Processing Language)</p><p>​    commit    rollback    savepoint</p><p>4.DCL(Data Control Language)</p><p>​    grant授予    revoke撤销</p><p>5.DDL(Data Definition Language)</p><p>​    create    alter    drop    truncate    rename</p><p>6.CCL(Cursor Control    Language)</p><p>​    cursor游标</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--建表操作</span><span class="token keyword">create</span> <span class="token keyword">table</span> info<span class="token punctuation">(</span>id varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    name varchar2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> pk_info <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> sc<span class="token punctuation">(</span>id varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    subject varchar2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    score <span class="token keyword">integer</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token comment">--number(15,2)</span>    <span class="token keyword">constraint</span> uk_sc <span class="token keyword">unique</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>subject<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk_sc_id <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">references</span> info<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> ck_sc_score <span class="token keyword">check</span><span class="token punctuation">(</span>score <span class="token operator">between</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-删除语句"><a href="#2-删除语句" class="headerlink" title="2.删除语句"></a>2.删除语句</h3><p>drop table xx </p><p>作用：删除内容和定义，释放空间。简单来说就是把整个表去掉.以后要新增数据是不可能的,除非新增一个表。 drop table test,就是把整个表 移除.里面的数据都消失</p><p>truncate table xx</p><p>作用：删除内容、释放空间但不删除定义。与drop不同的是,他只是清空表数据而已,不删除表结构。<strong>没有该删除的日志信息，不能回退！</strong>，在企业里除非备份</p><p> delete table + 表名 //删除所有表中信息</p><p>作用：也是删除整个表的数据,但是过程是痛苦的(系统一行一行地删,效率较truncate低) 或delete table tb where 条件</p><p>删除内容不删除定义，不释放空间。<strong>就算数据都删除了但可以回退</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--删表</span><span class="token comment">--先删除sc，在删info，因为sc唯一主键被外键</span><span class="token keyword">drop</span> <span class="token keyword">table</span> sc<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> info<span class="token punctuation">;</span><span class="token comment">--或者直接无视约束删表！</span><span class="token keyword">drop</span> <span class="token keyword">table</span> sc <span class="token keyword">cascade</span> <span class="token keyword">constraint</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-数据类型，约束，数据字典以及对表的操作"><a href="#3-数据类型，约束，数据字典以及对表的操作" class="headerlink" title="3.数据类型，约束，数据字典以及对表的操作"></a>3.数据类型，约束，数据字典以及对表的操作</h3><p>1.数据类型：</p><p>Integer    Number    Date    Varchar2…</p><p>2.约束：</p><p>Not null    Primary key    Foreign key    Unique    Check</p><p>3.描述表</p><p>desc + 表名 //查看表结构，不用加分号，属于命令</p><p>4.Information from Data Dictionary</p><pre class="line-numbers language-none"><code class="language-none">--以user开头普通账户都能查，只能看自己能够看到的表select *from user_tables where table_name &#x3D; &#39;INFO&#39;;select *from user_tables where table_name &#x3D; &#39;SC&#39;;select *from user_tab_columns where table_name &#x3D; &#39;INFO&#39;--注:若以dba_tables开头能查所有用户的表，因为是数据库管理员！！!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210928003601195.png" alt="image-20210928003601195"> </p><p>5.新增列：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> info <span class="token keyword">add</span> grade <span class="token keyword">integer</span> <span class="token keyword">default</span> <span class="token number">2020</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.修改表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> sc <span class="token keyword">modify</span> subject varchar2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> info <span class="token keyword">modify</span> grade <span class="token keyword">default</span> <span class="token number">2021</span><span class="token punctuation">;</span><span class="token comment">--已经在表的默认2020不变，新加默认2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7.删除列：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> info <span class="token keyword">drop</span> <span class="token keyword">column</span> birthday<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.删除约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> sc <span class="token keyword">drop</span> <span class="token keyword">constraint</span> fk_sc_id<span class="token punctuation">;</span><span class="token comment">--删除sc表外键约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.新增约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> sc <span class="token keyword">modify</span> id <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span> <span class="token comment">--添加非空约束用modify，原来是可以为空修改为非空</span><span class="token keyword">alter</span> <span class="token keyword">table</span> sc <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_sc_id <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">references</span> info<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> user_constraints <span class="token keyword">where</span> table_name <span class="token operator">=</span> <span class="token string">'SC'</span> <span class="token comment">--查看SC表所有约束(以当前用户查看)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.给表或列些注释：desc + 表名 可以看到Comments注释！！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">table</span> info <span class="token operator">is</span> <span class="token string">'Student Information'</span><span class="token punctuation">;</span><span class="token comment">//表名的注释</span><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> info<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token string">'Student ID'</span><span class="token punctuation">;</span><span class="token comment">//给info表里的id这个列加注释</span><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> info<span class="token punctuation">.</span>name <span class="token operator">is</span> <span class="token string">'Student Name'</span><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> info<span class="token punctuation">.</span>grade <span class="token operator">is</span> <span class="token string">'Student Grade'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE入门必备知识-Servlet篇</title>
      <link href="/2021/09/25/JavaEE%E5%85%A5%E9%97%A8%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86-Servlet%E7%AF%87/"/>
      <url>/2021/09/25/JavaEE%E5%85%A5%E9%97%A8%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86-Servlet%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20211011001024371.png"></p><h2 id="1-Servlet-工作流程以及实现"><a href="#1-Servlet-工作流程以及实现" class="headerlink" title="1.Servlet 工作流程以及实现"></a>1.Servlet 工作流程以及实现</h2><h3 id="1-1：主要内容"><a href="#1-1：主要内容" class="headerlink" title="1.1：主要内容"></a>1.1：主要内容</h3><ul><li>1.创建普通java类</li><li>2.满足Servlet规范（继承HTTPServlet类）</li><li>3.重写service方法（当请求Servlet类时，会自动调用service方法）</li><li>4.设置Servlet对外访问路径<br> 如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210925163435755.png"></p><p>//其中参数代表，localhost:8080/项目名/value可以访问到service（）</p><h3 id="1-2：实现流程"><a href="#1-2：实现流程" class="headerlink" title="1.2：实现流程"></a>1.2：实现流程</h3><p>然后启动Tomcat，idea控制台会显示 Hello！！！，因为接收请求成功，执行service（）方法，然后向浏览器响应66666!</p><p>谷歌浏览器，鼠标右击打开检查，打开Network，点击viewsource如下：查看请求头和响应头！！</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210922215455802.png"> </p><p>通过请求头获知浏览器访问的哪个主机</p><p>再通过请求行获取访问的是哪一个web应用</p><p>再通过请求行中的请求路径获知访问的是哪一个资源</p><p>通过获取资源路径在配置中匹配到真实路径</p><p>服务器会创建servlet对象，（如果是第一次访问，创建servlet实例，并调用init方法进行初始化操作）</p><p>调用service（request，response）方法来处理请求和响应的操作<br>调用service完毕后会返回服务器，由服务器讲response缓冲区的数据取出，以http响应的格式发送给浏览器</p><h3 id="1-3：最终流程总结"><a href="#1-3：最终流程总结" class="headerlink" title="1.3：最终流程总结"></a>1.3：最终流程总结</h3><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210925163212830.png"></p><h2 id="2-HttpServletRequest对象-请求"><a href="#2-HttpServletRequest对象-请求" class="headerlink" title="2.HttpServletRequest对象(请求)"></a>2.HttpServletRequest对象(请求)</h2><p>​    HttpServletRequest对象代表客户端的请求，当客户端通过HTTP协议访问服务器时，HTTP请求头中的所有信息都封装在这个对象中，通过这个对象提供的方法，可以获得客户端请求的所有信息。</p><h3 id="2-1-接收请求"><a href="#2-1-接收请求" class="headerlink" title="2.1.接收请求"></a>2.1.接收请求</h3><h4 id="2-1-1-常用方法"><a href="#2-1-1-常用方法" class="headerlink" title="2.1.1.常用方法"></a>2.1.1.常用方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*1.常用方法*   1.获取请求方式（get/post等）*   2.获取请求路径（从http开始到？结束）*   3.获取请求部分路径（从项目路径开始到？结束）*   4.获取请求的参数字符串（从？开始到最后）*   5.获取请求协议版本*   6.获取项目的访问路径（站点名，例ser04）//        System.out.println(req.getMethod());//        System.out.println(req.getRequestURL());//        System.out.println(req.getRequestURI());//        System.out.println(req.getQueryString());//        System.out.println(req.getProtocol());//        System.out.println(req.getContextPath());</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210925163053662.png"></p><h4 id="2-1-2-获取请求参数"><a href="#2-1-2-获取请求参数" class="headerlink" title="2.1.2.获取请求参数"></a>2.1.2.获取请求参数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>   <span class="token number">1.</span>获取指定参数名的参数值<span class="token operator">*</span>       request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span><span class="token operator">*</span>       注：<span class="token operator">*</span>           <span class="token number">1.</span>表单提交：<span class="token operator">*</span>               参数名表示的是表单元素的name属性值<span class="token operator">*</span>           <span class="token number">2.</span>地址栏输入：<span class="token operator">*</span>               参数名表示的是：<span class="token string">"?键=值&amp;键=值"</span>的键<span class="token operator">*</span>   <span class="token number">2.</span>获取指定参数名的所有参数值<span class="token operator">*</span>       request<span class="token punctuation">.</span><span class="token function">getParameterValue</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token comment">//获取指定参数</span><span class="token class-name">String</span> uname <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> upwd <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userPwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token operator">+</span> uname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码："</span><span class="token operator">+</span> upwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取多个参数</span><span class="token comment">//System.out.println(req.getParameterValues("hobby").length);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210923105454863.png"></p><h3 id="2-2-请求乱码问题"><a href="#2-2-请求乱码问题" class="headerlink" title="2.2.请求乱码问题"></a>2.2.请求乱码问题</h3><h4 id="2-2-1-乱码原因"><a href="#2-2-1-乱码原因" class="headerlink" title="2.2.1.乱码原因"></a>2.2.1.乱码原因</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">request有默认的解析编码，ISO<span class="token operator">-</span><span class="token number">8859</span><span class="token operator">-</span><span class="token number">1</span>，这种编码不支持中文，传递中文参数必定乱码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-2-解决方案"><a href="#2-2-2-解决方案" class="headerlink" title="2.2.2.解决方案"></a>2.2.2.解决方案</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>      <span class="token number">1.</span>只针对POST请求的乱码问题（处理所有参数）<span class="token operator">*</span>          request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">*</span>      <span class="token number">2.</span>任意请求方式都有效（一次处理一个参数）<span class="token operator">*</span>          <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>          目前<span class="token class-name">Tomcat8</span>及以上版本<span class="token class-name">Get</span>请求不会出现乱码，所以只要处理<span class="token class-name">Post</span>请求参数乱码即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-请求转发"><a href="#2-3-请求转发" class="headerlink" title="2.3.请求转发"></a>2.3.请求转发</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>   一种跳转方式<span class="token operator">*</span>   <span class="token number">1.</span>服务端跳转<span class="token operator">*</span>   <span class="token number">2.</span>地址栏不发生改变<span class="token operator">*</span>   <span class="token number">3.</span>只有一次请求<span class="token operator">*</span>   <span class="token number">4.</span>数据可以共享<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-request作用域"><a href="#2-4-request作用域" class="headerlink" title="2.4.request作用域"></a>2.4.request作用域</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>     只在一次请求中有效，只在请求转发跳转有效      req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"姓名或者密码不正确！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置作用域，（任意类型的数据）</span>      req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取作用域的值</span>  req<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span><span class="token comment">//移除指定作用域的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-HttpServletResponse对象"><a href="#3-HttpServletResponse对象" class="headerlink" title="3.HttpServletResponse对象"></a>3.HttpServletResponse对象</h2><p>　　HttpServletResponse对象代表服务器的响应。这个对象中封装了向客户端发送数据、发送响应头，发送响应状态码的方法。查看HttpServletResponse的API，可以看到这些相关的方法。</p><h3 id="3-1-响应数据"><a href="#3-1-响应数据" class="headerlink" title="3.1.响应数据"></a>3.1.响应数据</h3><p>​        接收到客户端请求后，可以通过HttPServletResponse对象直接进行响应，响应时需要获取输出流</p><p>​        有两种形式：</p><p>​                字符输出流 getWriter()</p><p>​                字节输出流getOutputStream()</p><p>​                注：两种流不能同时使用！</p><pre class="line-numbers language-none"><code class="language-none">        &#x2F;&#x2F;得到字符输出流&#x2F;&#x2F;        PrintWriter writer &#x3D; resp.getWriter();&#x2F;&#x2F;        writer.write(&quot;Hello!&quot;);        &#x2F;&#x2F;得到字节输出流        ServletOutputStream outputStream &#x3D; resp.getOutputStream();        outputStream.write(&quot;你好世界&quot;.getBytes());    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-响应乱码问题"><a href="#3-2-响应乱码问题" class="headerlink" title="3.2.响应乱码问题"></a>3.2.响应乱码问题</h3><p>​        对于getWriter()获取到的字符流，响应中文必定出现字符乱码问题，由于服务器端在进行编码时刻<br>​    会默认使用ISO-8859-1，该编码方式不支持中文<br>​        要解决这种乱码只能在服务器端告知服务器使用一种能支持中文编码格式，比如我们常用的”UTF-8”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        此时只完成了一半的工作，要保证数据显示。还还需要指定客户端解码方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"text/html;charset = UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        保证发送端和接收端的编码一致</p><p>或者使用如下代码替代上诉操作，同时指定服务器和客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset = UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-重定向"><a href="#3-3-重定向" class="headerlink" title="3.3.重定向"></a>3.3.重定向</h3><pre class="line-numbers language-none"><code class="language-none">* 3.重定向*      一种跳转方式*      由服务端指导客户端跳转*      1.客户端跳转*      2.地址栏会发生改变*      3.存在两次请求*      4.数据不能共享** 请求转发只能跳转到当前站点下的资源，不可以跨域，重定向可以跳转到任意资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-重定向和转发的区别"><a href="#3-4-重定向和转发的区别" class="headerlink" title="3.4.重定向和转发的区别"></a>3.4.重定向和转发的区别</h3><p>​    请求转发:一种跳转方式</p><p>1.服务端跳转</p><p>2.地址栏不发生改变</p><p>3.存在一次请求</p><p>4.数据可以共享</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">后面<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>表示请求转发但前站点其他资源时，把对象一起传过去req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-Cookie对象"><a href="#4-Cookie对象" class="headerlink" title="4.Cookie对象"></a>4.Cookie对象</h2><p>​        Cookie是浏览器提供的一种技术，通过服务器的程序将一些只需保存在客户端，或者在客户端进行处理大数据，放在本地计算机上，不需要通过网络传输，因而提高网页处理效率，并且能够减少服务器的负载，但是由于Cookie是服务端保存在客户端的信息，所以其安全性也是很差的。例如常用的记住密码则可以通过Cookie来实现</p><p>​        有一个专门操作Cookie的类javax.servlet.http.Cookie ，随着服务器端的响应发送给客户端，保存在浏览器，当下一再访问服务器时把Cookie再带回服务器</p><p>​        Cookie的格式： 键值对用“=”连接，多个键值对用“；”隔开</p><h3 id="4-1-cookie的创建与发送"><a href="#4-1-cookie的创建与发送" class="headerlink" title="4.1.cookie的创建与发送"></a>4.1.cookie的创建与发送</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//得到Cookie对象</span><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送Cookie（将cookie对象响应发送给客户端）</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cookie</span> cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-cookie的获取"><a href="#4-2-cookie的获取" class="headerlink" title="4.2.cookie的获取"></a>4.2.cookie的获取</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token class-name">Cookie</span>的获取<span class="token operator">*</span>      获取所有<span class="token class-name">Cookie</span>对象，返回<span class="token class-name">Cookie</span>数组<span class="token operator">*</span>      request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取所有Cookie对象</span>        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断后遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cookies<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value:"</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取指定name的cookie对象</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"值为："</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-cookie设置到期时间"><a href="#4-3-cookie设置到期时间" class="headerlink" title="4.3.cookie设置到期时间"></a>4.3.cookie设置到期时间</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token class-name">Cookie</span>失效时间<span class="token operator">*</span>      cookie默认是关闭浏览器失效<span class="token punctuation">(</span>与服务器是否关闭无关<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span>      通过maxAge设置cookie失效时间<span class="token operator">*</span>      <span class="token number">1.</span>正整数<span class="token operator">*</span>          表示cookie存活指定秒数<span class="token operator">*</span>      <span class="token number">2.</span>负整数<span class="token operator">*</span>          表示cookie只在浏览器中存活，浏览器关闭即失效，默认值：<span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>      <span class="token number">3.</span>零<span class="token operator">*</span>          表示删除cookie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//得到Cookie对象</span><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置cookie存活秒数</span><span class="token comment">//设置7天失效</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送Cookie（将cookie对象响应发送给客户端）</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cookie</span> cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"uname1"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表示关闭浏览器cookie失效</span>cookie1<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cookie</span> cookie2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"uname2"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//零：表示立即删除</span>cookie2<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除已有的cookie对象</span><span class="token class-name">Cookie</span> cook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cook<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cook<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-cookie的注意点"><a href="#4-4-cookie的注意点" class="headerlink" title="4.4.cookie的注意点"></a>4.4.cookie的注意点</h3><ul><li><p>Cookie保存在当前浏览器中</p><p>​    在一般站点常常有记住用户名这样一个操作，该操作只是将该信息保存在本机上，换电脑以后这些信息就无效了。而且cookie还不能跨浏览器。</p></li><li><p>Cookie存在中文问题</p><p>​    Cookie中不能出现中文，如果有中文则通过URLEncoder.encode()来进行编码，获取时通过URLDecoder.decode()来进行解码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Cookie中不能出现中文，如果有中文则通过URLEncoder.encode()来进行编码</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"，名字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"，测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Cookie cookie = new Cookie("名字","测试");//这个会报错，name不能是中文</span><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个不编码会报错</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210925163627061.png">只编码不解码，在输出端会出现这个问题!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//用这个解码响应浏览器</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value:"</span> <span class="token operator">+</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210923151228648.png">解码后的样子！</p></li><li><p>同名Cookie问题</p></li></ul><p>  ​    在cookie的domian和path相同时，如果服务器端发送重复的Cookie那么会覆盖原有的Cookie</p><p>  ​    但是不同浏览器可以重名Cookie</p><ul><li><p>浏览器存放Cookie数量</p><p>​    不同浏览器对Cookie也有限定，Cookie的存储也是有上限的。Cookie是存储在客户端（浏览器）的，而且一般是由服务器端创建和设定的。后期结合Session来实现回话跟踪。</p></li></ul><h3 id="4-5-cookie的路径"><a href="#4-5-cookie的路径" class="headerlink" title="4.5.cookie的路径"></a>4.5.cookie的路径</h3><p>​        Cookie的setPath()可以设置cookie的路径，这个路径直接决定服务器的请求是否会从浏览器加载某些cookie。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token number">1.</span>在当前项目下的资可以获取<span class="token operator">*</span> <span class="token number">2.</span>在当前服务器下的资源可以获取<span class="token operator">-></span>设置路径为<span class="token string">"/"</span><span class="token operator">*</span> <span class="token number">3.</span>在指定项目的资源下可以访问<span class="token operator">*</span> <span class="token number">4.</span>在指定路径的资源可以访问        <span class="token comment">//1.在当前项目的资源都可以获取，包括前端的.jsp文件也能拿到cookie</span>        <span class="token class-name">Cookie</span> cookie01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie01<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/JavaWeb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie01<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.在当前服务器下的资源可以获取->设置路径为"/"</span>        <span class="token class-name">Cookie</span> cookie02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"a2"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie02<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie02<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.在指定项目下的资源可以访问</span>        <span class="token class-name">Cookie</span> cookie03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"a3"</span><span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie03<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/JavaWeb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie03<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在指定路径的资源可以访问</span>        <span class="token class-name">Cookie</span> cookie04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"a4"</span><span class="token punctuation">,</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie04<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/JavaWeb/cook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie04<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210923153610785.png">一个项目下可以设置多个资源路径</p><h2 id="5-HttpSession对象"><a href="#5-HttpSession对象" class="headerlink" title="5.HttpSession对象"></a>5.HttpSession对象</h2><p>​        HTTPSession是Java平台对session机制的实现规范，因为它仅仅是个接口，具体到每个web应用服务器的提供商，除了对规范支持之外，仍然会有一些规范里没有规定的细微差异。<br>HTTPSession对象将在用户第1次访问服务器时由容器创建(只有访问JSP、Servlet等程序时才会创建，只访问HTML、image等静态资源并不会创建)，当用户调用其失效方法(invalidate()方法)或超过其最大不活动时间时会失效。在会话有效期间，用户与服务器之间的多次请求都属于同一个会话。<br>————————————————<br>原文链接：<a href="https://blog.csdn.net/weixin_49092628/article/details/109287535">https://blog.csdn.net/weixin_49092628/article/details/109287535</a></p><h3 id="5-1-标识符JSESSIONID"><a href="#5-1-标识符JSESSIONID" class="headerlink" title="5.1.标识符JSESSIONID"></a>5.1.标识符JSESSIONID</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>      <span class="token number">2.</span>JSESSIONID标识符<span class="token operator">*</span>          <span class="token number">2.1</span>当请求达到服务器时，如果使用了session，服务器回去获取一个JSESSIONID的cookie对象<span class="token operator">*</span>          <span class="token number">2.2</span>如果cookie对象不存在，则新建立session对象，并设置sessionId，将sessionId回传给客户端中，设置对应的cookie。<span class="token operator">*</span>             如果cookie对象存在，服务器会比较客户端传递的sessionId是否与服务端一致<span class="token operator">*</span>                  如果不一致，新建session对象，并设置sessionId，将sessionId回传给客户端中，重新设置对应的cookie<span class="token operator">*</span>                  如果一致，则获取到当前session对象<span class="token operator">*</span>             <span class="token operator">&lt;</span><span class="token class-name">Session</span>底层是依赖cookie的，默认关闭浏览器失效<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;获取session对象HttpSession session &#x3D; req.getSession();&#x2F;&#x2F;常用方法System.out.println(&quot;SessionId:&quot; + session.getId());System.out.println(&quot;会话创建时间：&quot; + session.getCreationTime());System.out.println(&quot;最后一次访问时间&quot; + session.getLastAccessedTime());System.out.println(&quot;是否是新的对象&quot; + session.isNew());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-session域对象"><a href="#5-2-session域对象" class="headerlink" title="5.2.session域对象"></a>5.2.session域对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>      <span class="token number">3.</span>session作用域<span class="token operator">*</span>          再一次会话有效，可以有多次请求和响应，在会话中数据共享<span class="token operator">*</span>          <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>          <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>          <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span>          request作用域<span class="token operator">*</span>              一次请求中有效，在请求转发中有效，在重定向失效<span class="token operator">*</span>          session作用域<span class="token operator">*</span>               一次回话中有效，无论请求转发还是重定向都有效，会话销毁则失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 作用域* */</span><span class="token comment">//设置request作用域</span>req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置session作用域</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span><span class="token string">"session"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//请求转发(一次请求)</span><span class="token comment">//req.getRequestDispatcher("se02").forward(req,resp);</span><span class="token comment">//重定向(两次请求->request不共享)</span>resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"se02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211014002144048.png"></p><h3 id="5-3-session对象的销毁"><a href="#5-3-session对象的销毁" class="headerlink" title="5.3.session对象的销毁"></a>5.3.session对象的销毁</h3><p>​        当客户第一次请求servlet并且操作session时，session对象生成，Tomcat中session默认存活时间式神30min，即你不操作界面的时间，一旦有操作，session会重新计时</p><p>​        那么session的默认时间在哪里可以更改呢？</p><p>​        -&gt;在Tomcat中的conf目录下的web.xml文件中可以进行修改，不建议修改</p><!-- session默认最大不活动时间，单位：分钟 -->   <session-config>        <session-timeout>30</session-timeout>    </session-config><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>      <span class="token number">4.</span>session的销毁<span class="token operator">*</span>          <span class="token number">1.</span>关闭服务器<span class="token operator">*</span>          <span class="token number">2.</span>关闭浏览器<span class="token operator">*</span>              session底层依赖cookie，cookie默认只在浏览器存活，浏览器关闭则失效<span class="token operator">*</span>          <span class="token number">3.</span>默认最大不活动时间<span class="token operator">*</span>              服务器设置了session的最大不活动时间，<span class="token class-name">Tomcat</span>服务器设置的是<span class="token number">30</span>分钟。在指定时间<span class="token operator">*</span>              内不操作，session失效<span class="token operator">*</span>          <span class="token number">4.</span>手动设置失效时间<span class="token punctuation">(</span>单位：秒<span class="token punctuation">)</span><span class="token operator">*</span>          <span class="token number">5.</span>手动销毁<span class="token operator">*</span>              session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//最大不活动时间</span><span class="token keyword">int</span> sec <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session的最大不活动时间："</span> <span class="token operator">+</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置最大不活动时间</span>session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20秒失效</span><span class="token comment">//手动销毁</span>session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210924112816982.png"> </p><p><strong>重定向后session不发生改变，SessionId保持一致</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210924113030929.png"> </p><p><strong>20秒后session失效，重定向到新页面创建新的SessionId，对比前后Session02的SessionId即可</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210924113227570.png"> </p><p><strong>设置session失效，所以重定向后两个页面的sessionId不一致</strong></p><h2 id="6-ServletContext对象"><a href="#6-ServletContext对象" class="headerlink" title="6.ServletContext对象"></a>6.ServletContext对象</h2><p>​        每一个web应用有且只有一个ServletContext对象，又称Application对象，从名称中可以得知，该对象是与应用程序相关的。在WEB容器启动的时候，会为每一个WEB应用程序创建一个对应的ServletContext对象。</p><p>​        该对象有两大作用，第一：作为域对象用来共享数据，此时数据在整个应用程序中共享；第二：该对象保存了当前应用程序相关信息，例如可以通过getServerInfo()获取当前服务器信息，getRealPath(String path)获取资源的真实路径等。</p><h3 id="6-1-ServletContext对象的获取"><a href="#6-1-ServletContext对象的获取" class="headerlink" title="6.1.ServletContext对象的获取"></a>6.1.ServletContext对象的获取</h3><p>​        获取ServletContext对象的途径有很多。比如：</p><ul><li>通过request 对象获取</li></ul><ul><li>通过session 对象获取</li></ul><ul><li>通过servletConfig 对象获取，在Servlet标准中提供了ServletConfig方法</li></ul><ul><li>直接获取，Servlet类中提供了直接获取ServletContext对象的方法</li></ul><p><strong>常用方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 常用方法* */</span><span class="token comment">//获取项目的真实路径</span><span class="token class-name">String</span> realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取项目的真实路径"</span> <span class="token operator">+</span> realPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前服务器的版本信息</span><span class="token class-name">String</span> serverInfo <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前服务器的版本信息"</span> <span class="token operator">+</span> serverInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/img/image-20210924135524146.png"></p><h3 id="6-2-ServletContext域对象"><a href="#6-2-ServletContext域对象" class="headerlink" title="6.2.ServletContext域对象"></a>6.2.ServletContext域对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 作用域*      在这个应用程序中有效，只要服务器关闭就失效*       getAttribute*       setAttribute*       removeAttribute* */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-文件上传和下载"><a href="#7-文件上传和下载" class="headerlink" title="7.文件上传和下载"></a>7.文件上传和下载</h2><p>​        在上网的时候我们常常会遇到文件上传的问题，例如上传头像，上传资料；当然除了上传，下载的情况也很多，接下来来看看我们Servlet中是怎么实现文件的上传和下载！</p><h3 id="7-1-文件上传"><a href="#7-1-文件上传" class="headerlink" title="7.1.文件上传"></a>7.1.文件上传</h3><h4 id="7-1-1-前台页面"><a href="#7-1-1-前台页面" class="headerlink" title="7.1.1.前台页面"></a>7.1.1.前台页面</h4><p>​        在做文件上传的时候，会有一个上传文件的页面，首先我们需要一个表单，并且表单的请求方式为POST；其次我们的form表单的enctype必须设为”multipart/form-data”,即 <strong>enctype=”multipart/form-data”</strong>,意思是设置表单的类型为文件上传表单。默认情况下这个表单类型是”application/x-www-form-urlencoded”,不能用于文件上传。只有使用了multipart/form-data才可以完整的传输数据！</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--文件上传表单1.表单提交类型 method = "post"2.表单类型 enctype="multipart/form-data" 二进制表单3.表单元素类型 文件域设置name属性值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadServlet<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        文件:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myfile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-2-后台实现"><a href="#7-1-2-后台实现" class="headerlink" title="7.1.2.后台实现"></a>7.1.2.后台实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Lxy * @create 2021-09-24 14:33 * * 如果文件上传类型为二进制表单，则需要添加@MultipartConfig注解，否则所有数据无法获取！！！ */</span><span class="token annotation punctuation">@MultipartConfig</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/uploadServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> uploadServlet <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置请求的编码格式</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接收参数（普通参数）</span>        <span class="token class-name">String</span> uname <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"uname:"</span> <span class="token operator">+</span> uname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获得part对象</span>        <span class="token class-name">Part</span> part <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getPart</span><span class="token punctuation">(</span><span class="token string">"myfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到上传文件的名称</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span> part<span class="token punctuation">.</span><span class="token function">getSubmittedFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到项目存放的真实路径(得到文件需要存放的路径)</span>        <span class="token class-name">String</span> realPath <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//文件上传操作</span>        part<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>realPath <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        <img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210924145634704.png" alt="image-20210924145634704"  /> </p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210924145653564.png"> </p><h3 id="7-2-文件下载"><a href="#7-2-文件下载" class="headerlink" title="7.2.文件下载"></a>7.2.文件下载</h3><p>​        文件下载，即将服务器上的资源下载（拷贝）到本地，我们可以通过两种方式下载。第一只是通过超链接本身的特性来下载；第二种是通过代码下载。</p><h4 id="7-2-1-超链接下载"><a href="#7-2-1-超链接下载" class="headerlink" title="7.2.1.超链接下载"></a>7.2.1.超链接下载</h4><p>​        当我们在Html或者Jsp页面中使用a标签时，原意是希望能够进行跳转，但当超链接遇到浏览器不识别的资源时也会自动下载；当遇到浏览器能够直接显示的资源，浏览器会默认显示出来，不如txt，png，jpg等。当然我们也可以通过<strong>download属性</strong>规定浏览器进行下载。但有些浏览器不支持。</p><p>​        <strong>默认下载：</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;h2&gt;超链接下载&lt;&#x2F;h2&gt;&lt;h4&gt;浏览器可以识别的资源&lt;&#x2F;h4&gt;&lt;a href&#x3D;&quot;test.html&quot;&gt;Html页面&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;test&quot;&gt;Txt文件&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;bg.png&quot;&gt;图片&lt;&#x2F;a&gt;&lt;h4&gt;浏览器无法识别的资源&lt;&#x2F;h4&gt;&lt;a href&#x3D;&quot;bg1.7z&quot;&gt;压缩图片&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210924151944322.png" alt="image-20210924151944322" style="zoom:50%;"/> <p>​        <strong>指定download属性下载：</strong></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;h4&gt;download属性&lt;&#x2F;h4&gt;&lt;a href&#x3D;&quot;test.html&quot; download&gt;Html文件&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;test.html&quot; download&#x3D;&quot;demo.txt&quot;&gt;下载(.Html转换.Txt文件)&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210924152501024.png" alt="image-20210924152501024" style="zoom:80%;" /> 点击Html文件</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210924152550593.png" alt="image-20210924152550593" style="zoom: 80%;" /> 点击下载链接</p><h4 id="7-2-2-后台实现下载"><a href="#7-2-2-后台实现下载" class="headerlink" title="7.2.2.后台实现下载"></a>7.2.2.后台实现下载</h4><p>​        <strong>实现步骤</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;form action&#x3D;&quot;downloadServlet&quot;&gt;    文件名:&lt;input type&#x3D;&quot;text&quot;name&#x3D;&quot;filename&quot;&gt;    &lt;button type&#x3D;&quot;submit&quot;&gt;下载&lt;&#x2F;button&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/downloadServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> downloadServlet <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置请求的编码格式</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接收要下载的文件名</span>        <span class="token class-name">String</span> filename <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断文件名是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>filename <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入要下载的文件名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//得到文件存放的路径</span>        <span class="token class-name">String</span> filePath <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过路径得到file对象</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断文件是否存在且是一个标准文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//设置响应类型(浏览器无法使用某种方式或激活某个程序来处理的类型)->下载弹出的确定保存提示框。</span>            resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/x-msdownload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置头信息</span>            resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//得到文件的输入流</span>            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//得到字节输出流</span>            <span class="token class-name">ServletOutputStream</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"要下载的文件不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210925145311713.png"> 后台下载会在服务器内部找到对应文件，找得到则跳出下载提示框！！</p><p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20210925145144128.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> Servlet </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo上传博客</title>
      <link href="/2021/09/25/hello-world/"/>
      <url>/2021/09/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lxy197120/PicBed/imgs/image-20211011001916654.png"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
